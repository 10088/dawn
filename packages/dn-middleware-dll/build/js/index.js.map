{"version":3,"sources":["webpack:///js/index.js","webpack:///./demo/index.js","webpack:///./node_modules/ntils/lib/index.js"],"names":["webpackJsonp","module","exports","__webpack_require__","utils","obj","__esModule","newObj","key","Object","prototype","hasOwnProperty","call","default","console","log","toCamelCase","noop","toString","getType","exec","isNull","undefined","trim","str","replace","str1","str2","RegExp","startWith","indexOf","contains","endWith","length","has","name","isFunction","isAsyncFunction","isGeneratorFunction","isString","isNumber","isBoolean","isElement","win","Element","tagName","nodeType","nodeName","attributes","ownerDocument","isText","Text","isObject","type","isArray","v1","v2","Array","v3","splice","v4","isDate","val","Date","isRegexp","toArray","array","slice","toDate","each","list","handler","scope","listLength","i","rs","formatDate","date","format","dict","placeholder","getMonth","getDate","getHours","getMinutes","getSeconds","getDay","Math","floor","getMilliseconds","test","$1","getFullYear","substr","value","copy","src","dst","igonres","getOwnPropertyDescriptor","defineProperty","ex","clone","objClone","constructor","forEach","final","mix","mode","igonreNull","keys","arguments","Error","get","set","enumerable","configurable","err","push","create","proto","props","Cotr","setPrototypeOf","__proto__","getPrototypeOf","deepEqual","a","b","aKeys","bKeys","allKeys","concat","checkedMap","result","fromTo","fromNum","toNum","step","abs","newGuid","s4","random","substring","map","fn","buffer","setByPath","path","split","index","getByPath","unique","newArray","getFunctionArgumentNames","parts","filter","short","maxLength","strLength","trimLength","firstUpper","toUpperCase","escapeRegExp","toLowerCase","toSplitCase","htmlPrefilter","html","rxhtmlTag","parseHTML","parent","document","createElement","innerHTML","childNodes","childNode","removeChild","hasProperty"],"mappings":"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","file":"js/index.js","sourcesContent":["webpackJsonp([0],[\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(1);\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar _ntils = __webpack_require__(2);\n\nvar utils = _interopRequireWildcard(_ntils);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nconsole.log(utils.toCamelCase('GetUser'));\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n/**\n * 空函数\n */\nfunction noop() { }\n\nfunction toString(obj) {\n  return Object.prototype.toString.call(obj);\n}\n\nfunction getType(obj) {\n  var str = toString(obj);\n  return (/^\\[object (.+)\\]$/i.exec(str))[1];\n}\n\n/**\n * 验证一个对象是否为NULL\n * @method isNull\n * @param  {Object}  obj 要验证的对象\n * @return {Boolean}     结果\n * @static\n */\nfunction isNull(obj) {\n  return obj === undefined || obj === null;\n}\n\n/**\n * 除去字符串两端的空格\n * @method trim\n * @param  {String} str 源字符串\n * @return {String}     结果字符串\n * @static\n */\nfunction trim(str) {\n  if (isNull(str)) return str;\n  if (str.trim) {\n    return str.trim();\n  } else {\n    return str.replace(/(^[\\\\s]*)|([\\\\s]*$)/g, \"\");\n  }\n}\n\n/**\n * 替换所有\n * @method replace\n * @param {String} str 源字符串\n * @param {String} str1 要替换的字符串\n * @param {String} str2 替换为的字符串\n * @static\n */\nfunction replace(str, str1, str2) {\n  if (isNull(str)) return str;\n  return str.replace(new RegExp(str1, 'g'), str2);\n}\n\n/**\n * 从字符串开头匹配\n * @method startWith\n * @param {String} str1 源字符串\n * @param {String} str2 要匹配的字符串\n * @return {Boolean} 匹配结果\n * @static\n */\nfunction startWith(str1, str2) {\n  if (isNull(str1) || isNull(str2)) return false;\n  return str1.indexOf(str2) === 0;\n}\n\n/**\n * 是否包含\n * @method contains\n * @param {String} str1 源字符串\n * @param {String} str2 检查包括字符串\n * @return {Boolean} 结果\n * @static\n */\nfunction contains(str1, str2) {\n  if (isNull(str1) || isNull(str2)) return false;\n  return str1.indexOf(str2) > -1;\n}\n\n/**\n * 从字符串结束匹配\n * @method endWidth\n * @param {String} str1 源字符串\n * @param {String} str2 匹配字符串\n * @return {Boolean} 匹配结果\n * @static\n */\nfunction endWith(str1, str2) {\n  if (isNull(str1) || isNull(str2)) return false;\n  return str1.indexOf(str2) === (str1.length - str2.length);\n}\n\n/**\n * 是否包含属性\n * @method hasProperty\n * @param  {Object}  obj  对象\n * @param  {String}  name 属性名\n * @return {Boolean}      结果\n * @static\n */\nfunction has(obj, name) {\n  if (isNull(obj) || isNull(name)) return false;\n  return (name in obj) || (obj.hasOwnProperty(name));\n}\nvar hasProperty = has;\n\n/**\n * 验证一个对象是否为Function\n * @method isFunction\n * @param  {Object}  obj 要验证的对象\n * @return {Boolean}     结果\n * @static\n */\nfunction isFunction(obj) {\n  if (isNull(obj)) return false;\n  return typeof obj === \"function\";\n}\n\n/**\n * 验证一个对象是否为 AsyncFunction\n * @method isAsyncFunction\n * @param  {Object}  obj 要验证的对象\n * @return {Boolean}     结果\n * @static\n */\nfunction isAsyncFunction(obj) {\n  if (isNull(obj)) return false;\n  return getType(obj) === \"AsyncFunction\";\n}\n\n/**\n * 验证一个对象是否为 GeneratorFunction\n * @method isGeneratorFunction\n * @param  {Object}  obj 要验证的对象\n * @return {Boolean}     结果\n * @static\n */\nfunction isGeneratorFunction(obj) {\n  if (isNull(obj)) return false;\n  return getType(obj) === \"GeneratorFunction\";\n}\n\n\n/**\n * 验证一个对象是否为String\n * @method isString\n * @param  {Object}  obj 要验证的对象\n * @return {Boolean}     结果\n * @static\n */\nfunction isString(obj) {\n  if (isNull(obj)) return false;\n  return getType(obj) === 'String';\n}\n\n/**\n * 验证一个对象是否为Number\n * @method isNumber\n * @param  {Object}  obj 要验证的对象\n * @return {Boolean}     结果\n * @static\n */\nfunction isNumber(obj) {\n  if (isNull(obj)) return false;\n  return getType(obj) === 'Number';\n}\n\n/**\n * 验证一个对象是否为Boolean\n * @method isBoolean\n * @param  {Object}  obj 要验证的对象\n * @return {Boolean}     结果\n * @static\n */\nfunction isBoolean(obj) {\n  if (isNull(obj)) return false;\n  return getType(obj) === 'Boolean';\n}\n\n/**\n * 验证一个对象是否为HTML Element\n * @method isElement\n * @param  {Object}  obj 要验证的对象\n * @return {Boolean}     结果\n * @static\n */\nfunction isElement(obj) {\n  if (isNull(obj)) return false;\n  if (win.Element) {\n    return obj instanceof Element;\n  } else {\n    return (obj.tagName && obj.nodeType &&\n      obj.nodeName && obj.attributes &&\n      obj.ownerDocument);\n  }\n}\n\n/**\n * 验证一个对象是否为HTML Text Element\n * @method isText\n * @param  {Object}  obj 要验证的对象\n * @return {Boolean}     结果\n * @static\n */\nfunction isText(obj) {\n  if (isNull(obj)) return false;\n  return obj instanceof Text;\n}\n\n/**\n * 验证一个对象是否为Object\n * @method isObject\n * @param  {Object}  obj 要验证的对象\n * @return {Boolean}     结果\n * @static\n */\nfunction isObject(obj) {\n  if (isNull(obj)) return false;\n  var type = getType(obj);\n  return type === 'Object' || type === 'Array';\n}\n\n/**\n * 验证一个对象是否为Array或伪Array\n * @method isArray\n * @param  {Object}  obj 要验证的对象\n * @return {Boolean}     结果\n * @static\n */\nfunction isArray(obj) {\n  if (isNull(obj)) return false;\n  var v1 = getType(obj) === 'Array';\n  var v2 = obj instanceof Array;\n  var v3 = !isString(obj) && isNumber(obj.length) && isFunction(obj.splice);\n  var v4 = !isString(obj) && isNumber(obj.length) && obj[0];\n  return v1 || v2 || v3 || v4;\n}\n\n/**\n * 验证是不是一个日期对象\n * @method isDate\n * @param {Object} val   要检查的对象\n * @return {Boolean}           结果\n * @static\n */\nfunction isDate(val) {\n  if (isNull(val)) return false;\n  return val instanceof Date;\n}\n\n/**\n * 验证是不是一个正则对象\n * @method isDate\n * @param {Object} val   要检查的对象\n * @return {Boolean}           结果\n * @static\n */\nfunction isRegexp(val) {\n  return val instanceof RegExp;\n}\n\n/**\n * 转换为数组\n * @method toArray\n * @param {Array|Object} array 伪数组\n * @return {Array} 转换结果数组\n * @static\n */\nfunction toArray(array) {\n  if (isNull(array)) return [];\n  return Array.prototype.slice.call(array);\n}\n\n/**\n * 转为日期格式\n * @method toDate\n * @param {Number|String} val 日期字符串或整型数值\n * @return {Date} 日期对象\n * @static\n */\nfunction toDate(val) {\n  if (isNumber(val))\n    return new Date(val);\n  else if (isString(val))\n    return new Date(replace(replace(val, '-', '/'), 'T', ' '));\n  else if (isDate(val))\n    return val;\n  else\n    return null;\n}\n\n/**\n * 遍历一个对像或数组\n * @method each\n * @param  {Object or Array}   obj  要遍历的数组或对象\n * @param  {Function} fn            处理函数\n * @return {void}                   无返回值\n * @static\n */\nfunction each(list, handler, scope) {\n  if (isNull(list) || isNull(handler)) return;\n  if (isArray(list)) {\n    var listLength = list.length;\n    for (var i = 0; i < listLength; i++) {\n      var rs = handler.call(scope || list[i], i, list[i]);\n      if (!isNull(rs)) return rs;\n    }\n  } else {\n    for (var key in list) {\n      var rs = handler.call(scope || list[key], key, list[key]);\n      if (!isNull(rs)) return rs;\n    }\n  }\n}\n\n/**\n * 格式化日期\n * @method formatDate\n * @param {Date|String|Number} date 日期\n * @param {String} format 格式化字符串\n * @param {object} dict 反译字典\n * @return {String} 格式化结果\n * @static\n */\nfunction formatDate(date, format, dict) {\n  if (isNull(format) || isNull(date)) return date;\n  date = toDate(date);\n  dict = dict || {};\n  var placeholder = {\n    \"M+\": date.getMonth() + 1, //month\n    \"d+\": date.getDate(), //day\n    \"h+\": date.getHours(), //hour\n    \"m+\": date.getMinutes(), //minute\n    \"s+\": date.getSeconds(), //second\n    \"w+\": date.getDay(), //week\n    \"q+\": Math.floor((date.getMonth() + 3) / 3), //quarter\n    \"S\": date.getMilliseconds() //millisecond\n  };\n  if (/(y+)/.test(format)) {\n    format = format.replace(\n      RegExp.$1,\n      (date.getFullYear() + \"\").substr(4 - RegExp.$1.length)\n    );\n  }\n  for (var key in placeholder) {\n    if (new RegExp(\"(\" + key + \")\").test(format)) {\n      var value = placeholder[key];\n      value = dict[value] || value;\n      format = format.replace(RegExp.$1, RegExp.$1.length == 1\n        ? value : (\"00\" + value).substr((\"\" + value).length));\n    }\n  }\n  return format;\n}\n\n/**\n * 拷贝对象\n * @method copy\n * @param {Object} src 源对象\n * @param {Object} dst 目标对象\n * @static\n */\nfunction copy(src, dst, igonres) {\n  dst = dst || (isArray(src) ? [] : {});\n  each(src, function (key) {\n    if (igonres && igonres.indexOf(key) > -1) return;\n    delete dst[key];\n    if (Object.getOwnPropertyDescriptor) {\n      try {\n        Object.defineProperty(dst, key,\n          Object.getOwnPropertyDescriptor(src, key));\n      } catch (ex) {\n        dst[key] = src[key];\n      }\n    } else {\n      dst[key] = src[key];\n    }\n  });\n  return dst;\n}\n\n/**\n * 深度克隆对象\n * @method clone\n * @param {Object} src 源对象\n * @return {Object} 新对象\n * @static\n */\nfunction clone(src, igonres) {\n  if (isNull(src) ||\n    isString(src) ||\n    isNumber(src) ||\n    isBoolean(src) ||\n    isDate(src)) {\n    return src;\n  }\n  var objClone = src;\n  try {\n    objClone = new src.constructor();\n  } catch (ex) { }\n  each(src, function (key, value) {\n    if (objClone[key] != value && !contains(igonres, key)) {\n      if (isObject(value)) {\n        objClone[key] = clone(value, igonres);\n      } else {\n        objClone[key] = value;\n      }\n    }\n  });\n  ['toString', 'valueOf'].forEach(function (key) {\n    if (contains(igonres, key)) return;\n    final(objClone, key, src[key]);\n  });\n  return objClone;\n}\n\n/**\n * 合并对象\n * @method mix\n * @return 合并后的对象\n * @param {Object} dst 目标对象\n * @param {Object} src 源对象\n * @param {Array} igonres 忽略的属性名,\n * @param {Number} mode 模式\n */\nfunction mix(dst, src, igonres, mode, igonreNull) {\n  //根据模式来判断，默认是Obj to Obj的  \n  if (mode) {\n    switch (mode) {\n      case 1: // proto to proto  \n        return mix(dst.prototype, src.prototype, igonres, 0);\n      case 2: // object to object and proto to proto  \n        mix(dst.prototype, src.prototype, igonres, 0);\n        break; // pass through  \n      case 3: // proto to static  \n        return mix(dst, src.prototype, igonres, 0);\n      case 4: // static to proto  \n        return mix(dst.prototype, src, igonres, 0);\n      default: // object to object is what happens below  \n    }\n  }\n  //---\n  src = src || {};\n  dst = dst || (isArray(src) ? [] : {});\n  keys(src).forEach(function (key) {\n    if (contains(igonres, key)) return;\n    if (igonreNull && isNull(src[key])) return;\n    if (isObject(src[key]) &&\n      (src[key].constructor == Object ||\n        src[key].constructor == Array ||\n        src[key].constructor == null)) {\n      dst[key] = mix(dst[key], src[key], igonres, 0, igonreNull);\n    } else {\n      dst[key] = src[key];\n    }\n  });\n  return dst;\n}\n\n/**\n * 定义不可遍历的属性\n **/\nfunction final(obj, name, value) {\n  if (arguments.length < 1) throw new Error('Parameter missing');\n  if (arguments.length < 2) {\n    return each(obj, function (name, value) {\n      final(obj, name, value);\n    });\n  }\n  if (arguments.length < 3) return final(obj, name, obj[name]);\n  try {\n    Object.defineProperty(obj, name, {\n      get: function () {\n        return value;\n      },\n      set: function () {\n        throw new Error('Cannot assign to final property:' + name);\n      },\n      enumerable: false, //不能枚举\n      configurable: false, //不能重写定义\n    });\n  } catch (err) {\n    obj[name] = value;\n  }\n}\n\n/**\n * 获取所有 key \n */\nfunction keys(obj) {\n  if (Object.keys) return Object.keys(obj);\n  var keys = [];\n  each(obj, function (key) {\n    keys.push(key);\n  });\n  return keys;\n}\n\n/**\n * 创建一个对象\n */\nfunction create(proto, props) {\n  if (Object.create) return Object.create(proto, props);\n  function Cotr() { }\n  Cotr.prototype = proto;\n  var obj = new Cotr();\n  if (props) copy(props, obj);\n  return obj;\n}\n\n/**\n * 设置 proto\n * 在不支持 setPrototypeOf 也不支持 __proto__ 的浏览器\n * 中，会采用 copy 方式\n */\nfunction setPrototypeOf(obj, proto) {\n  if (Object.setPrototypeOf) {\n    return Object.setPrototypeOf(obj, proto || create(null));\n  } else {\n    if (!('__proto__' in Object)) copy(proto, obj);\n    obj.__proto__ = proto;\n  }\n}\n\n/**\n * 获取 proto\n */\nfunction getPrototypeOf(obj) {\n  if (obj.__proto__) return obj.__proto__;\n  if (Object.getPrototypeOf) return Object.getPrototypeOf(obj);\n  if (obj.constructor) return obj.constructor.prototype;\n}\n\n/**\n * 是否深度相等\n */\nfunction deepEqual(a, b) {\n  if (a === b) return true;\n  if (!isObject(a) || !isObject(b)) return false;\n  var aKeys = keys(a);\n  var bKeys = keys(b);\n  if (aKeys.length !== bKeys.length) return false;\n  var allKeys = aKeys.concat(bKeys);\n  var checkedMap = create(null);\n  var result = true;\n  each(allKeys, function (i, key) {\n    if (checkedMap[key]) return;\n    if (!deepEqual(a[key], b[key])) result = false;\n    checkedMap[key] = true;\n  });\n  return result;\n}\n\n/**\n * 从一个数值循环到别一个数\n * @param {number} fromNum 开始数值\n * @param {Number} toNum 结束数值\n * @param {Number} step 步长值\n * @param {function} handler 执行函数\n * @returns {void} 无返回\n */\nfunction fromTo(fromNum, toNum, step, handler) {\n  if (!handler) handler = [step, step = handler][0];\n  step = Math.abs(step || 1);\n  if (fromNum < toNum) {\n    for (var i = fromNum; i <= toNum; i += step) handler(i);\n  } else {\n    for (var i = fromNum; i >= toNum; i -= step) handler(i);\n  }\n}\n\n/**\n * 生成一个Guid\n * @method newGuid\n * @return {String} GUID字符串\n * @static\n */\nfunction newGuid() {\n  function s4() {\n    return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\n  }\n  return (s4() + s4() + \"-\" + s4() + \"-\" + s4() + \"-\" +\n    s4() + \"-\" + s4() + s4() + s4());\n}\n\n/**\n * 对象变换\n **/\nfunction map(list, fn) {\n  var buffer = isArray(list) ? [] : {};\n  each(list, function (name, value) {\n    buffer[name] = fn(name, value);\n  });\n  return buffer;\n}\n\n/**\n * 通过路径设置属性值\n */\nfunction setByPath(obj, path, value) {\n  if (isNull(obj) || isNull(path) || path === '') {\n    return;\n  }\n  if (!isArray(path)) {\n    path = path.replace(/\\[/, '.').replace(/\\]/, '.').split('.');\n  }\n  each(path, function (index, name) {\n    if (isNull(name) || name.length < 1) return;\n    if (index === path.length - 1) {\n      obj[name] = value;\n    } else {\n      obj[name] = obj[name] || {};\n      obj = obj[name];\n    }\n  });\n}\n\n/**\n * 通过路径获取属性值\n */\nfunction getByPath(obj, path) {\n  if (isNull(obj) || isNull(path) || path === '') {\n    return obj;\n  }\n  if (!isArray(path)) {\n    path = path.replace(/\\[/, '.').replace(/\\]/, '.').split('.');\n  }\n  each(path, function (index, name) {\n    if (isNull(name) || name.length < 1) return;\n    if (!isNull(obj)) obj = obj[name];\n  });\n  return obj;\n}\n\n/**\n * 数组去重\n **/\nfunction unique(array) {\n  if (isNull(array)) return array;\n  var newArray = [];\n  each(array, function (i, value) {\n    if (newArray.indexOf(value) > -1) return;\n    newArray.push(value);\n  });\n  return newArray;\n}\n\n/**\n * 解析 function 的参数列表\n **/\nfunction getFunctionArgumentNames(fn) {\n  if (!fn) return [];\n  var src = fn.toString();\n  var parts = src.split(')')[0].split('=>')[0].split('(');\n  return (parts[1] || parts[0]).split(',').map(function (name) {\n    return trim(name);\n  }).filter(function (name) {\n    return name != 'function';\n  });\n}\n\n/**\n * 缩短字符串\n */\nfunction short(str, maxLength) {\n  if (!str) return str;\n  maxLength = maxLength || 40;\n  var strLength = str.length;\n  var trimLength = maxLength / 2;\n  return strLength > maxLength ?\n    str.substr(0, trimLength) + '...' + str.substr(strLength - trimLength) :\n    str;\n}\n\n/**\n * 首字母大写\n */\nfunction firstUpper(str) {\n  if (!isString(str)) return '';\n  return str.substring(0, 1).toUpperCase() + str.substring(1);\n}\n\n/**\n * 编码正则字符串\n */\nfunction escapeRegExp(str) {\n  if (!isString(str)) return '';\n  return str.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n}\n\n/**\n  * 将字符串转成「驼峰」式\n  * @param {string} str 原始字符串\n  * @param {number} mode 1 大驼峰，0 小驼峰\n  * @return {string} 转换后的字符串\n  */\nfunction toCamelCase(str, mode) {\n  if (!isString(str)) return '';\n  if (str) {\n    str = str.replace(/\\-[a-z0-9]/g, function ($1) {\n      return $1.slice(1).toUpperCase()\n    });\n    str = str.replace(/^[a-z]/i, function ($1) {\n      return mode ? $1.toUpperCase() : $1.toLowerCase();\n    });\n  }\n  return str;\n}\n\n/**\n * 将字符串转成分隔形式\n * @param {string} str 原始字符串\n * @return {string} 转换后的字符串\n */\nfunction toSplitCase(str) {\n  if (!isString(str)) return '';\n  if (str) {\n    str = str.replace(/([A-Z])/g, '-$1');\n    if (str[0] == '-') str = str.slice(1);\n  }\n  return str.toLowerCase();\n}\n\nfunction htmlPrefilter(html) {\n  var rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi;\n  return html.replace(rxhtmlTag, \"<$1></$2>\");\n}\n\n/**\n * 解析字符串为 dom \n * @param {string} str 字符串\n * @returns {HTMLNode} 解析后的 DOM \n */\nfunction parseHTML(str) {\n  str = str || ' ';\n  var parent = document.createElement('div');\n  parent.innerHTML = htmlPrefilter(trim(str));\n  var childNodes = toArray(parent.childNodes);\n  //先 clone 一份再通过 innerHTML 清空\n  //否则 IE9 下，清空时会导不通过返回的 DOM 没有子结点\n  // if (firstNode) firstNode = firstNode.cloneNode(true);\n  // win._NPH_.innerHTML = '';\n  each(childNodes, function (index, childNode) {\n    parent.removeChild(childNode);\n  });\n  return childNodes;\n}\n\nexports.noop = noop;\nexports.toString = toString;\nexports.getType = getType;\nexports.isNull = isNull;\nexports.trim = trim;\nexports.replace = replace;\nexports.startWith = startWith;\nexports.contains = contains;\nexports.endWith = endWith;\nexports.has = has;\nexports.hasProperty = hasProperty;\nexports.isFunction = isFunction;\nexports.isAsyncFunction = isAsyncFunction;\nexports.isGeneratorFunction = isGeneratorFunction;\nexports.isString = isString;\nexports.isNumber = isNumber;\nexports.isBoolean = isBoolean;\nexports.isElement = isElement;\nexports.isText = isText;\nexports.isObject = isObject;\nexports.isArray = isArray;\nexports.isDate = isDate;\nexports.isRegexp = isRegexp;\nexports.toArray = toArray;\nexports.toDate = toDate;\nexports.each = each;\nexports.formatDate = formatDate;\nexports.copy = copy;\nexports.clone = clone;\nexports.mix = mix;\nexports.final = final;\nexports.keys = keys;\nexports.create = create;\nexports.setPrototypeOf = setPrototypeOf;\nexports.getPrototypeOf = getPrototypeOf;\nexports.deepEqual = deepEqual;\nexports.fromTo = fromTo;\nexports.newGuid = newGuid;\nexports.map = map;\nexports.setByPath = setByPath;\nexports.getByPath = getByPath;\nexports.unique = unique;\nexports.getFunctionArgumentNames = getFunctionArgumentNames;\nexports.short = short;\nexports.firstUpper = firstUpper;\nexports.escapeRegExp = escapeRegExp;\nexports.toCamelCase = toCamelCase;\nexports.toSplitCase = toSplitCase;\nexports.htmlPrefilter = htmlPrefilter;\nexports.parseHTML = parseHTML;\n\n\n/***/ })\n],[0]);\n\n\n// WEBPACK FOOTER //\n// js/index.js","import * as utils from 'ntils'\n\nconsole.log(utils.toCamelCase('GetUser'))\n\n\n// WEBPACK FOOTER //\n// ./demo/index.js","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n/**\n * 空函数\n */\nfunction noop() { }\n\nfunction toString(obj) {\n  return Object.prototype.toString.call(obj);\n}\n\nfunction getType(obj) {\n  var str = toString(obj);\n  return (/^\\[object (.+)\\]$/i.exec(str))[1];\n}\n\n/**\n * 验证一个对象是否为NULL\n * @method isNull\n * @param  {Object}  obj 要验证的对象\n * @return {Boolean}     结果\n * @static\n */\nfunction isNull(obj) {\n  return obj === undefined || obj === null;\n}\n\n/**\n * 除去字符串两端的空格\n * @method trim\n * @param  {String} str 源字符串\n * @return {String}     结果字符串\n * @static\n */\nfunction trim(str) {\n  if (isNull(str)) return str;\n  if (str.trim) {\n    return str.trim();\n  } else {\n    return str.replace(/(^[\\\\s]*)|([\\\\s]*$)/g, \"\");\n  }\n}\n\n/**\n * 替换所有\n * @method replace\n * @param {String} str 源字符串\n * @param {String} str1 要替换的字符串\n * @param {String} str2 替换为的字符串\n * @static\n */\nfunction replace(str, str1, str2) {\n  if (isNull(str)) return str;\n  return str.replace(new RegExp(str1, 'g'), str2);\n}\n\n/**\n * 从字符串开头匹配\n * @method startWith\n * @param {String} str1 源字符串\n * @param {String} str2 要匹配的字符串\n * @return {Boolean} 匹配结果\n * @static\n */\nfunction startWith(str1, str2) {\n  if (isNull(str1) || isNull(str2)) return false;\n  return str1.indexOf(str2) === 0;\n}\n\n/**\n * 是否包含\n * @method contains\n * @param {String} str1 源字符串\n * @param {String} str2 检查包括字符串\n * @return {Boolean} 结果\n * @static\n */\nfunction contains(str1, str2) {\n  if (isNull(str1) || isNull(str2)) return false;\n  return str1.indexOf(str2) > -1;\n}\n\n/**\n * 从字符串结束匹配\n * @method endWidth\n * @param {String} str1 源字符串\n * @param {String} str2 匹配字符串\n * @return {Boolean} 匹配结果\n * @static\n */\nfunction endWith(str1, str2) {\n  if (isNull(str1) || isNull(str2)) return false;\n  return str1.indexOf(str2) === (str1.length - str2.length);\n}\n\n/**\n * 是否包含属性\n * @method hasProperty\n * @param  {Object}  obj  对象\n * @param  {String}  name 属性名\n * @return {Boolean}      结果\n * @static\n */\nfunction has(obj, name) {\n  if (isNull(obj) || isNull(name)) return false;\n  return (name in obj) || (obj.hasOwnProperty(name));\n}\nvar hasProperty = has;\n\n/**\n * 验证一个对象是否为Function\n * @method isFunction\n * @param  {Object}  obj 要验证的对象\n * @return {Boolean}     结果\n * @static\n */\nfunction isFunction(obj) {\n  if (isNull(obj)) return false;\n  return typeof obj === \"function\";\n}\n\n/**\n * 验证一个对象是否为 AsyncFunction\n * @method isAsyncFunction\n * @param  {Object}  obj 要验证的对象\n * @return {Boolean}     结果\n * @static\n */\nfunction isAsyncFunction(obj) {\n  if (isNull(obj)) return false;\n  return getType(obj) === \"AsyncFunction\";\n}\n\n/**\n * 验证一个对象是否为 GeneratorFunction\n * @method isGeneratorFunction\n * @param  {Object}  obj 要验证的对象\n * @return {Boolean}     结果\n * @static\n */\nfunction isGeneratorFunction(obj) {\n  if (isNull(obj)) return false;\n  return getType(obj) === \"GeneratorFunction\";\n}\n\n\n/**\n * 验证一个对象是否为String\n * @method isString\n * @param  {Object}  obj 要验证的对象\n * @return {Boolean}     结果\n * @static\n */\nfunction isString(obj) {\n  if (isNull(obj)) return false;\n  return getType(obj) === 'String';\n}\n\n/**\n * 验证一个对象是否为Number\n * @method isNumber\n * @param  {Object}  obj 要验证的对象\n * @return {Boolean}     结果\n * @static\n */\nfunction isNumber(obj) {\n  if (isNull(obj)) return false;\n  return getType(obj) === 'Number';\n}\n\n/**\n * 验证一个对象是否为Boolean\n * @method isBoolean\n * @param  {Object}  obj 要验证的对象\n * @return {Boolean}     结果\n * @static\n */\nfunction isBoolean(obj) {\n  if (isNull(obj)) return false;\n  return getType(obj) === 'Boolean';\n}\n\n/**\n * 验证一个对象是否为HTML Element\n * @method isElement\n * @param  {Object}  obj 要验证的对象\n * @return {Boolean}     结果\n * @static\n */\nfunction isElement(obj) {\n  if (isNull(obj)) return false;\n  if (win.Element) {\n    return obj instanceof Element;\n  } else {\n    return (obj.tagName && obj.nodeType &&\n      obj.nodeName && obj.attributes &&\n      obj.ownerDocument);\n  }\n}\n\n/**\n * 验证一个对象是否为HTML Text Element\n * @method isText\n * @param  {Object}  obj 要验证的对象\n * @return {Boolean}     结果\n * @static\n */\nfunction isText(obj) {\n  if (isNull(obj)) return false;\n  return obj instanceof Text;\n}\n\n/**\n * 验证一个对象是否为Object\n * @method isObject\n * @param  {Object}  obj 要验证的对象\n * @return {Boolean}     结果\n * @static\n */\nfunction isObject(obj) {\n  if (isNull(obj)) return false;\n  var type = getType(obj);\n  return type === 'Object' || type === 'Array';\n}\n\n/**\n * 验证一个对象是否为Array或伪Array\n * @method isArray\n * @param  {Object}  obj 要验证的对象\n * @return {Boolean}     结果\n * @static\n */\nfunction isArray(obj) {\n  if (isNull(obj)) return false;\n  var v1 = getType(obj) === 'Array';\n  var v2 = obj instanceof Array;\n  var v3 = !isString(obj) && isNumber(obj.length) && isFunction(obj.splice);\n  var v4 = !isString(obj) && isNumber(obj.length) && obj[0];\n  return v1 || v2 || v3 || v4;\n}\n\n/**\n * 验证是不是一个日期对象\n * @method isDate\n * @param {Object} val   要检查的对象\n * @return {Boolean}           结果\n * @static\n */\nfunction isDate(val) {\n  if (isNull(val)) return false;\n  return val instanceof Date;\n}\n\n/**\n * 验证是不是一个正则对象\n * @method isDate\n * @param {Object} val   要检查的对象\n * @return {Boolean}           结果\n * @static\n */\nfunction isRegexp(val) {\n  return val instanceof RegExp;\n}\n\n/**\n * 转换为数组\n * @method toArray\n * @param {Array|Object} array 伪数组\n * @return {Array} 转换结果数组\n * @static\n */\nfunction toArray(array) {\n  if (isNull(array)) return [];\n  return Array.prototype.slice.call(array);\n}\n\n/**\n * 转为日期格式\n * @method toDate\n * @param {Number|String} val 日期字符串或整型数值\n * @return {Date} 日期对象\n * @static\n */\nfunction toDate(val) {\n  if (isNumber(val))\n    return new Date(val);\n  else if (isString(val))\n    return new Date(replace(replace(val, '-', '/'), 'T', ' '));\n  else if (isDate(val))\n    return val;\n  else\n    return null;\n}\n\n/**\n * 遍历一个对像或数组\n * @method each\n * @param  {Object or Array}   obj  要遍历的数组或对象\n * @param  {Function} fn            处理函数\n * @return {void}                   无返回值\n * @static\n */\nfunction each(list, handler, scope) {\n  if (isNull(list) || isNull(handler)) return;\n  if (isArray(list)) {\n    var listLength = list.length;\n    for (var i = 0; i < listLength; i++) {\n      var rs = handler.call(scope || list[i], i, list[i]);\n      if (!isNull(rs)) return rs;\n    }\n  } else {\n    for (var key in list) {\n      var rs = handler.call(scope || list[key], key, list[key]);\n      if (!isNull(rs)) return rs;\n    }\n  }\n}\n\n/**\n * 格式化日期\n * @method formatDate\n * @param {Date|String|Number} date 日期\n * @param {String} format 格式化字符串\n * @param {object} dict 反译字典\n * @return {String} 格式化结果\n * @static\n */\nfunction formatDate(date, format, dict) {\n  if (isNull(format) || isNull(date)) return date;\n  date = toDate(date);\n  dict = dict || {};\n  var placeholder = {\n    \"M+\": date.getMonth() + 1, //month\n    \"d+\": date.getDate(), //day\n    \"h+\": date.getHours(), //hour\n    \"m+\": date.getMinutes(), //minute\n    \"s+\": date.getSeconds(), //second\n    \"w+\": date.getDay(), //week\n    \"q+\": Math.floor((date.getMonth() + 3) / 3), //quarter\n    \"S\": date.getMilliseconds() //millisecond\n  };\n  if (/(y+)/.test(format)) {\n    format = format.replace(\n      RegExp.$1,\n      (date.getFullYear() + \"\").substr(4 - RegExp.$1.length)\n    );\n  }\n  for (var key in placeholder) {\n    if (new RegExp(\"(\" + key + \")\").test(format)) {\n      var value = placeholder[key];\n      value = dict[value] || value;\n      format = format.replace(RegExp.$1, RegExp.$1.length == 1\n        ? value : (\"00\" + value).substr((\"\" + value).length));\n    }\n  }\n  return format;\n}\n\n/**\n * 拷贝对象\n * @method copy\n * @param {Object} src 源对象\n * @param {Object} dst 目标对象\n * @static\n */\nfunction copy(src, dst, igonres) {\n  dst = dst || (isArray(src) ? [] : {});\n  each(src, function (key) {\n    if (igonres && igonres.indexOf(key) > -1) return;\n    delete dst[key];\n    if (Object.getOwnPropertyDescriptor) {\n      try {\n        Object.defineProperty(dst, key,\n          Object.getOwnPropertyDescriptor(src, key));\n      } catch (ex) {\n        dst[key] = src[key];\n      }\n    } else {\n      dst[key] = src[key];\n    }\n  });\n  return dst;\n}\n\n/**\n * 深度克隆对象\n * @method clone\n * @param {Object} src 源对象\n * @return {Object} 新对象\n * @static\n */\nfunction clone(src, igonres) {\n  if (isNull(src) ||\n    isString(src) ||\n    isNumber(src) ||\n    isBoolean(src) ||\n    isDate(src)) {\n    return src;\n  }\n  var objClone = src;\n  try {\n    objClone = new src.constructor();\n  } catch (ex) { }\n  each(src, function (key, value) {\n    if (objClone[key] != value && !contains(igonres, key)) {\n      if (isObject(value)) {\n        objClone[key] = clone(value, igonres);\n      } else {\n        objClone[key] = value;\n      }\n    }\n  });\n  ['toString', 'valueOf'].forEach(function (key) {\n    if (contains(igonres, key)) return;\n    final(objClone, key, src[key]);\n  });\n  return objClone;\n}\n\n/**\n * 合并对象\n * @method mix\n * @return 合并后的对象\n * @param {Object} dst 目标对象\n * @param {Object} src 源对象\n * @param {Array} igonres 忽略的属性名,\n * @param {Number} mode 模式\n */\nfunction mix(dst, src, igonres, mode, igonreNull) {\n  //根据模式来判断，默认是Obj to Obj的  \n  if (mode) {\n    switch (mode) {\n      case 1: // proto to proto  \n        return mix(dst.prototype, src.prototype, igonres, 0);\n      case 2: // object to object and proto to proto  \n        mix(dst.prototype, src.prototype, igonres, 0);\n        break; // pass through  \n      case 3: // proto to static  \n        return mix(dst, src.prototype, igonres, 0);\n      case 4: // static to proto  \n        return mix(dst.prototype, src, igonres, 0);\n      default: // object to object is what happens below  \n    }\n  }\n  //---\n  src = src || {};\n  dst = dst || (isArray(src) ? [] : {});\n  keys(src).forEach(function (key) {\n    if (contains(igonres, key)) return;\n    if (igonreNull && isNull(src[key])) return;\n    if (isObject(src[key]) &&\n      (src[key].constructor == Object ||\n        src[key].constructor == Array ||\n        src[key].constructor == null)) {\n      dst[key] = mix(dst[key], src[key], igonres, 0, igonreNull);\n    } else {\n      dst[key] = src[key];\n    }\n  });\n  return dst;\n}\n\n/**\n * 定义不可遍历的属性\n **/\nfunction final(obj, name, value) {\n  if (arguments.length < 1) throw new Error('Parameter missing');\n  if (arguments.length < 2) {\n    return each(obj, function (name, value) {\n      final(obj, name, value);\n    });\n  }\n  if (arguments.length < 3) return final(obj, name, obj[name]);\n  try {\n    Object.defineProperty(obj, name, {\n      get: function () {\n        return value;\n      },\n      set: function () {\n        throw new Error('Cannot assign to final property:' + name);\n      },\n      enumerable: false, //不能枚举\n      configurable: false, //不能重写定义\n    });\n  } catch (err) {\n    obj[name] = value;\n  }\n}\n\n/**\n * 获取所有 key \n */\nfunction keys(obj) {\n  if (Object.keys) return Object.keys(obj);\n  var keys = [];\n  each(obj, function (key) {\n    keys.push(key);\n  });\n  return keys;\n}\n\n/**\n * 创建一个对象\n */\nfunction create(proto, props) {\n  if (Object.create) return Object.create(proto, props);\n  function Cotr() { }\n  Cotr.prototype = proto;\n  var obj = new Cotr();\n  if (props) copy(props, obj);\n  return obj;\n}\n\n/**\n * 设置 proto\n * 在不支持 setPrototypeOf 也不支持 __proto__ 的浏览器\n * 中，会采用 copy 方式\n */\nfunction setPrototypeOf(obj, proto) {\n  if (Object.setPrototypeOf) {\n    return Object.setPrototypeOf(obj, proto || create(null));\n  } else {\n    if (!('__proto__' in Object)) copy(proto, obj);\n    obj.__proto__ = proto;\n  }\n}\n\n/**\n * 获取 proto\n */\nfunction getPrototypeOf(obj) {\n  if (obj.__proto__) return obj.__proto__;\n  if (Object.getPrototypeOf) return Object.getPrototypeOf(obj);\n  if (obj.constructor) return obj.constructor.prototype;\n}\n\n/**\n * 是否深度相等\n */\nfunction deepEqual(a, b) {\n  if (a === b) return true;\n  if (!isObject(a) || !isObject(b)) return false;\n  var aKeys = keys(a);\n  var bKeys = keys(b);\n  if (aKeys.length !== bKeys.length) return false;\n  var allKeys = aKeys.concat(bKeys);\n  var checkedMap = create(null);\n  var result = true;\n  each(allKeys, function (i, key) {\n    if (checkedMap[key]) return;\n    if (!deepEqual(a[key], b[key])) result = false;\n    checkedMap[key] = true;\n  });\n  return result;\n}\n\n/**\n * 从一个数值循环到别一个数\n * @param {number} fromNum 开始数值\n * @param {Number} toNum 结束数值\n * @param {Number} step 步长值\n * @param {function} handler 执行函数\n * @returns {void} 无返回\n */\nfunction fromTo(fromNum, toNum, step, handler) {\n  if (!handler) handler = [step, step = handler][0];\n  step = Math.abs(step || 1);\n  if (fromNum < toNum) {\n    for (var i = fromNum; i <= toNum; i += step) handler(i);\n  } else {\n    for (var i = fromNum; i >= toNum; i -= step) handler(i);\n  }\n}\n\n/**\n * 生成一个Guid\n * @method newGuid\n * @return {String} GUID字符串\n * @static\n */\nfunction newGuid() {\n  function s4() {\n    return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\n  }\n  return (s4() + s4() + \"-\" + s4() + \"-\" + s4() + \"-\" +\n    s4() + \"-\" + s4() + s4() + s4());\n}\n\n/**\n * 对象变换\n **/\nfunction map(list, fn) {\n  var buffer = isArray(list) ? [] : {};\n  each(list, function (name, value) {\n    buffer[name] = fn(name, value);\n  });\n  return buffer;\n}\n\n/**\n * 通过路径设置属性值\n */\nfunction setByPath(obj, path, value) {\n  if (isNull(obj) || isNull(path) || path === '') {\n    return;\n  }\n  if (!isArray(path)) {\n    path = path.replace(/\\[/, '.').replace(/\\]/, '.').split('.');\n  }\n  each(path, function (index, name) {\n    if (isNull(name) || name.length < 1) return;\n    if (index === path.length - 1) {\n      obj[name] = value;\n    } else {\n      obj[name] = obj[name] || {};\n      obj = obj[name];\n    }\n  });\n}\n\n/**\n * 通过路径获取属性值\n */\nfunction getByPath(obj, path) {\n  if (isNull(obj) || isNull(path) || path === '') {\n    return obj;\n  }\n  if (!isArray(path)) {\n    path = path.replace(/\\[/, '.').replace(/\\]/, '.').split('.');\n  }\n  each(path, function (index, name) {\n    if (isNull(name) || name.length < 1) return;\n    if (!isNull(obj)) obj = obj[name];\n  });\n  return obj;\n}\n\n/**\n * 数组去重\n **/\nfunction unique(array) {\n  if (isNull(array)) return array;\n  var newArray = [];\n  each(array, function (i, value) {\n    if (newArray.indexOf(value) > -1) return;\n    newArray.push(value);\n  });\n  return newArray;\n}\n\n/**\n * 解析 function 的参数列表\n **/\nfunction getFunctionArgumentNames(fn) {\n  if (!fn) return [];\n  var src = fn.toString();\n  var parts = src.split(')')[0].split('=>')[0].split('(');\n  return (parts[1] || parts[0]).split(',').map(function (name) {\n    return trim(name);\n  }).filter(function (name) {\n    return name != 'function';\n  });\n}\n\n/**\n * 缩短字符串\n */\nfunction short(str, maxLength) {\n  if (!str) return str;\n  maxLength = maxLength || 40;\n  var strLength = str.length;\n  var trimLength = maxLength / 2;\n  return strLength > maxLength ?\n    str.substr(0, trimLength) + '...' + str.substr(strLength - trimLength) :\n    str;\n}\n\n/**\n * 首字母大写\n */\nfunction firstUpper(str) {\n  if (!isString(str)) return '';\n  return str.substring(0, 1).toUpperCase() + str.substring(1);\n}\n\n/**\n * 编码正则字符串\n */\nfunction escapeRegExp(str) {\n  if (!isString(str)) return '';\n  return str.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n}\n\n/**\n  * 将字符串转成「驼峰」式\n  * @param {string} str 原始字符串\n  * @param {number} mode 1 大驼峰，0 小驼峰\n  * @return {string} 转换后的字符串\n  */\nfunction toCamelCase(str, mode) {\n  if (!isString(str)) return '';\n  if (str) {\n    str = str.replace(/\\-[a-z0-9]/g, function ($1) {\n      return $1.slice(1).toUpperCase()\n    });\n    str = str.replace(/^[a-z]/i, function ($1) {\n      return mode ? $1.toUpperCase() : $1.toLowerCase();\n    });\n  }\n  return str;\n}\n\n/**\n * 将字符串转成分隔形式\n * @param {string} str 原始字符串\n * @return {string} 转换后的字符串\n */\nfunction toSplitCase(str) {\n  if (!isString(str)) return '';\n  if (str) {\n    str = str.replace(/([A-Z])/g, '-$1');\n    if (str[0] == '-') str = str.slice(1);\n  }\n  return str.toLowerCase();\n}\n\nfunction htmlPrefilter(html) {\n  var rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi;\n  return html.replace(rxhtmlTag, \"<$1></$2>\");\n}\n\n/**\n * 解析字符串为 dom \n * @param {string} str 字符串\n * @returns {HTMLNode} 解析后的 DOM \n */\nfunction parseHTML(str) {\n  str = str || ' ';\n  var parent = document.createElement('div');\n  parent.innerHTML = htmlPrefilter(trim(str));\n  var childNodes = toArray(parent.childNodes);\n  //先 clone 一份再通过 innerHTML 清空\n  //否则 IE9 下，清空时会导不通过返回的 DOM 没有子结点\n  // if (firstNode) firstNode = firstNode.cloneNode(true);\n  // win._NPH_.innerHTML = '';\n  each(childNodes, function (index, childNode) {\n    parent.removeChild(childNode);\n  });\n  return childNodes;\n}\n\nexports.noop = noop;\nexports.toString = toString;\nexports.getType = getType;\nexports.isNull = isNull;\nexports.trim = trim;\nexports.replace = replace;\nexports.startWith = startWith;\nexports.contains = contains;\nexports.endWith = endWith;\nexports.has = has;\nexports.hasProperty = hasProperty;\nexports.isFunction = isFunction;\nexports.isAsyncFunction = isAsyncFunction;\nexports.isGeneratorFunction = isGeneratorFunction;\nexports.isString = isString;\nexports.isNumber = isNumber;\nexports.isBoolean = isBoolean;\nexports.isElement = isElement;\nexports.isText = isText;\nexports.isObject = isObject;\nexports.isArray = isArray;\nexports.isDate = isDate;\nexports.isRegexp = isRegexp;\nexports.toArray = toArray;\nexports.toDate = toDate;\nexports.each = each;\nexports.formatDate = formatDate;\nexports.copy = copy;\nexports.clone = clone;\nexports.mix = mix;\nexports.final = final;\nexports.keys = keys;\nexports.create = create;\nexports.setPrototypeOf = setPrototypeOf;\nexports.getPrototypeOf = getPrototypeOf;\nexports.deepEqual = deepEqual;\nexports.fromTo = fromTo;\nexports.newGuid = newGuid;\nexports.map = map;\nexports.setByPath = setByPath;\nexports.getByPath = getByPath;\nexports.unique = unique;\nexports.getFunctionArgumentNames = getFunctionArgumentNames;\nexports.short = short;\nexports.firstUpper = firstUpper;\nexports.escapeRegExp = escapeRegExp;\nexports.toCamelCase = toCamelCase;\nexports.toSplitCase = toSplitCase;\nexports.htmlPrefilter = htmlPrefilter;\nexports.parseHTML = parseHTML;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/ntils/lib/index.js\n// module id = 2\n// module chunks = 0"],"sourceRoot":""}