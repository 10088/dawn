(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined'
    ? factory(exports, require('react'), require('react-dom'))
    : typeof define === 'function' && define.amd
    ? define(['exports', 'react', 'react-dom'], factory)
    : ((global = typeof globalThis !== 'undefined' ? globalThis : global || self),
      factory((global.basicComponent = {}), global.React, global.ReactDOM));
})(this, function (exports, React, ReactDOM) {
  'use strict';

  function _interopDefaultLegacy(e) {
    return e && typeof e === 'object' && 'default' in e ? e : { default: e };
  }

  function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
      Object.keys(e).forEach(function (k) {
        if (k !== 'default') {
          var d = Object.getOwnPropertyDescriptor(e, k);
          Object.defineProperty(
            n,
            k,
            d.get
              ? d
              : {
                  enumerable: true,
                  get: function () {
                    return e[k];
                  },
                },
          );
        }
      });
    }
    n['default'] = e;
    return Object.freeze(n);
  }

  var React__default = /*#__PURE__*/ _interopDefaultLegacy(React);
  var React__namespace = /*#__PURE__*/ _interopNamespace(React);
  var ReactDOM__default = /*#__PURE__*/ _interopDefaultLegacy(ReactDOM);

  var commonjsGlobal =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : typeof self !== 'undefined'
      ? self
      : {};

  function getAugmentedNamespace(n) {
    if (n.__esModule) return n;
    var a = Object.defineProperty({}, '__esModule', { value: true });
    Object.keys(n).forEach(function (k) {
      var d = Object.getOwnPropertyDescriptor(n, k);
      Object.defineProperty(
        a,
        k,
        d.get
          ? d
          : {
              enumerable: true,
              get: function () {
                return n[k];
              },
            },
      );
    });
    return a;
  }

  function commonjsRequire(path) {
    throw new Error(
      'Could not dynamically require "' +
        path +
        '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.',
    );
  }

  var assign$2 = { exports: {} };

  var _global = { exports: {} };

  // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
  var global$6 = (_global.exports =
    typeof window != 'undefined' && window.Math == Math
      ? window
      : typeof self != 'undefined' && self.Math == Math
      ? self
      : // eslint-disable-next-line no-new-func
        Function('return this')());
  if (typeof __g == 'number') __g = global$6; // eslint-disable-line no-undef

  var _core = { exports: {} };

  var core$3 = (_core.exports = { version: '2.6.12' });
  if (typeof __e == 'number') __e = core$3; // eslint-disable-line no-undef

  var _aFunction = function (it) {
    if (typeof it != 'function') throw TypeError(it + ' is not a function!');
    return it;
  };

  // optional / simple context binding
  var aFunction = _aFunction;
  var _ctx = function (fn, that, length) {
    aFunction(fn);
    if (that === undefined) return fn;
    switch (length) {
      case 1:
        return function (a) {
          return fn.call(that, a);
        };
      case 2:
        return function (a, b) {
          return fn.call(that, a, b);
        };
      case 3:
        return function (a, b, c) {
          return fn.call(that, a, b, c);
        };
    }
    return function (/* ...args */) {
      return fn.apply(that, arguments);
    };
  };

  var _objectDp = {};

  var _isObject = function (it) {
    return typeof it === 'object' ? it !== null : typeof it === 'function';
  };

  var isObject$6 = _isObject;
  var _anObject = function (it) {
    if (!isObject$6(it)) throw TypeError(it + ' is not an object!');
    return it;
  };

  var _fails = function (exec) {
    try {
      return !!exec();
    } catch (e) {
      return true;
    }
  };

  // Thank's IE8 for his funny defineProperty
  var _descriptors = !_fails(function () {
    return (
      Object.defineProperty({}, 'a', {
        get: function () {
          return 7;
        },
      }).a != 7
    );
  });

  var isObject$5 = _isObject;
  var document$2 = _global.exports.document;
  // typeof document.createElement is 'object' in old IE
  var is = isObject$5(document$2) && isObject$5(document$2.createElement);
  var _domCreate = function (it) {
    return is ? document$2.createElement(it) : {};
  };

  var _ie8DomDefine =
    !_descriptors &&
    !_fails(function () {
      return (
        Object.defineProperty(_domCreate('div'), 'a', {
          get: function () {
            return 7;
          },
        }).a != 7
      );
    });

  // 7.1.1 ToPrimitive(input [, PreferredType])
  var isObject$4 = _isObject;
  // instead of the ES6 spec version, we didn't implement @@toPrimitive case
  // and the second argument - flag - preferred type is a string
  var _toPrimitive = function (it, S) {
    if (!isObject$4(it)) return it;
    var fn, val;
    if (S && typeof (fn = it.toString) == 'function' && !isObject$4((val = fn.call(it)))) return val;
    if (typeof (fn = it.valueOf) == 'function' && !isObject$4((val = fn.call(it)))) return val;
    if (!S && typeof (fn = it.toString) == 'function' && !isObject$4((val = fn.call(it)))) return val;
    throw TypeError("Can't convert object to primitive value");
  };

  var anObject$4 = _anObject;
  var IE8_DOM_DEFINE$1 = _ie8DomDefine;
  var toPrimitive$2 = _toPrimitive;
  var dP$3 = Object.defineProperty;

  _objectDp.f = _descriptors
    ? Object.defineProperty
    : function defineProperty(O, P, Attributes) {
        anObject$4(O);
        P = toPrimitive$2(P, true);
        anObject$4(Attributes);
        if (IE8_DOM_DEFINE$1)
          try {
            return dP$3(O, P, Attributes);
          } catch (e) {
            /* empty */
          }
        if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
        if ('value' in Attributes) O[P] = Attributes.value;
        return O;
      };

  var _propertyDesc = function (bitmap, value) {
    return {
      enumerable: !(bitmap & 1),
      configurable: !(bitmap & 2),
      writable: !(bitmap & 4),
      value: value,
    };
  };

  var dP$2 = _objectDp;
  var createDesc$2 = _propertyDesc;
  var _hide = _descriptors
    ? function (object, key, value) {
        return dP$2.f(object, key, createDesc$2(1, value));
      }
    : function (object, key, value) {
        object[key] = value;
        return object;
      };

  var hasOwnProperty$5 = {}.hasOwnProperty;
  var _has = function (it, key) {
    return hasOwnProperty$5.call(it, key);
  };

  var global$5 = _global.exports;
  var core$2 = _core.exports;
  var ctx = _ctx;
  var hide$2 = _hide;
  var has$9 = _has;
  var PROTOTYPE$2 = 'prototype';

  var $export$5 = function (type, name, source) {
    var IS_FORCED = type & $export$5.F;
    var IS_GLOBAL = type & $export$5.G;
    var IS_STATIC = type & $export$5.S;
    var IS_PROTO = type & $export$5.P;
    var IS_BIND = type & $export$5.B;
    var IS_WRAP = type & $export$5.W;
    var exports = IS_GLOBAL ? core$2 : core$2[name] || (core$2[name] = {});
    var expProto = exports[PROTOTYPE$2];
    var target = IS_GLOBAL ? global$5 : IS_STATIC ? global$5[name] : (global$5[name] || {})[PROTOTYPE$2];
    var key, own, out;
    if (IS_GLOBAL) source = name;
    for (key in source) {
      // contains in native
      own = !IS_FORCED && target && target[key] !== undefined;
      if (own && has$9(exports, key)) continue;
      // export native or passed
      out = own ? target[key] : source[key];
      // prevent global pollution for namespaces
      exports[key] =
        IS_GLOBAL && typeof target[key] != 'function'
          ? source[key]
          : // bind timers to global for call from export context
          IS_BIND && own
          ? ctx(out, global$5)
          : // wrap global constructors for prevent change them in library
          IS_WRAP && target[key] == out
          ? (function (C) {
              var F = function (a, b, c) {
                if (this instanceof C) {
                  switch (arguments.length) {
                    case 0:
                      return new C();
                    case 1:
                      return new C(a);
                    case 2:
                      return new C(a, b);
                  }
                  return new C(a, b, c);
                }
                return C.apply(this, arguments);
              };
              F[PROTOTYPE$2] = C[PROTOTYPE$2];
              return F;
              // make static versions for prototype methods
            })(out)
          : IS_PROTO && typeof out == 'function'
          ? ctx(Function.call, out)
          : out;
      // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
      if (IS_PROTO) {
        (exports.virtual || (exports.virtual = {}))[key] = out;
        // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
        if (type & $export$5.R && expProto && !expProto[key]) hide$2(expProto, key, out);
      }
    }
  };
  // type bitmap
  $export$5.F = 1; // forced
  $export$5.G = 2; // global
  $export$5.S = 4; // static
  $export$5.P = 8; // proto
  $export$5.B = 16; // bind
  $export$5.W = 32; // wrap
  $export$5.U = 64; // safe
  $export$5.R = 128; // real proto method for `library`
  var _export = $export$5;

  var toString$4 = {}.toString;

  var _cof = function (it) {
    return toString$4.call(it).slice(8, -1);
  };

  // fallback for non-array-like ES3 and non-enumerable old V8 strings
  var cof$1 = _cof;
  // eslint-disable-next-line no-prototype-builtins
  var _iobject = Object('z').propertyIsEnumerable(0)
    ? Object
    : function (it) {
        return cof$1(it) == 'String' ? it.split('') : Object(it);
      };

  // 7.2.1 RequireObjectCoercible(argument)
  var _defined = function (it) {
    if (it == undefined) throw TypeError("Can't call method on  " + it);
    return it;
  };

  // to indexed object, toObject with fallback for non-array-like ES3 strings
  var IObject$1 = _iobject;
  var defined$2 = _defined;
  var _toIobject = function (it) {
    return IObject$1(defined$2(it));
  };

  // 7.1.4 ToInteger
  var ceil = Math.ceil;
  var floor = Math.floor;
  var _toInteger = function (it) {
    return isNaN((it = +it)) ? 0 : (it > 0 ? floor : ceil)(it);
  };

  // 7.1.15 ToLength
  var toInteger$2 = _toInteger;
  var min$1 = Math.min;
  var _toLength = function (it) {
    return it > 0 ? min$1(toInteger$2(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
  };

  var toInteger$1 = _toInteger;
  var max = Math.max;
  var min = Math.min;
  var _toAbsoluteIndex = function (index, length) {
    index = toInteger$1(index);
    return index < 0 ? max(index + length, 0) : min(index, length);
  };

  // false -> Array#indexOf
  // true  -> Array#includes
  var toIObject$5 = _toIobject;
  var toLength = _toLength;
  var toAbsoluteIndex = _toAbsoluteIndex;
  var _arrayIncludes = function (IS_INCLUDES) {
    return function ($this, el, fromIndex) {
      var O = toIObject$5($this);
      var length = toLength(O.length);
      var index = toAbsoluteIndex(fromIndex, length);
      var value;
      // Array#includes uses SameValueZero equality algorithm
      // eslint-disable-next-line no-self-compare
      if (IS_INCLUDES && el != el)
        while (length > index) {
          value = O[index++];
          // eslint-disable-next-line no-self-compare
          if (value != value) return true;
          // Array#indexOf ignores holes, Array#includes - not
        }
      else
        for (; length > index; index++)
          if (IS_INCLUDES || index in O) {
            if (O[index] === el) return IS_INCLUDES || index || 0;
          }
      return !IS_INCLUDES && -1;
    };
  };

  var _shared = { exports: {} };

  var _library = true;

  var core$1 = _core.exports;
  var global$4 = _global.exports;
  var SHARED = '__core-js_shared__';
  var store$1 = global$4[SHARED] || (global$4[SHARED] = {});

  (_shared.exports = function (key, value) {
    return store$1[key] || (store$1[key] = value !== undefined ? value : {});
  })('versions', []).push({
    version: core$1.version,
    mode: 'pure',
    copyright: '© 2020 Denis Pushkarev (zloirock.ru)',
  });

  var id$1 = 0;
  var px = Math.random();
  var _uid = function (key) {
    return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id$1 + px).toString(36));
  };

  var shared$1 = _shared.exports('keys');
  var uid$3 = _uid;
  var _sharedKey = function (key) {
    return shared$1[key] || (shared$1[key] = uid$3(key));
  };

  var has$8 = _has;
  var toIObject$4 = _toIobject;
  var arrayIndexOf = _arrayIncludes(false);
  var IE_PROTO$2 = _sharedKey('IE_PROTO');

  var _objectKeysInternal = function (object, names) {
    var O = toIObject$4(object);
    var i = 0;
    var result = [];
    var key;
    for (key in O) if (key != IE_PROTO$2) has$8(O, key) && result.push(key);
    // Don't enum bug & hidden keys
    while (names.length > i)
      if (has$8(O, (key = names[i++]))) {
        ~arrayIndexOf(result, key) || result.push(key);
      }
    return result;
  };

  // IE 8- don't enum bug keys
  var _enumBugKeys =
    'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'.split(',');

  // 19.1.2.14 / 15.2.3.14 Object.keys(O)
  var $keys$2 = _objectKeysInternal;
  var enumBugKeys$1 = _enumBugKeys;

  var _objectKeys =
    Object.keys ||
    function keys(O) {
      return $keys$2(O, enumBugKeys$1);
    };

  var _objectGops = {};

  _objectGops.f = Object.getOwnPropertySymbols;

  var _objectPie = {};

  _objectPie.f = {}.propertyIsEnumerable;

  // 7.1.13 ToObject(argument)
  var defined$1 = _defined;
  var _toObject = function (it) {
    return Object(defined$1(it));
  };

  // 19.1.2.1 Object.assign(target, source, ...)
  var DESCRIPTORS$1 = _descriptors;
  var getKeys$3 = _objectKeys;
  var gOPS$1 = _objectGops;
  var pIE$2 = _objectPie;
  var toObject$3 = _toObject;
  var IObject = _iobject;
  var $assign = Object.assign;

  // should work with symbols and should have deterministic property order (V8 bug)
  var _objectAssign =
    !$assign ||
    _fails(function () {
      var A = {};
      var B = {};
      // eslint-disable-next-line no-undef
      var S = Symbol();
      var K = 'abcdefghijklmnopqrst';
      A[S] = 7;
      K.split('').forEach(function (k) {
        B[k] = k;
      });
      return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
    })
      ? function assign(target, source) {
          // eslint-disable-line no-unused-vars
          var T = toObject$3(target);
          var aLen = arguments.length;
          var index = 1;
          var getSymbols = gOPS$1.f;
          var isEnum = pIE$2.f;
          while (aLen > index) {
            var S = IObject(arguments[index++]);
            var keys = getSymbols ? getKeys$3(S).concat(getSymbols(S)) : getKeys$3(S);
            var length = keys.length;
            var j = 0;
            var key;
            while (length > j) {
              key = keys[j++];
              if (!DESCRIPTORS$1 || isEnum.call(S, key)) T[key] = S[key];
            }
          }
          return T;
        }
      : $assign;

  // 19.1.3.1 Object.assign(target, source)
  var $export$4 = _export;

  $export$4($export$4.S + $export$4.F, 'Object', { assign: _objectAssign });

  var assign$1 = _core.exports.Object.assign;

  (function (module) {
    module.exports = { default: assign$1, __esModule: true };
  })(assign$2);

  var _assign = assign$2.exports;

  var _assign2 = _interopRequireDefault$6(_assign);

  function _interopRequireDefault$6(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }

  var _default$6 =
    _assign2.default ||
    function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

  var _default$5 = function (instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError('Cannot call a class as a function');
    }
  };

  var _typeof$2 = {};

  var iterator$1 = { exports: {} };

  var toInteger = _toInteger;
  var defined = _defined;
  // true  -> String#at
  // false -> String#codePointAt
  var _stringAt = function (TO_STRING) {
    return function (that, pos) {
      var s = String(defined(that));
      var i = toInteger(pos);
      var l = s.length;
      var a, b;
      if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
      a = s.charCodeAt(i);
      return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
        ? TO_STRING
          ? s.charAt(i)
          : a
        : TO_STRING
        ? s.slice(i, i + 2)
        : ((a - 0xd800) << 10) + (b - 0xdc00) + 0x10000;
    };
  };

  var _redefine = _hide;

  var _iterators = {};

  var dP$1 = _objectDp;
  var anObject$3 = _anObject;
  var getKeys$2 = _objectKeys;

  var _objectDps = _descriptors
    ? Object.defineProperties
    : function defineProperties(O, Properties) {
        anObject$3(O);
        var keys = getKeys$2(Properties);
        var length = keys.length;
        var i = 0;
        var P;
        while (length > i) dP$1.f(O, (P = keys[i++]), Properties[P]);
        return O;
      };

  var document$1 = _global.exports.document;
  var _html = document$1 && document$1.documentElement;

  // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
  var anObject$2 = _anObject;
  var dPs = _objectDps;
  var enumBugKeys = _enumBugKeys;
  var IE_PROTO$1 = _sharedKey('IE_PROTO');
  var Empty = function () {
    /* empty */
  };
  var PROTOTYPE$1 = 'prototype';

  // Create object with fake `null` prototype: use iframe Object with cleared prototype
  var createDict = function () {
    // Thrash, waste and sodomy: IE GC bug
    var iframe = _domCreate('iframe');
    var i = enumBugKeys.length;
    var lt = '<';
    var gt = '>';
    var iframeDocument;
    iframe.style.display = 'none';
    _html.appendChild(iframe);
    iframe.src = 'javascript:'; // eslint-disable-line no-script-url
    // createDict = iframe.contentWindow.Object;
    // html.removeChild(iframe);
    iframeDocument = iframe.contentWindow.document;
    iframeDocument.open();
    iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
    iframeDocument.close();
    createDict = iframeDocument.F;
    while (i--) delete createDict[PROTOTYPE$1][enumBugKeys[i]];
    return createDict();
  };

  var _objectCreate =
    Object.create ||
    function create(O, Properties) {
      var result;
      if (O !== null) {
        Empty[PROTOTYPE$1] = anObject$2(O);
        result = new Empty();
        Empty[PROTOTYPE$1] = null;
        // add "__proto__" for Object.getPrototypeOf polyfill
        result[IE_PROTO$1] = O;
      } else result = createDict();
      return Properties === undefined ? result : dPs(result, Properties);
    };

  var _wks = { exports: {} };

  var store = _shared.exports('wks');
  var uid$2 = _uid;
  var Symbol$1 = _global.exports.Symbol;
  var USE_SYMBOL = typeof Symbol$1 == 'function';

  var $exports = (_wks.exports = function (name) {
    return (
      store[name] || (store[name] = (USE_SYMBOL && Symbol$1[name]) || (USE_SYMBOL ? Symbol$1 : uid$2)('Symbol.' + name))
    );
  });

  $exports.store = store;

  var def = _objectDp.f;
  var has$7 = _has;
  var TAG = _wks.exports('toStringTag');

  var _setToStringTag = function (it, tag, stat) {
    if (it && !has$7((it = stat ? it : it.prototype), TAG)) def(it, TAG, { configurable: true, value: tag });
  };

  var create$2 = _objectCreate;
  var descriptor = _propertyDesc;
  var setToStringTag$2 = _setToStringTag;
  var IteratorPrototype = {};

  // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
  _hide(IteratorPrototype, _wks.exports('iterator'), function () {
    return this;
  });

  var _iterCreate = function (Constructor, NAME, next) {
    Constructor.prototype = create$2(IteratorPrototype, { next: descriptor(1, next) });
    setToStringTag$2(Constructor, NAME + ' Iterator');
  };

  // 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
  var has$6 = _has;
  var toObject$2 = _toObject;
  var IE_PROTO = _sharedKey('IE_PROTO');
  var ObjectProto$1 = Object.prototype;

  var _objectGpo =
    Object.getPrototypeOf ||
    function (O) {
      O = toObject$2(O);
      if (has$6(O, IE_PROTO)) return O[IE_PROTO];
      if (typeof O.constructor == 'function' && O instanceof O.constructor) {
        return O.constructor.prototype;
      }
      return O instanceof Object ? ObjectProto$1 : null;
    };

  var $export$3 = _export;
  var redefine$1 = _redefine;
  var hide$1 = _hide;
  var Iterators$2 = _iterators;
  var $iterCreate = _iterCreate;
  var setToStringTag$1 = _setToStringTag;
  var getPrototypeOf$1 = _objectGpo;
  var ITERATOR = _wks.exports('iterator');
  var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
  var FF_ITERATOR = '@@iterator';
  var KEYS = 'keys';
  var VALUES = 'values';

  var returnThis = function () {
    return this;
  };

  var _iterDefine = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
    $iterCreate(Constructor, NAME, next);
    var getMethod = function (kind) {
      if (!BUGGY && kind in proto) return proto[kind];
      switch (kind) {
        case KEYS:
          return function keys() {
            return new Constructor(this, kind);
          };
        case VALUES:
          return function values() {
            return new Constructor(this, kind);
          };
      }
      return function entries() {
        return new Constructor(this, kind);
      };
    };
    var TAG = NAME + ' Iterator';
    var DEF_VALUES = DEFAULT == VALUES;
    var VALUES_BUG = false;
    var proto = Base.prototype;
    var $native = proto[ITERATOR] || proto[FF_ITERATOR] || (DEFAULT && proto[DEFAULT]);
    var $default = $native || getMethod(DEFAULT);
    var $entries = DEFAULT ? (!DEF_VALUES ? $default : getMethod('entries')) : undefined;
    var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
    var methods, key, IteratorPrototype;
    // Fix native
    if ($anyNative) {
      IteratorPrototype = getPrototypeOf$1($anyNative.call(new Base()));
      if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
        // Set @@toStringTag to native iterators
        setToStringTag$1(IteratorPrototype, TAG, true);
      }
    }
    // fix Array#{values, @@iterator}.name in V8 / FF
    if (DEF_VALUES && $native && $native.name !== VALUES) {
      VALUES_BUG = true;
      $default = function values() {
        return $native.call(this);
      };
    }
    // Define iterator
    if (FORCED && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
      hide$1(proto, ITERATOR, $default);
    }
    // Plug for library
    Iterators$2[NAME] = $default;
    Iterators$2[TAG] = returnThis;
    if (DEFAULT) {
      methods = {
        values: DEF_VALUES ? $default : getMethod(VALUES),
        keys: IS_SET ? $default : getMethod(KEYS),
        entries: $entries,
      };
      if (FORCED)
        for (key in methods) {
          if (!(key in proto)) redefine$1(proto, key, methods[key]);
        }
      else $export$3($export$3.P + $export$3.F * (BUGGY || VALUES_BUG), NAME, methods);
    }
    return methods;
  };

  var $at = _stringAt(true);

  // 21.1.3.27 String.prototype[@@iterator]()
  _iterDefine(
    String,
    'String',
    function (iterated) {
      this._t = String(iterated); // target
      this._i = 0; // next index
      // 21.1.5.2.1 %StringIteratorPrototype%.next()
    },
    function () {
      var O = this._t;
      var index = this._i;
      var point;
      if (index >= O.length) return { value: undefined, done: true };
      point = $at(O, index);
      this._i += point.length;
      return { value: point, done: false };
    },
  );

  var _iterStep = function (done, value) {
    return { value: value, done: !!done };
  };

  var step = _iterStep;
  var Iterators$1 = _iterators;
  var toIObject$3 = _toIobject;

  // 22.1.3.4 Array.prototype.entries()
  // 22.1.3.13 Array.prototype.keys()
  // 22.1.3.29 Array.prototype.values()
  // 22.1.3.30 Array.prototype[@@iterator]()
  _iterDefine(
    Array,
    'Array',
    function (iterated, kind) {
      this._t = toIObject$3(iterated); // target
      this._i = 0; // next index
      this._k = kind; // kind
      // 22.1.5.2.1 %ArrayIteratorPrototype%.next()
    },
    function () {
      var O = this._t;
      var kind = this._k;
      var index = this._i++;
      if (!O || index >= O.length) {
        this._t = undefined;
        return step(1);
      }
      if (kind == 'keys') return step(0, index);
      if (kind == 'values') return step(0, O[index]);
      return step(0, [index, O[index]]);
    },
    'values',
  );

  // argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
  Iterators$1.Arguments = Iterators$1.Array;

  var global$3 = _global.exports;
  var hide = _hide;
  var Iterators = _iterators;
  var TO_STRING_TAG = _wks.exports('toStringTag');

  var DOMIterables = (
    'CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' +
    'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' +
    'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' +
    'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' +
    'TextTrackList,TouchList'
  ).split(',');

  for (var i = 0; i < DOMIterables.length; i++) {
    var NAME = DOMIterables[i];
    var Collection = global$3[NAME];
    var proto = Collection && Collection.prototype;
    if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
    Iterators[NAME] = Iterators.Array;
  }

  var _wksExt = {};

  _wksExt.f = _wks.exports;

  var iterator = _wksExt.f('iterator');

  (function (module) {
    module.exports = { default: iterator, __esModule: true };
  })(iterator$1);

  var symbol$1 = { exports: {} };

  var _meta = { exports: {} };

  var META$1 = _uid('meta');
  var isObject$3 = _isObject;
  var has$5 = _has;
  var setDesc = _objectDp.f;
  var id = 0;
  var isExtensible =
    Object.isExtensible ||
    function () {
      return true;
    };
  var FREEZE = !_fails(function () {
    return isExtensible(Object.preventExtensions({}));
  });
  var setMeta = function (it) {
    setDesc(it, META$1, {
      value: {
        i: 'O' + ++id, // object ID
        w: {}, // weak collections IDs
      },
    });
  };
  var fastKey = function (it, create) {
    // return primitive with prefix
    if (!isObject$3(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
    if (!has$5(it, META$1)) {
      // can't set metadata to uncaught frozen object
      if (!isExtensible(it)) return 'F';
      // not necessary to add metadata
      if (!create) return 'E';
      // add missing metadata
      setMeta(it);
      // return object ID
    }
    return it[META$1].i;
  };
  var getWeak = function (it, create) {
    if (!has$5(it, META$1)) {
      // can't set metadata to uncaught frozen object
      if (!isExtensible(it)) return true;
      // not necessary to add metadata
      if (!create) return false;
      // add missing metadata
      setMeta(it);
      // return hash weak collections IDs
    }
    return it[META$1].w;
  };
  // add metadata on freeze-family methods calling
  var onFreeze = function (it) {
    if (FREEZE && meta.NEED && isExtensible(it) && !has$5(it, META$1)) setMeta(it);
    return it;
  };
  var meta = (_meta.exports = {
    KEY: META$1,
    NEED: false,
    fastKey: fastKey,
    getWeak: getWeak,
    onFreeze: onFreeze,
  });

  var core = _core.exports;
  var wksExt$1 = _wksExt;
  var defineProperty$1 = _objectDp.f;
  var _wksDefine = function (name) {
    var $Symbol = core.Symbol || (core.Symbol = {});
    if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty$1($Symbol, name, { value: wksExt$1.f(name) });
  };

  // all enumerable object keys, includes symbols
  var getKeys$1 = _objectKeys;
  var gOPS = _objectGops;
  var pIE$1 = _objectPie;
  var _enumKeys = function (it) {
    var result = getKeys$1(it);
    var getSymbols = gOPS.f;
    if (getSymbols) {
      var symbols = getSymbols(it);
      var isEnum = pIE$1.f;
      var i = 0;
      var key;
      while (symbols.length > i) if (isEnum.call(it, (key = symbols[i++]))) result.push(key);
    }
    return result;
  };

  // 7.2.2 IsArray(argument)
  var cof = _cof;
  var _isArray =
    Array.isArray ||
    function isArray(arg) {
      return cof(arg) == 'Array';
    };

  var _objectGopnExt = {};

  var _objectGopn = {};

  // 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
  var $keys$1 = _objectKeysInternal;
  var hiddenKeys = _enumBugKeys.concat('length', 'prototype');

  _objectGopn.f =
    Object.getOwnPropertyNames ||
    function getOwnPropertyNames(O) {
      return $keys$1(O, hiddenKeys);
    };

  // fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
  var toIObject$2 = _toIobject;
  var gOPN$1 = _objectGopn.f;
  var toString$3 = {}.toString;

  var windowNames =
    typeof window == 'object' && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];

  var getWindowNames = function (it) {
    try {
      return gOPN$1(it);
    } catch (e) {
      return windowNames.slice();
    }
  };

  _objectGopnExt.f = function getOwnPropertyNames(it) {
    return windowNames && toString$3.call(it) == '[object Window]' ? getWindowNames(it) : gOPN$1(toIObject$2(it));
  };

  var _objectGopd = {};

  var pIE = _objectPie;
  var createDesc$1 = _propertyDesc;
  var toIObject$1 = _toIobject;
  var toPrimitive$1 = _toPrimitive;
  var has$4 = _has;
  var IE8_DOM_DEFINE = _ie8DomDefine;
  var gOPD$1 = Object.getOwnPropertyDescriptor;

  _objectGopd.f = _descriptors
    ? gOPD$1
    : function getOwnPropertyDescriptor(O, P) {
        O = toIObject$1(O);
        P = toPrimitive$1(P, true);
        if (IE8_DOM_DEFINE)
          try {
            return gOPD$1(O, P);
          } catch (e) {
            /* empty */
          }
        if (has$4(O, P)) return createDesc$1(!pIE.f.call(O, P), O[P]);
      };

  // ECMAScript 6 symbols shim
  var global$2 = _global.exports;
  var has$3 = _has;
  var DESCRIPTORS = _descriptors;
  var $export$2 = _export;
  var redefine = _redefine;
  var META = _meta.exports.KEY;
  var $fails = _fails;
  var shared = _shared.exports;
  var setToStringTag = _setToStringTag;
  var uid$1 = _uid;
  var wks = _wks.exports;
  var wksExt = _wksExt;
  var wksDefine = _wksDefine;
  var enumKeys = _enumKeys;
  var isArray$3 = _isArray;
  var anObject$1 = _anObject;
  var isObject$2 = _isObject;
  var toObject$1 = _toObject;
  var toIObject = _toIobject;
  var toPrimitive = _toPrimitive;
  var createDesc = _propertyDesc;
  var _create$1 = _objectCreate;
  var gOPNExt = _objectGopnExt;
  var $GOPD = _objectGopd;
  var $GOPS = _objectGops;
  var $DP = _objectDp;
  var $keys = _objectKeys;
  var gOPD = $GOPD.f;
  var dP = $DP.f;
  var gOPN = gOPNExt.f;
  var $Symbol = global$2.Symbol;
  var $JSON = global$2.JSON;
  var _stringify = $JSON && $JSON.stringify;
  var PROTOTYPE = 'prototype';
  var HIDDEN = wks('_hidden');
  var TO_PRIMITIVE = wks('toPrimitive');
  var isEnum = {}.propertyIsEnumerable;
  var SymbolRegistry = shared('symbol-registry');
  var AllSymbols = shared('symbols');
  var OPSymbols = shared('op-symbols');
  var ObjectProto = Object[PROTOTYPE];
  var USE_NATIVE = typeof $Symbol == 'function' && !!$GOPS.f;
  var QObject = global$2.QObject;
  // Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
  var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

  // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
  var setSymbolDesc =
    DESCRIPTORS &&
    $fails(function () {
      return (
        _create$1(
          dP({}, 'a', {
            get: function () {
              return dP(this, 'a', { value: 7 }).a;
            },
          }),
        ).a != 7
      );
    })
      ? function (it, key, D) {
          var protoDesc = gOPD(ObjectProto, key);
          if (protoDesc) delete ObjectProto[key];
          dP(it, key, D);
          if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
        }
      : dP;

  var wrap = function (tag) {
    var sym = (AllSymbols[tag] = _create$1($Symbol[PROTOTYPE]));
    sym._k = tag;
    return sym;
  };

  var isSymbol =
    USE_NATIVE && typeof $Symbol.iterator == 'symbol'
      ? function (it) {
          return typeof it == 'symbol';
        }
      : function (it) {
          return it instanceof $Symbol;
        };

  var $defineProperty = function defineProperty(it, key, D) {
    if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
    anObject$1(it);
    key = toPrimitive(key, true);
    anObject$1(D);
    if (has$3(AllSymbols, key)) {
      if (!D.enumerable) {
        if (!has$3(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
        it[HIDDEN][key] = true;
      } else {
        if (has$3(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
        D = _create$1(D, { enumerable: createDesc(0, false) });
      }
      return setSymbolDesc(it, key, D);
    }
    return dP(it, key, D);
  };
  var $defineProperties = function defineProperties(it, P) {
    anObject$1(it);
    var keys = enumKeys((P = toIObject(P)));
    var i = 0;
    var l = keys.length;
    var key;
    while (l > i) $defineProperty(it, (key = keys[i++]), P[key]);
    return it;
  };
  var $create = function create(it, P) {
    return P === undefined ? _create$1(it) : $defineProperties(_create$1(it), P);
  };
  var $propertyIsEnumerable = function propertyIsEnumerable(key) {
    var E = isEnum.call(this, (key = toPrimitive(key, true)));
    if (this === ObjectProto && has$3(AllSymbols, key) && !has$3(OPSymbols, key)) return false;
    return E || !has$3(this, key) || !has$3(AllSymbols, key) || (has$3(this, HIDDEN) && this[HIDDEN][key]) ? E : true;
  };
  var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
    it = toIObject(it);
    key = toPrimitive(key, true);
    if (it === ObjectProto && has$3(AllSymbols, key) && !has$3(OPSymbols, key)) return;
    var D = gOPD(it, key);
    if (D && has$3(AllSymbols, key) && !(has$3(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
    return D;
  };
  var $getOwnPropertyNames = function getOwnPropertyNames(it) {
    var names = gOPN(toIObject(it));
    var result = [];
    var i = 0;
    var key;
    while (names.length > i) {
      if (!has$3(AllSymbols, (key = names[i++])) && key != HIDDEN && key != META) result.push(key);
    }
    return result;
  };
  var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
    var IS_OP = it === ObjectProto;
    var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
    var result = [];
    var i = 0;
    var key;
    while (names.length > i) {
      if (has$3(AllSymbols, (key = names[i++])) && (IS_OP ? has$3(ObjectProto, key) : true))
        result.push(AllSymbols[key]);
    }
    return result;
  };

  // 19.4.1.1 Symbol([description])
  if (!USE_NATIVE) {
    $Symbol = function Symbol() {
      if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
      var tag = uid$1(arguments.length > 0 ? arguments[0] : undefined);
      var $set = function (value) {
        if (this === ObjectProto) $set.call(OPSymbols, value);
        if (has$3(this, HIDDEN) && has$3(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
        setSymbolDesc(this, tag, createDesc(1, value));
      };
      if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
      return wrap(tag);
    };
    redefine($Symbol[PROTOTYPE], 'toString', function toString() {
      return this._k;
    });

    $GOPD.f = $getOwnPropertyDescriptor;
    $DP.f = $defineProperty;
    _objectGopn.f = gOPNExt.f = $getOwnPropertyNames;
    _objectPie.f = $propertyIsEnumerable;
    $GOPS.f = $getOwnPropertySymbols;

    if (DESCRIPTORS && !_library) {
      redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable);
    }

    wksExt.f = function (name) {
      return wrap(wks(name));
    };
  }

  $export$2($export$2.G + $export$2.W + $export$2.F * !USE_NATIVE, { Symbol: $Symbol });

  for (
    var es6Symbols =
        // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
        'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'.split(
          ',',
        ),
      j = 0;
    es6Symbols.length > j;

  )
    wks(es6Symbols[j++]);

  for (var wellKnownSymbols$1 = $keys(wks.store), k = 0; wellKnownSymbols$1.length > k; )
    wksDefine(wellKnownSymbols$1[k++]);

  $export$2($export$2.S + $export$2.F * !USE_NATIVE, 'Symbol', {
    // 19.4.2.1 Symbol.for(key)
    for: function (key) {
      return has$3(SymbolRegistry, (key += '')) ? SymbolRegistry[key] : (SymbolRegistry[key] = $Symbol(key));
    },
    // 19.4.2.5 Symbol.keyFor(sym)
    keyFor: function keyFor(sym) {
      if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
      for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
    },
    useSetter: function () {
      setter = true;
    },
    useSimple: function () {
      setter = false;
    },
  });

  $export$2($export$2.S + $export$2.F * !USE_NATIVE, 'Object', {
    // 19.1.2.2 Object.create(O [, Properties])
    create: $create,
    // 19.1.2.4 Object.defineProperty(O, P, Attributes)
    defineProperty: $defineProperty,
    // 19.1.2.3 Object.defineProperties(O, Properties)
    defineProperties: $defineProperties,
    // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
    getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
    // 19.1.2.7 Object.getOwnPropertyNames(O)
    getOwnPropertyNames: $getOwnPropertyNames,
    // 19.1.2.8 Object.getOwnPropertySymbols(O)
    getOwnPropertySymbols: $getOwnPropertySymbols,
  });

  // Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
  // https://bugs.chromium.org/p/v8/issues/detail?id=3443
  var FAILS_ON_PRIMITIVES = $fails(function () {
    $GOPS.f(1);
  });

  $export$2($export$2.S + $export$2.F * FAILS_ON_PRIMITIVES, 'Object', {
    getOwnPropertySymbols: function getOwnPropertySymbols(it) {
      return $GOPS.f(toObject$1(it));
    },
  });

  // 24.3.2 JSON.stringify(value [, replacer [, space]])
  $JSON &&
    $export$2(
      $export$2.S +
        $export$2.F *
          (!USE_NATIVE ||
            $fails(function () {
              var S = $Symbol();
              // MS Edge converts symbol values to JSON as {}
              // WebKit converts symbol values to JSON as null
              // V8 throws on boxed symbols
              return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
            })),
      'JSON',
      {
        stringify: function stringify(it) {
          var args = [it];
          var i = 1;
          var replacer, $replacer;
          while (arguments.length > i) args.push(arguments[i++]);
          $replacer = replacer = args[1];
          if ((!isObject$2(replacer) && it === undefined) || isSymbol(it)) return; // IE8 returns string on undefined
          if (!isArray$3(replacer))
            replacer = function (key, value) {
              if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
              if (!isSymbol(value)) return value;
            };
          args[1] = replacer;
          return _stringify.apply($JSON, args);
        },
      },
    );

  // 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
  $Symbol[PROTOTYPE][TO_PRIMITIVE] || _hide($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
  // 19.4.3.5 Symbol.prototype[@@toStringTag]
  setToStringTag($Symbol, 'Symbol');
  // 20.2.1.9 Math[@@toStringTag]
  setToStringTag(Math, 'Math', true);
  // 24.3.3 JSON[@@toStringTag]
  setToStringTag(global$2.JSON, 'JSON', true);

  _wksDefine('asyncIterator');

  _wksDefine('observable');

  var symbol = _core.exports.Symbol;

  (function (module) {
    module.exports = { default: symbol, __esModule: true };
  })(symbol$1);

  _typeof$2.__esModule = true;

  var _iterator = iterator$1.exports;

  var _iterator2 = _interopRequireDefault$5(_iterator);

  var _symbol = symbol$1.exports;

  var _symbol2 = _interopRequireDefault$5(_symbol);

  var _typeof$1 =
    typeof _symbol2.default === 'function' && typeof _iterator2.default === 'symbol'
      ? function (obj) {
          return typeof obj;
        }
      : function (obj) {
          return obj &&
            typeof _symbol2.default === 'function' &&
            obj.constructor === _symbol2.default &&
            obj !== _symbol2.default.prototype
            ? 'symbol'
            : typeof obj;
        };

  function _interopRequireDefault$5(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }

  var _default$4 = (_typeof$2.default =
    typeof _symbol2.default === 'function' && _typeof$1(_iterator2.default) === 'symbol'
      ? function (obj) {
          return typeof obj === 'undefined' ? 'undefined' : _typeof$1(obj);
        }
      : function (obj) {
          return obj &&
            typeof _symbol2.default === 'function' &&
            obj.constructor === _symbol2.default &&
            obj !== _symbol2.default.prototype
            ? 'symbol'
            : typeof obj === 'undefined'
            ? 'undefined'
            : _typeof$1(obj);
        });

  var _typeof2$1 = _typeof$2;

  var _typeof3$1 = _interopRequireDefault$4(_typeof2$1);

  function _interopRequireDefault$4(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }

  var _default$3 = function (self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call &&
      ((typeof call === 'undefined' ? 'undefined' : (0, _typeof3$1.default)(call)) === 'object' ||
        typeof call === 'function')
      ? call
      : self;
  };

  var setPrototypeOf$1 = { exports: {} };

  // Works with __proto__ only. Old v8 can't work with null proto objects.
  /* eslint-disable no-proto */
  var isObject$1 = _isObject;
  var anObject = _anObject;
  var check = function (O, proto) {
    anObject(O);
    if (!isObject$1(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
  };
  var _setProto = {
    set:
      Object.setPrototypeOf ||
      ('__proto__' in {} // eslint-disable-line
        ? (function (test, buggy, set) {
            try {
              set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);
              set(test, []);
              buggy = !(test instanceof Array);
            } catch (e) {
              buggy = true;
            }
            return function setPrototypeOf(O, proto) {
              check(O, proto);
              if (buggy) O.__proto__ = proto;
              else set(O, proto);
              return O;
            };
          })({}, false)
        : undefined),
    check: check,
  };

  // 19.1.3.19 Object.setPrototypeOf(O, proto)
  var $export$1 = _export;
  $export$1($export$1.S, 'Object', { setPrototypeOf: _setProto.set });

  var setPrototypeOf = _core.exports.Object.setPrototypeOf;

  (function (module) {
    module.exports = { default: setPrototypeOf, __esModule: true };
  })(setPrototypeOf$1);

  var create$1 = { exports: {} };

  var $export = _export;
  // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
  $export($export.S, 'Object', { create: _objectCreate });

  var $Object = _core.exports.Object;
  var create = function create(P, D) {
    return $Object.create(P, D);
  };

  (function (module) {
    module.exports = { default: create, __esModule: true };
  })(create$1);

  var _setPrototypeOf$1 = setPrototypeOf$1.exports;

  var _setPrototypeOf2 = _interopRequireDefault$3(_setPrototypeOf$1);

  var _create = create$1.exports;

  var _create2 = _interopRequireDefault$3(_create);

  var _typeof2 = _typeof$2;

  var _typeof3 = _interopRequireDefault$3(_typeof2);

  function _interopRequireDefault$3(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }

  var _default$2 = function (subClass, superClass) {
    if (typeof superClass !== 'function' && superClass !== null) {
      throw new TypeError(
        'Super expression must either be null or a function, not ' +
          (typeof superClass === 'undefined' ? 'undefined' : (0, _typeof3.default)(superClass)),
      );
    }

    subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true,
      },
    });
    if (superClass)
      _setPrototypeOf2.default
        ? (0, _setPrototypeOf2.default)(subClass, superClass)
        : (subClass.__proto__ = superClass);
  };

  var propTypes = { exports: {} };

  var reactIs$1 = { exports: {} };

  var reactIs_development = {};

  /** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  {
    (function () {
      // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
      // nor polyfill, then a plain number is used for performance.
      var hasSymbol = typeof Symbol === 'function' && Symbol.for;
      var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
      var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
      var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
      var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
      var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
      var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
      var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
      // (unstable) APIs that have been removed. Can we remove the symbols?

      var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
      var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
      var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
      var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
      var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
      var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
      var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
      var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
      var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
      var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
      var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;

      function isValidElementType(type) {
        return (
          typeof type === 'string' ||
          typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
          type === REACT_FRAGMENT_TYPE ||
          type === REACT_CONCURRENT_MODE_TYPE ||
          type === REACT_PROFILER_TYPE ||
          type === REACT_STRICT_MODE_TYPE ||
          type === REACT_SUSPENSE_TYPE ||
          type === REACT_SUSPENSE_LIST_TYPE ||
          (typeof type === 'object' &&
            type !== null &&
            (type.$$typeof === REACT_LAZY_TYPE ||
              type.$$typeof === REACT_MEMO_TYPE ||
              type.$$typeof === REACT_PROVIDER_TYPE ||
              type.$$typeof === REACT_CONTEXT_TYPE ||
              type.$$typeof === REACT_FORWARD_REF_TYPE ||
              type.$$typeof === REACT_FUNDAMENTAL_TYPE ||
              type.$$typeof === REACT_RESPONDER_TYPE ||
              type.$$typeof === REACT_SCOPE_TYPE ||
              type.$$typeof === REACT_BLOCK_TYPE))
        );
      }

      function typeOf(object) {
        if (typeof object === 'object' && object !== null) {
          var $$typeof = object.$$typeof;

          switch ($$typeof) {
            case REACT_ELEMENT_TYPE:
              var type = object.type;

              switch (type) {
                case REACT_ASYNC_MODE_TYPE:
                case REACT_CONCURRENT_MODE_TYPE:
                case REACT_FRAGMENT_TYPE:
                case REACT_PROFILER_TYPE:
                case REACT_STRICT_MODE_TYPE:
                case REACT_SUSPENSE_TYPE:
                  return type;

                default:
                  var $$typeofType = type && type.$$typeof;

                  switch ($$typeofType) {
                    case REACT_CONTEXT_TYPE:
                    case REACT_FORWARD_REF_TYPE:
                    case REACT_LAZY_TYPE:
                    case REACT_MEMO_TYPE:
                    case REACT_PROVIDER_TYPE:
                      return $$typeofType;

                    default:
                      return $$typeof;
                  }
              }

            case REACT_PORTAL_TYPE:
              return $$typeof;
          }
        }

        return undefined;
      } // AsyncMode is deprecated along with isAsyncMode

      var AsyncMode = REACT_ASYNC_MODE_TYPE;
      var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
      var ContextConsumer = REACT_CONTEXT_TYPE;
      var ContextProvider = REACT_PROVIDER_TYPE;
      var Element = REACT_ELEMENT_TYPE;
      var ForwardRef = REACT_FORWARD_REF_TYPE;
      var Fragment = REACT_FRAGMENT_TYPE;
      var Lazy = REACT_LAZY_TYPE;
      var Memo = REACT_MEMO_TYPE;
      var Portal = REACT_PORTAL_TYPE;
      var Profiler = REACT_PROFILER_TYPE;
      var StrictMode = REACT_STRICT_MODE_TYPE;
      var Suspense = REACT_SUSPENSE_TYPE;
      var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

      function isAsyncMode(object) {
        {
          if (!hasWarnedAboutDeprecatedIsAsyncMode) {
            hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

            console['warn'](
              'The ReactIs.isAsyncMode() alias has been deprecated, ' +
                'and will be removed in React 17+. Update your code to use ' +
                'ReactIs.isConcurrentMode() instead. It has the exact same API.',
            );
          }
        }

        return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
      }
      function isConcurrentMode(object) {
        return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
      }
      function isContextConsumer(object) {
        return typeOf(object) === REACT_CONTEXT_TYPE;
      }
      function isContextProvider(object) {
        return typeOf(object) === REACT_PROVIDER_TYPE;
      }
      function isElement(object) {
        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }
      function isForwardRef(object) {
        return typeOf(object) === REACT_FORWARD_REF_TYPE;
      }
      function isFragment(object) {
        return typeOf(object) === REACT_FRAGMENT_TYPE;
      }
      function isLazy(object) {
        return typeOf(object) === REACT_LAZY_TYPE;
      }
      function isMemo(object) {
        return typeOf(object) === REACT_MEMO_TYPE;
      }
      function isPortal(object) {
        return typeOf(object) === REACT_PORTAL_TYPE;
      }
      function isProfiler(object) {
        return typeOf(object) === REACT_PROFILER_TYPE;
      }
      function isStrictMode(object) {
        return typeOf(object) === REACT_STRICT_MODE_TYPE;
      }
      function isSuspense(object) {
        return typeOf(object) === REACT_SUSPENSE_TYPE;
      }

      reactIs_development.AsyncMode = AsyncMode;
      reactIs_development.ConcurrentMode = ConcurrentMode;
      reactIs_development.ContextConsumer = ContextConsumer;
      reactIs_development.ContextProvider = ContextProvider;
      reactIs_development.Element = Element;
      reactIs_development.ForwardRef = ForwardRef;
      reactIs_development.Fragment = Fragment;
      reactIs_development.Lazy = Lazy;
      reactIs_development.Memo = Memo;
      reactIs_development.Portal = Portal;
      reactIs_development.Profiler = Profiler;
      reactIs_development.StrictMode = StrictMode;
      reactIs_development.Suspense = Suspense;
      reactIs_development.isAsyncMode = isAsyncMode;
      reactIs_development.isConcurrentMode = isConcurrentMode;
      reactIs_development.isContextConsumer = isContextConsumer;
      reactIs_development.isContextProvider = isContextProvider;
      reactIs_development.isElement = isElement;
      reactIs_development.isForwardRef = isForwardRef;
      reactIs_development.isFragment = isFragment;
      reactIs_development.isLazy = isLazy;
      reactIs_development.isMemo = isMemo;
      reactIs_development.isPortal = isPortal;
      reactIs_development.isProfiler = isProfiler;
      reactIs_development.isStrictMode = isStrictMode;
      reactIs_development.isSuspense = isSuspense;
      reactIs_development.isValidElementType = isValidElementType;
      reactIs_development.typeOf = typeOf;
    })();
  }

  {
    reactIs$1.exports = reactIs_development;
  }

  /*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/
  /* eslint-disable no-unused-vars */
  var getOwnPropertySymbols$1 = Object.getOwnPropertySymbols;
  var hasOwnProperty$4 = Object.prototype.hasOwnProperty;
  var propIsEnumerable = Object.prototype.propertyIsEnumerable;

  function toObject(val) {
    if (val === null || val === undefined) {
      throw new TypeError('Object.assign cannot be called with null or undefined');
    }

    return Object(val);
  }

  function shouldUseNative() {
    try {
      if (!Object.assign) {
        return false;
      }

      // Detect buggy property enumeration order in older V8 versions.

      // https://bugs.chromium.org/p/v8/issues/detail?id=4118
      var test1 = new String('abc'); // eslint-disable-line no-new-wrappers
      test1[5] = 'de';
      if (Object.getOwnPropertyNames(test1)[0] === '5') {
        return false;
      }

      // https://bugs.chromium.org/p/v8/issues/detail?id=3056
      var test2 = {};
      for (var i = 0; i < 10; i++) {
        test2['_' + String.fromCharCode(i)] = i;
      }
      var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
        return test2[n];
      });
      if (order2.join('') !== '0123456789') {
        return false;
      }

      // https://bugs.chromium.org/p/v8/issues/detail?id=3056
      var test3 = {};
      'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
        test3[letter] = letter;
      });
      if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
        return false;
      }

      return true;
    } catch (err) {
      // We don't expect any of the above to throw, but better to be safe.
      return false;
    }
  }

  var objectAssign = shouldUseNative()
    ? Object.assign
    : function (target, source) {
        var from;
        var to = toObject(target);
        var symbols;

        for (var s = 1; s < arguments.length; s++) {
          from = Object(arguments[s]);

          for (var key in from) {
            if (hasOwnProperty$4.call(from, key)) {
              to[key] = from[key];
            }
          }

          if (getOwnPropertySymbols$1) {
            symbols = getOwnPropertySymbols$1(from);
            for (var i = 0; i < symbols.length; i++) {
              if (propIsEnumerable.call(from, symbols[i])) {
                to[symbols[i]] = from[symbols[i]];
              }
            }
          }
        }

        return to;
      };

  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  var ReactPropTypesSecret$2 = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

  var ReactPropTypesSecret_1 = ReactPropTypesSecret$2;

  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  var printWarning$1 = function () {};

  {
    var ReactPropTypesSecret$1 = ReactPropTypesSecret_1;
    var loggedTypeFailures = {};
    var has$2 = Function.call.bind(Object.prototype.hasOwnProperty);

    printWarning$1 = function (text) {
      var message = 'Warning: ' + text;
      if (typeof console !== 'undefined') {
        console.error(message);
      }
      try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
      } catch (x) {}
    };
  }

  /**
   * Assert that the values match with the type specs.
   * Error messages are memorized and will only be shown once.
   *
   * @param {object} typeSpecs Map of name to a ReactPropType
   * @param {object} values Runtime values that need to be type-checked
   * @param {string} location e.g. "prop", "context", "child context"
   * @param {string} componentName Name of the component for error messages.
   * @param {?Function} getStack Returns the component stack.
   * @private
   */
  function checkPropTypes$1(typeSpecs, values, location, componentName, getStack) {
    {
      for (var typeSpecName in typeSpecs) {
        if (has$2(typeSpecs, typeSpecName)) {
          var error;
          // Prop type validation may throw. In case they do, we don't want to
          // fail the render phase where it didn't fail before. So we log it.
          // After these have been cleaned up, we'll let them throw.
          try {
            // This is intentionally an invariant that gets caught. It's the same
            // behavior as without this statement except with a better message.
            if (typeof typeSpecs[typeSpecName] !== 'function') {
              var err = Error(
                (componentName || 'React class') +
                  ': ' +
                  location +
                  ' type `' +
                  typeSpecName +
                  '` is invalid; ' +
                  'it must be a function, usually from the `prop-types` package, but received `' +
                  typeof typeSpecs[typeSpecName] +
                  '`.',
              );
              err.name = 'Invariant Violation';
              throw err;
            }
            error = typeSpecs[typeSpecName](
              values,
              typeSpecName,
              componentName,
              location,
              null,
              ReactPropTypesSecret$1,
            );
          } catch (ex) {
            error = ex;
          }
          if (error && !(error instanceof Error)) {
            printWarning$1(
              (componentName || 'React class') +
                ': type specification of ' +
                location +
                ' `' +
                typeSpecName +
                '` is invalid; the type checker ' +
                'function must return `null` or an `Error` but returned a ' +
                typeof error +
                '. ' +
                'You may have forgotten to pass an argument to the type checker ' +
                'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
                'shape all require an argument).',
            );
          }
          if (error instanceof Error && !(error.message in loggedTypeFailures)) {
            // Only monitor this failure once because there tends to be a lot of the
            // same error.
            loggedTypeFailures[error.message] = true;

            var stack = getStack ? getStack() : '';

            printWarning$1('Failed ' + location + ' type: ' + error.message + (stack != null ? stack : ''));
          }
        }
      }
    }
  }

  /**
   * Resets warning cache when testing.
   *
   * @private
   */
  checkPropTypes$1.resetWarningCache = function () {
    {
      loggedTypeFailures = {};
    }
  };

  var checkPropTypes_1 = checkPropTypes$1;

  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  var ReactIs$1 = reactIs$1.exports;
  var assign = objectAssign;

  var ReactPropTypesSecret = ReactPropTypesSecret_1;
  var checkPropTypes = checkPropTypes_1;

  var has$1 = Function.call.bind(Object.prototype.hasOwnProperty);
  var printWarning = function () {};

  {
    printWarning = function (text) {
      var message = 'Warning: ' + text;
      if (typeof console !== 'undefined') {
        console.error(message);
      }
      try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
      } catch (x) {}
    };
  }

  function emptyFunctionThatReturnsNull() {
    return null;
  }

  var factoryWithTypeCheckers = function (isValidElement, throwOnDirectAccess) {
    /* global Symbol */
    var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

    /**
     * Returns the iterator method function contained on the iterable object.
     *
     * Be sure to invoke the function with the iterable as context:
     *
     *     var iteratorFn = getIteratorFn(myIterable);
     *     if (iteratorFn) {
     *       var iterator = iteratorFn.call(myIterable);
     *       ...
     *     }
     *
     * @param {?object} maybeIterable
     * @return {?function}
     */
    function getIteratorFn(maybeIterable) {
      var iteratorFn =
        maybeIterable && ((ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL]) || maybeIterable[FAUX_ITERATOR_SYMBOL]);
      if (typeof iteratorFn === 'function') {
        return iteratorFn;
      }
    }

    /**
     * Collection of methods that allow declaration and validation of props that are
     * supplied to React components. Example usage:
     *
     *   var Props = require('ReactPropTypes');
     *   var MyArticle = React.createClass({
     *     propTypes: {
     *       // An optional string prop named "description".
     *       description: Props.string,
     *
     *       // A required enum prop named "category".
     *       category: Props.oneOf(['News','Photos']).isRequired,
     *
     *       // A prop named "dialog" that requires an instance of Dialog.
     *       dialog: Props.instanceOf(Dialog).isRequired
     *     },
     *     render: function() { ... }
     *   });
     *
     * A more formal specification of how these methods are used:
     *
     *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
     *   decl := ReactPropTypes.{type}(.isRequired)?
     *
     * Each and every declaration produces a function with the same signature. This
     * allows the creation of custom validation functions. For example:
     *
     *  var MyLink = React.createClass({
     *    propTypes: {
     *      // An optional string or URI prop named "href".
     *      href: function(props, propName, componentName) {
     *        var propValue = props[propName];
     *        if (propValue != null && typeof propValue !== 'string' &&
     *            !(propValue instanceof URI)) {
     *          return new Error(
     *            'Expected a string or an URI for ' + propName + ' in ' +
     *            componentName
     *          );
     *        }
     *      }
     *    },
     *    render: function() {...}
     *  });
     *
     * @internal
     */

    var ANONYMOUS = '<<anonymous>>';

    // Important!
    // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
    var ReactPropTypes = {
      array: createPrimitiveTypeChecker('array'),
      bool: createPrimitiveTypeChecker('boolean'),
      func: createPrimitiveTypeChecker('function'),
      number: createPrimitiveTypeChecker('number'),
      object: createPrimitiveTypeChecker('object'),
      string: createPrimitiveTypeChecker('string'),
      symbol: createPrimitiveTypeChecker('symbol'),

      any: createAnyTypeChecker(),
      arrayOf: createArrayOfTypeChecker,
      element: createElementTypeChecker(),
      elementType: createElementTypeTypeChecker(),
      instanceOf: createInstanceTypeChecker,
      node: createNodeChecker(),
      objectOf: createObjectOfTypeChecker,
      oneOf: createEnumTypeChecker,
      oneOfType: createUnionTypeChecker,
      shape: createShapeTypeChecker,
      exact: createStrictShapeTypeChecker,
    };

    /**
     * inlined Object.is polyfill to avoid requiring consumers ship their own
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
     */
    /*eslint-disable no-self-compare*/
    function is(x, y) {
      // SameValue algorithm
      if (x === y) {
        // Steps 1-5, 7-10
        // Steps 6.b-6.e: +0 != -0
        return x !== 0 || 1 / x === 1 / y;
      } else {
        // Step 6.a: NaN == NaN
        return x !== x && y !== y;
      }
    }
    /*eslint-enable no-self-compare*/

    /**
     * We use an Error-like object for backward compatibility as people may call
     * PropTypes directly and inspect their output. However, we don't use real
     * Errors anymore. We don't inspect their stack anyway, and creating them
     * is prohibitively expensive if they are created too often, such as what
     * happens in oneOfType() for any type before the one that matched.
     */
    function PropTypeError(message) {
      this.message = message;
      this.stack = '';
    }
    // Make `instanceof Error` still work for returned errors.
    PropTypeError.prototype = Error.prototype;

    function createChainableTypeChecker(validate) {
      {
        var manualPropTypeCallCache = {};
        var manualPropTypeWarningCount = 0;
      }
      function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
        componentName = componentName || ANONYMOUS;
        propFullName = propFullName || propName;

        if (secret !== ReactPropTypesSecret) {
          if (throwOnDirectAccess) {
            // New behavior only for users of `prop-types` package
            var err = new Error(
              'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
                'Use `PropTypes.checkPropTypes()` to call them. ' +
                'Read more at http://fb.me/use-check-prop-types',
            );
            err.name = 'Invariant Violation';
            throw err;
          } else if (typeof console !== 'undefined') {
            // Old behavior for people using React.PropTypes
            var cacheKey = componentName + ':' + propName;
            if (
              !manualPropTypeCallCache[cacheKey] &&
              // Avoid spamming the console because they are often not actionable except for lib authors
              manualPropTypeWarningCount < 3
            ) {
              printWarning(
                'You are manually calling a React.PropTypes validation ' +
                  'function for the `' +
                  propFullName +
                  '` prop on `' +
                  componentName +
                  '`. This is deprecated ' +
                  'and will throw in the standalone `prop-types` package. ' +
                  'You may be seeing this warning due to a third-party PropTypes ' +
                  'library. See https://fb.me/react-warning-dont-call-proptypes ' +
                  'for details.',
              );
              manualPropTypeCallCache[cacheKey] = true;
              manualPropTypeWarningCount++;
            }
          }
        }
        if (props[propName] == null) {
          if (isRequired) {
            if (props[propName] === null) {
              return new PropTypeError(
                'The ' +
                  location +
                  ' `' +
                  propFullName +
                  '` is marked as required ' +
                  ('in `' + componentName + '`, but its value is `null`.'),
              );
            }
            return new PropTypeError(
              'The ' +
                location +
                ' `' +
                propFullName +
                '` is marked as required in ' +
                ('`' + componentName + '`, but its value is `undefined`.'),
            );
          }
          return null;
        } else {
          return validate(props, propName, componentName, location, propFullName);
        }
      }

      var chainedCheckType = checkType.bind(null, false);
      chainedCheckType.isRequired = checkType.bind(null, true);

      return chainedCheckType;
    }

    function createPrimitiveTypeChecker(expectedType) {
      function validate(props, propName, componentName, location, propFullName, secret) {
        var propValue = props[propName];
        var propType = getPropType(propValue);
        if (propType !== expectedType) {
          // `propValue` being instance of, say, date/regexp, pass the 'object'
          // check, but we can offer a more precise error message here rather than
          // 'of type `object`'.
          var preciseType = getPreciseType(propValue);

          return new PropTypeError(
            'Invalid ' +
              location +
              ' `' +
              propFullName +
              '` of type ' +
              ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') +
              ('`' + expectedType + '`.'),
          );
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }

    function createAnyTypeChecker() {
      return createChainableTypeChecker(emptyFunctionThatReturnsNull);
    }

    function createArrayOfTypeChecker(typeChecker) {
      function validate(props, propName, componentName, location, propFullName) {
        if (typeof typeChecker !== 'function') {
          return new PropTypeError(
            'Property `' +
              propFullName +
              '` of component `' +
              componentName +
              '` has invalid PropType notation inside arrayOf.',
          );
        }
        var propValue = props[propName];
        if (!Array.isArray(propValue)) {
          var propType = getPropType(propValue);
          return new PropTypeError(
            'Invalid ' +
              location +
              ' `' +
              propFullName +
              '` of type ' +
              ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'),
          );
        }
        for (var i = 0; i < propValue.length; i++) {
          var error = typeChecker(
            propValue,
            i,
            componentName,
            location,
            propFullName + '[' + i + ']',
            ReactPropTypesSecret,
          );
          if (error instanceof Error) {
            return error;
          }
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }

    function createElementTypeChecker() {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        if (!isValidElement(propValue)) {
          var propType = getPropType(propValue);
          return new PropTypeError(
            'Invalid ' +
              location +
              ' `' +
              propFullName +
              '` of type ' +
              ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'),
          );
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }

    function createElementTypeTypeChecker() {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        if (!ReactIs$1.isValidElementType(propValue)) {
          var propType = getPropType(propValue);
          return new PropTypeError(
            'Invalid ' +
              location +
              ' `' +
              propFullName +
              '` of type ' +
              ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'),
          );
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }

    function createInstanceTypeChecker(expectedClass) {
      function validate(props, propName, componentName, location, propFullName) {
        if (!(props[propName] instanceof expectedClass)) {
          var expectedClassName = expectedClass.name || ANONYMOUS;
          var actualClassName = getClassName(props[propName]);
          return new PropTypeError(
            'Invalid ' +
              location +
              ' `' +
              propFullName +
              '` of type ' +
              ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') +
              ('instance of `' + expectedClassName + '`.'),
          );
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }

    function createEnumTypeChecker(expectedValues) {
      if (!Array.isArray(expectedValues)) {
        {
          if (arguments.length > 1) {
            printWarning(
              'Invalid arguments supplied to oneOf, expected an array, got ' +
                arguments.length +
                ' arguments. ' +
                'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).',
            );
          } else {
            printWarning('Invalid argument supplied to oneOf, expected an array.');
          }
        }
        return emptyFunctionThatReturnsNull;
      }

      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        for (var i = 0; i < expectedValues.length; i++) {
          if (is(propValue, expectedValues[i])) {
            return null;
          }
        }

        var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
          var type = getPreciseType(value);
          if (type === 'symbol') {
            return String(value);
          }
          return value;
        });
        return new PropTypeError(
          'Invalid ' +
            location +
            ' `' +
            propFullName +
            '` of value `' +
            String(propValue) +
            '` ' +
            ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'),
        );
      }
      return createChainableTypeChecker(validate);
    }

    function createObjectOfTypeChecker(typeChecker) {
      function validate(props, propName, componentName, location, propFullName) {
        if (typeof typeChecker !== 'function') {
          return new PropTypeError(
            'Property `' +
              propFullName +
              '` of component `' +
              componentName +
              '` has invalid PropType notation inside objectOf.',
          );
        }
        var propValue = props[propName];
        var propType = getPropType(propValue);
        if (propType !== 'object') {
          return new PropTypeError(
            'Invalid ' +
              location +
              ' `' +
              propFullName +
              '` of type ' +
              ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'),
          );
        }
        for (var key in propValue) {
          if (has$1(propValue, key)) {
            var error = typeChecker(
              propValue,
              key,
              componentName,
              location,
              propFullName + '.' + key,
              ReactPropTypesSecret,
            );
            if (error instanceof Error) {
              return error;
            }
          }
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }

    function createUnionTypeChecker(arrayOfTypeCheckers) {
      if (!Array.isArray(arrayOfTypeCheckers)) {
        printWarning('Invalid argument supplied to oneOfType, expected an instance of array.');
        return emptyFunctionThatReturnsNull;
      }

      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (typeof checker !== 'function') {
          printWarning(
            'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
              'received ' +
              getPostfixForTypeWarning(checker) +
              ' at index ' +
              i +
              '.',
          );
          return emptyFunctionThatReturnsNull;
        }
      }

      function validate(props, propName, componentName, location, propFullName) {
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];
          if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
            return null;
          }
        }

        return new PropTypeError(
          'Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'),
        );
      }
      return createChainableTypeChecker(validate);
    }

    function createNodeChecker() {
      function validate(props, propName, componentName, location, propFullName) {
        if (!isNode(props[propName])) {
          return new PropTypeError(
            'Invalid ' +
              location +
              ' `' +
              propFullName +
              '` supplied to ' +
              ('`' + componentName + '`, expected a ReactNode.'),
          );
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }

    function createShapeTypeChecker(shapeTypes) {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        var propType = getPropType(propValue);
        if (propType !== 'object') {
          return new PropTypeError(
            'Invalid ' +
              location +
              ' `' +
              propFullName +
              '` of type `' +
              propType +
              '` ' +
              ('supplied to `' + componentName + '`, expected `object`.'),
          );
        }
        for (var key in shapeTypes) {
          var checker = shapeTypes[key];
          if (!checker) {
            continue;
          }
          var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
          if (error) {
            return error;
          }
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }

    function createStrictShapeTypeChecker(shapeTypes) {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        var propType = getPropType(propValue);
        if (propType !== 'object') {
          return new PropTypeError(
            'Invalid ' +
              location +
              ' `' +
              propFullName +
              '` of type `' +
              propType +
              '` ' +
              ('supplied to `' + componentName + '`, expected `object`.'),
          );
        }
        // We need to check all keys in case some are required but missing from
        // props.
        var allKeys = assign({}, props[propName], shapeTypes);
        for (var key in allKeys) {
          var checker = shapeTypes[key];
          if (!checker) {
            return new PropTypeError(
              'Invalid ' +
                location +
                ' `' +
                propFullName +
                '` key `' +
                key +
                '` supplied to `' +
                componentName +
                '`.' +
                '\nBad object: ' +
                JSON.stringify(props[propName], null, '  ') +
                '\nValid keys: ' +
                JSON.stringify(Object.keys(shapeTypes), null, '  '),
            );
          }
          var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
          if (error) {
            return error;
          }
        }
        return null;
      }

      return createChainableTypeChecker(validate);
    }

    function isNode(propValue) {
      switch (typeof propValue) {
        case 'number':
        case 'string':
        case 'undefined':
          return true;
        case 'boolean':
          return !propValue;
        case 'object':
          if (Array.isArray(propValue)) {
            return propValue.every(isNode);
          }
          if (propValue === null || isValidElement(propValue)) {
            return true;
          }

          var iteratorFn = getIteratorFn(propValue);
          if (iteratorFn) {
            var iterator = iteratorFn.call(propValue);
            var step;
            if (iteratorFn !== propValue.entries) {
              while (!(step = iterator.next()).done) {
                if (!isNode(step.value)) {
                  return false;
                }
              }
            } else {
              // Iterator will provide entry [k,v] tuples rather than values.
              while (!(step = iterator.next()).done) {
                var entry = step.value;
                if (entry) {
                  if (!isNode(entry[1])) {
                    return false;
                  }
                }
              }
            }
          } else {
            return false;
          }

          return true;
        default:
          return false;
      }
    }

    function isSymbol(propType, propValue) {
      // Native Symbol.
      if (propType === 'symbol') {
        return true;
      }

      // falsy value can't be a Symbol
      if (!propValue) {
        return false;
      }

      // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
      if (propValue['@@toStringTag'] === 'Symbol') {
        return true;
      }

      // Fallback for non-spec compliant Symbols which are polyfilled.
      if (typeof Symbol === 'function' && propValue instanceof Symbol) {
        return true;
      }

      return false;
    }

    // Equivalent of `typeof` but with special handling for array and regexp.
    function getPropType(propValue) {
      var propType = typeof propValue;
      if (Array.isArray(propValue)) {
        return 'array';
      }
      if (propValue instanceof RegExp) {
        // Old webkits (at least until Android 4.0) return 'function' rather than
        // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
        // passes PropTypes.object.
        return 'object';
      }
      if (isSymbol(propType, propValue)) {
        return 'symbol';
      }
      return propType;
    }

    // This handles more types than `getPropType`. Only used for error messages.
    // See `createPrimitiveTypeChecker`.
    function getPreciseType(propValue) {
      if (typeof propValue === 'undefined' || propValue === null) {
        return '' + propValue;
      }
      var propType = getPropType(propValue);
      if (propType === 'object') {
        if (propValue instanceof Date) {
          return 'date';
        } else if (propValue instanceof RegExp) {
          return 'regexp';
        }
      }
      return propType;
    }

    // Returns a string that is postfixed to a warning about an invalid type.
    // For example, "undefined" or "of type array"
    function getPostfixForTypeWarning(value) {
      var type = getPreciseType(value);
      switch (type) {
        case 'array':
        case 'object':
          return 'an ' + type;
        case 'boolean':
        case 'date':
        case 'regexp':
          return 'a ' + type;
        default:
          return type;
      }
    }

    // Returns class name of the object, if any.
    function getClassName(propValue) {
      if (!propValue.constructor || !propValue.constructor.name) {
        return ANONYMOUS;
      }
      return propValue.constructor.name;
    }

    ReactPropTypes.checkPropTypes = checkPropTypes;
    ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
    ReactPropTypes.PropTypes = ReactPropTypes;

    return ReactPropTypes;
  };

  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  {
    var ReactIs = reactIs$1.exports;

    // By explicitly using `prop-types` you are opting into new development behavior.
    // http://fb.me/prop-types-in-prod
    var throwOnDirectAccess = true;
    propTypes.exports = factoryWithTypeCheckers(ReactIs.isElement, throwOnDirectAccess);
  }

  var PropTypes$2 = propTypes.exports;

  var classnames = { exports: {} };

  /*!
	  Copyright (c) 2018 Jed Watson.
	  Licensed under the MIT License (MIT), see
	  http://jedwatson.github.io/classnames
	*/

  (function (module) {
    /* global define */

    (function () {
      var hasOwn = {}.hasOwnProperty;

      function classNames() {
        var classes = [];

        for (var i = 0; i < arguments.length; i++) {
          var arg = arguments[i];
          if (!arg) continue;

          var argType = typeof arg;

          if (argType === 'string' || argType === 'number') {
            classes.push(arg);
          } else if (Array.isArray(arg)) {
            if (arg.length) {
              var inner = classNames.apply(null, arg);
              if (inner) {
                classes.push(inner);
              }
            }
          } else if (argType === 'object') {
            if (arg.toString === Object.prototype.toString) {
              for (var key in arg) {
                if (hasOwn.call(arg, key) && arg[key]) {
                  classes.push(key);
                }
              }
            } else {
              classes.push(arg.toString());
            }
          }
        }

        return classes.join(' ');
      }

      if (module.exports) {
        classNames.default = classNames;
        module.exports = classNames;
      } else {
        window.classNames = classNames;
      }
    })();
  })(classnames);

  var cls = classnames.exports;

  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  function componentWillMount() {
    // Call this.constructor.gDSFP to support sub-classes.
    var state = this.constructor.getDerivedStateFromProps(this.props, this.state);
    if (state !== null && state !== undefined) {
      this.setState(state);
    }
  }

  function componentWillReceiveProps(nextProps) {
    // Call this.constructor.gDSFP to support sub-classes.
    // Use the setState() updater to ensure state isn't stale in certain edge cases.
    function updater(prevState) {
      var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);
      return state !== null && state !== undefined ? state : null;
    }
    // Binding "this" is important for shallow renderer support.
    this.setState(updater.bind(this));
  }

  function componentWillUpdate(nextProps, nextState) {
    try {
      var prevProps = this.props;
      var prevState = this.state;
      this.props = nextProps;
      this.state = nextState;
      this.__reactInternalSnapshotFlag = true;
      this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(prevProps, prevState);
    } finally {
      this.props = prevProps;
      this.state = prevState;
    }
  }

  // React may warn about cWM/cWRP/cWU methods being deprecated.
  // Add a flag to suppress these warnings for this special case.
  componentWillMount.__suppressDeprecationWarning = true;
  componentWillReceiveProps.__suppressDeprecationWarning = true;
  componentWillUpdate.__suppressDeprecationWarning = true;

  function polyfill(Component) {
    var prototype = Component.prototype;

    if (!prototype || !prototype.isReactComponent) {
      throw new Error('Can only polyfill class components');
    }

    if (
      typeof Component.getDerivedStateFromProps !== 'function' &&
      typeof prototype.getSnapshotBeforeUpdate !== 'function'
    ) {
      return Component;
    }

    // If new component APIs are defined, "unsafe" lifecycles won't be called.
    // Error if any of these lifecycles are present,
    // Because they would work differently between older and newer (16.3+) versions of React.
    var foundWillMountName = null;
    var foundWillReceivePropsName = null;
    var foundWillUpdateName = null;
    if (typeof prototype.componentWillMount === 'function') {
      foundWillMountName = 'componentWillMount';
    } else if (typeof prototype.UNSAFE_componentWillMount === 'function') {
      foundWillMountName = 'UNSAFE_componentWillMount';
    }
    if (typeof prototype.componentWillReceiveProps === 'function') {
      foundWillReceivePropsName = 'componentWillReceiveProps';
    } else if (typeof prototype.UNSAFE_componentWillReceiveProps === 'function') {
      foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
    }
    if (typeof prototype.componentWillUpdate === 'function') {
      foundWillUpdateName = 'componentWillUpdate';
    } else if (typeof prototype.UNSAFE_componentWillUpdate === 'function') {
      foundWillUpdateName = 'UNSAFE_componentWillUpdate';
    }
    if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
      var componentName = Component.displayName || Component.name;
      var newApiName =
        typeof Component.getDerivedStateFromProps === 'function'
          ? 'getDerivedStateFromProps()'
          : 'getSnapshotBeforeUpdate()';

      throw Error(
        'Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' +
          componentName +
          ' uses ' +
          newApiName +
          ' but also contains the following legacy lifecycles:' +
          (foundWillMountName !== null ? '\n  ' + foundWillMountName : '') +
          (foundWillReceivePropsName !== null ? '\n  ' + foundWillReceivePropsName : '') +
          (foundWillUpdateName !== null ? '\n  ' + foundWillUpdateName : '') +
          '\n\nThe above lifecycles should be removed. Learn more about this warning here:\n' +
          'https://fb.me/react-async-component-lifecycle-hooks',
      );
    }

    // React <= 16.2 does not support static getDerivedStateFromProps.
    // As a workaround, use cWM and cWRP to invoke the new static lifecycle.
    // Newer versions of React will ignore these lifecycles if gDSFP exists.
    if (typeof Component.getDerivedStateFromProps === 'function') {
      prototype.componentWillMount = componentWillMount;
      prototype.componentWillReceiveProps = componentWillReceiveProps;
    }

    // React <= 16.2 does not support getSnapshotBeforeUpdate.
    // As a workaround, use cWU to invoke the new lifecycle.
    // Newer versions of React will ignore that lifecycle if gSBU exists.
    if (typeof prototype.getSnapshotBeforeUpdate === 'function') {
      if (typeof prototype.componentDidUpdate !== 'function') {
        throw new Error(
          'Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype',
        );
      }

      prototype.componentWillUpdate = componentWillUpdate;

      var componentDidUpdate = prototype.componentDidUpdate;

      prototype.componentDidUpdate = function componentDidUpdatePolyfill(prevProps, prevState, maybeSnapshot) {
        // 16.3+ will not execute our will-update method;
        // It will pass a snapshot value to did-update though.
        // Older versions will require our polyfilled will-update value.
        // We need to handle both cases, but can't just check for the presence of "maybeSnapshot",
        // Because for <= 15.x versions this might be a "prevContext" object.
        // We also can't just check "__reactInternalSnapshot",
        // Because get-snapshot might return a falsy value.
        // So check for the explicit __reactInternalSnapshotFlag flag to determine behavior.
        var snapshot = this.__reactInternalSnapshotFlag ? this.__reactInternalSnapshot : maybeSnapshot;

        componentDidUpdate.call(this, prevProps, prevState, snapshot);
      };
    }

    return Component;
  }

  var reactLifecyclesCompat_es = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    polyfill: polyfill,
  });

  /**
   * IE浏览器的渲染引擎版本号
   * 注意：此属性与浏览器版本号不同，IE的渲染引擎版本号是可以通过HTML header或手动设置去更改的
   * @type {Number} 6 ~ 11
   */
  var ieVersion$1 = typeof document !== 'undefined' ? document.documentMode : undefined;

  /**
   * 判断是否是生产环境
   * @type {Boolean}
   */
  var isProduction = function isProduction() {
    var PRODUCTION_ENV = 'production';
    var result = false;
    try {
      if ('development' === PRODUCTION_ENV);
    } catch (err) {
      //
    }

    return result;
  };

  var env$1 = {
    ieVersion: ieVersion$1,
    isProduction: isProduction,
  };

  var _env = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    ieVersion: ieVersion$1,
    isProduction: isProduction,
    default: env$1,
  });

  /* eslint no-console: 0 */

  /**
   * 反对使用某一方法或属性的警告
   * @param  {String} props     过时的属性或方法名
   * @param  {String} instead   替代的属性或方法名
   * @param  {String} component 组件名
   *
   * @example
   * log.deprecated('onBeforeClose', 'beforeClose', 'Dialog');
   * // Warning: onBeforeClose is deprecated at [ Dialog ], use [ beforeClose ] instead of it.
   */
  function deprecated(props, instead, component) {
    /* istanbul ignore else */
    if (!isProduction() && typeof console !== 'undefined' && console.error) {
      return console.error(
        'Warning: [ ' +
          props +
          ' ] is deprecated at [ ' +
          component +
          ' ], ' +
          ('use [ ' + instead + ' ] instead of it.'),
      );
    }
  }

  /**
   * 控制台警告日志
   * @param {String} msg
   * @return {Console<Error> | void}
   */
  function warning$2(msg) {
    /* istanbul ignore else */
    if (!isProduction() && typeof console !== 'undefined' && console.error) {
      return console.error('Warning: ' + msg);
    }
  }

  var _log = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    deprecated: deprecated,
    warning: warning$2,
  });

  /**
   * 获取对象的类型
   * @param  {*} obj
   * @return {String}
   *
   * @example
   * typeOf([]) === 'Array'
   * typeOf() === 'Undefined'
   * typeOf(1) === 'Number'
   */
  function typeOf(obj) {
    return Object.prototype.toString.call(obj).replace(/\[object\s|]/g, '');
  }

  /**
   * 判断是否是数组或类数组对象
   * @param  {*}  obj
   * @return {Boolean}
   *
   * @example
   * isArrayLike([]) === true
   * isArrayLike(arguments) === true
   * isArrayLike(this.props.children) === true
   */
  function isArrayLike(obj) {
    var length = !!obj && 'length' in obj && obj.length;
    var type = typeOf(obj);

    return type === 'Array' || length === 0 || (typeof length === 'number' && length > 0 && length - 1 in obj);
  }

  /**
   * 判断对象是否是一个promise，即是否可以用.then
   * @param  {*}  obj
   * @return {Boolean}
   */
  function isPromise(obj) {
    return (
      !!obj &&
      ((typeof obj === 'undefined' ? 'undefined' : _default$4(obj)) === 'object' || typeof obj === 'function') &&
      typeof obj.then === 'function'
    );
  }

  /**
   * 是否是一个纯净的对象
   * @param  {*}  obj
   * @return {Boolean}
   * @reference https://github.com/jonschlinkert/is-plain-object
   */
  function isPlainObject$2(obj) {
    if (typeOf(obj) !== 'Object') {
      return false;
    }

    var ctor = obj.constructor;

    if (typeof ctor !== 'function') {
      return false;
    }

    var prot = ctor.prototype;

    if (typeOf(prot) !== 'Object') {
      return false;
    }

    if (!prot.hasOwnProperty('isPrototypeOf')) {
      return false;
    }

    return true;
  }

  /**
   * 对象浅比较
   * @param  {Object} objA
   * @param  {Object} objB
   * @param  {Function}  [compare] 手动调用方法比较
   * @return {Boolean}      对象浅比较是否相等
   *
   * @example
   * object.shallowEqual({a: 100}, {a: 100}); // true
   */
  function shallowEqual$1(objA, objB, compare) {
    if (objA === objB) {
      return true;
    }

    // 其中一个不是object，则不相等
    if (
      !objA ||
      !objB ||
      (typeof objA === 'undefined' ? 'undefined' : _default$4(objA)) +
        (typeof objB === 'undefined' ? 'undefined' : _default$4(objB)) !==
        'objectobject'
    ) {
      return false;
    }

    var keyA = Object.keys(objA);
    var keyB = Object.keys(objB);
    var len = keyA.length;

    // key 数量不一致则不相等
    if (len !== keyB.length) {
      return false;
    }

    var hasCallback = typeof compare === 'function';

    for (var i = 0; i < len; i++) {
      var key = keyA[i];

      if (!Object.prototype.hasOwnProperty.call(objB, key)) {
        return false;
      }

      var valA = objA[key];
      var valB = objB[key];

      var ret = hasCallback ? compare(valA, valB, key) : void 0;

      if (ret === false || (ret === void 0 && valA !== valB)) {
        return false;
      }
    }

    return true;
  }

  /**
   * 遍历对象或数组，或者类数组，例如React中的children对象、arguments等
   * @param  {Object|Array}   obj
   * @param  {Function} callback fn(n, i) or fn(val, key)
   * @param  {Number}   [direction = 1] 是否倒序遍历，只对数组有效
   * @return {Object|Array}
   *
   * @example
   * // 遍历数组
   * object.each([100, 200, 300], (n, i) => console.log(n, i));
   * // 遍历json对象
   * object.each({a: 100, b: 200}, (value, key) => console.log(key, value));
   * // 遍历React子节点
   * object.each(this.props.children, (child, index) => console.log(child));
   * // 遍历arguments
   * object.each(arguments, (arg, i) => console.log(arg));
   */
  function each$1(obj, callback, direction) {
    var reversed = direction === -1;
    var length = obj.length;
    var value = void 0,
      i = reversed ? length - 1 : 0;

    if (isArrayLike(obj)) {
      for (; i < length && i >= 0; reversed ? i-- : i++) {
        value = callback.call(obj[i], obj[i], i);

        if (value === false) {
          break;
        }
      }
    } else {
      for (i in obj) {
        /* istanbul ignore else */
        if (obj.hasOwnProperty(i)) {
          value = callback.call(obj[i], obj[i], i);

          if (value === false) {
            break;
          }
        }
      }
    }

    return obj;
  }

  // @private 判断key是否在数组或对象中
  var _isInObj = function _isInObj(key, obj, isArray) {
    return isArray ? obj.indexOf(key) > -1 : key in obj;
  };

  /**
   * 过滤出其它属性
   * @param  {Object|Array} holdProps 过滤的参照对象，最终的结果只保留不在参照对象中的key
   * @param  {Object} props     被过滤的对象
   * @return {Object}           others
   *
   * @example
   * object.pickOthers(FooComponent.propTypes, this.props);
   * object.pickOthers(['className', 'onChange'], this.props);
   */
  function pickOthers$1(holdProps, props) {
    var others = {};
    var isArray = typeOf(holdProps) === 'Array';

    for (var key in props) {
      if (!_isInObj(key, holdProps, isArray)) {
        others[key] = props[key];
      }
    }

    return others;
  }

  /**
   * 过滤出需要的属性
   * @param  {Object|Array} holdProps 过滤的参照对象，最终的结果只保留在参照对象中的key
   * @param  {Object} props     被过滤的对象
   * @return {Object}           others
   *
   * @example
   * object.pickProps(FooComponent.propTypes, this.props);
   * object.pickProps(['className', 'onChange'], this.props);
   */
  function pickProps(holdProps, props) {
    var others = {};
    var isArray = typeOf(holdProps) === 'Array';

    for (var key in props) {
      if (_isInObj(key, holdProps, isArray)) {
        others[key] = props[key];
      }
    }

    return others;
  }

  /**
   * 过滤出带prefix的属性
   * @param  {Object} holdProps 过滤的参照对象，最终的结果只保留不在参照对象中的key
   * @param  {string} prefix    包含的字符串
   * @return {Object}           others
   *
   * @example
   * object.pickAttrsWith(FooComponent.propTypes, 'data-');
   */
  function pickAttrsWith(holdProps, prefix) {
    var others = {};

    for (var key in holdProps) {
      if (key.match(prefix)) {
        others[key] = holdProps[key];
      }
    }

    return others;
  }

  /**
   * Checks if value is `null` or `undefined`.
   * @param {*} value
   * @return {Boolean}
   */
  function isNil(value) {
    // It will returns `true` only if `null` or `undefined` compare with `null`
    // with loose equaliy
    return value == null; // eslint-disable-line eqeqeq
  }

  /**
   * Deep merge two objects.
   * @param target
   * @param ...sources
   * @reference https://stackoverflow.com/questions/27936772/how-to-deep-merge-instead-of-shallow-merge?page=1&tab=votes#tab-top
   */
  function deepMerge(target) {
    for (var _len = arguments.length, sources = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      sources[_key - 1] = arguments[_key];
    }

    if (!sources.length) return target;
    var source = sources.shift();

    if (!isPlainObject$2(target)) {
      target = {};
    }

    if (isPlainObject$2(target) && isPlainObject$2(source)) {
      for (var key in source) {
        // 如果是object 进行深拷贝
        if (isPlainObject$2(source[key]) && !React__default['default'].isValidElement(source[key])) {
          var _extends2;

          if (!target[key]) _default$6(target, ((_extends2 = {}), (_extends2[key] = {}), _extends2));
          // fix {a: 'te'}, {a:{b:3}}
          if (!isPlainObject$2(target[key])) {
            target[key] = source[key];
          }
          deepMerge(target[key], source[key]);
          // string/number/function/react node 等直接复制
        } else {
          var _extends3;

          _default$6(target, ((_extends3 = {}), (_extends3[key] = source[key]), _extends3));
        }
      }
    }

    return deepMerge.apply(undefined, [target].concat(sources));
  }

  /**
   * 组件是否为 Fucntion Component
   * @param {*} component 传入的组件
   */
  function isFunctionComponent(component) {
    return (
      typeOf(component) === 'Function' && component.prototype && component.prototype.isReactComponent === undefined
    );
  }

  /**
   * 组件是否为 Class Component
   * @param {*} component  传入的组件
   */
  function isClassComponent(component) {
    return (
      typeOf(component) === 'Function' && component.prototype && component.prototype.isReactComponent !== undefined
    );
  }

  /**
   * 判断是否为 ReactFragment
   * @param {*} component  传入的组件
   */
  function isReactFragment(component) {
    if (isNil(component)) {
      return false;
    }

    if (component.type) {
      return component.type === React__default['default'].Fragment;
    }
    return component === React__default['default'].Fragment;
  }

  var _object = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    typeOf: typeOf,
    isArrayLike: isArrayLike,
    isPromise: isPromise,
    isPlainObject: isPlainObject$2,
    shallowEqual: shallowEqual$1,
    each: each$1,
    pickOthers: pickOthers$1,
    pickProps: pickProps,
    pickAttrsWith: pickAttrsWith,
    isNil: isNil,
    deepMerge: deepMerge,
    isFunctionComponent: isFunctionComponent,
    isClassComponent: isClassComponent,
    isReactFragment: isReactFragment,
  });

  /**
   * 将字符串转化为驼峰式写法
   * @param  {String} str 例：-webkit-transition
   * @return {String}     例：WebkitTransition
   */
  function camelcase(str) {
    if (!/-/.test(str)) {
      return str || '';
    }
    return str.toLowerCase().replace(/-([a-z])/g, function ($0, $1) {
      return $1.toUpperCase();
    });
  }

  /**
   * 将驼峰式字符串转化为连字符写法
   * @param  {String} str 例：WebkitTransition
   * @return {String}     例：-webkit-transition
   */
  function hyphenate(str) {
    var strType = typeOf(str);
    if (strType !== 'String') {
      warning$2(
        '[ hyphenate(str: string): string ] ' +
          ('Expected arguments[0] to be a string but get a ' + strType + '.') +
          'It will return an empty string without any processing.',
      );
      return '';
    }
    return str.replace(/([A-Z])/g, function ($0) {
      return '-' + $0.toLowerCase();
    });
  }

  /**
   * 是否能使用 DOM 方法
   * @type {Boolean}
   */
  var hasDOM = typeof window !== 'undefined' && !!window.document && !!document.createElement;

  /**
   * 节点是否包含指定 className
   * @param  {Element}  node
   * @param  {String}  className
   * @return {Boolean}
   *
   * @example
   * dom.hasClass(document.body, 'foo');
   */
  function hasClass$1(node, className) {
    /* istanbul ignore if */
    if (!hasDOM || !node) {
      return false;
    }

    if (node.classList) {
      return node.classList.contains(className);
    } else {
      return node.className.indexOf(className) > -1;
    }
  }

  /**
   * 添加 className
   * @param {Element} node
   * @param {String} className
   *
   * @example
   * dom.addClass(document.body, 'foo');
   */
  function addClass$2(node, className, _force) {
    /* istanbul ignore if */
    if (!hasDOM || !node) {
      return;
    }

    if (node.classList) {
      node.classList.add(className);
    } else if (_force === true || !hasClass$1(node, className)) {
      node.className += ' ' + className;
    }
  }

  /**
   * 移除 className
   * @param  {Element} node
   * @param  {String} className
   *
   * @example
   * dom.removeClass(document.body, 'foo');
   */
  function removeClass$2(node, className, _force) {
    /* istanbul ignore if */
    if (!hasDOM || !node) {
      return;
    }

    if (node.classList) {
      node.classList.remove(className);
    } else if (_force === true || hasClass$1(node, className)) {
      node.className = node.className.replace(className, '').replace(/\s+/g, ' ').trim();
    }
  }

  /**
   * 切换 className
   * @param  {Element} node
   * @param  {String} className
   * @return {Boolean}           执行后节点上是否还有此 className
   *
   * @example
   * dom.toggleClass(document.body, 'foo');
   */
  function toggleClass(node, className) {
    /* istanbul ignore if */
    if (!hasDOM || !node) {
      return false;
    }

    if (node.classList) {
      return node.classList.toggle(className);
    } else {
      var flag = hasClass$1(node, className);
      flag ? removeClass$2(node, className, true) : addClass$2(node, className, true);

      return !flag;
    }
  }

  /**
   * 元素是否匹配 CSS 选择器
   * @param  {Element} node       DOM 节点
   * @param  {String}  selector   CSS 选择器
   * @return {Boolean}
   *
   * @example
   * dom.matches(mountNode, '.container'); // boolean
   */
  var matches = (function () {
    var matchesFn = null;
    /* istanbul ignore else */
    if (hasDOM) {
      var _body = document.body || document.head;
      matchesFn = _body.matches
        ? 'matches'
        : _body.webkitMatchesSelector
        ? 'webkitMatchesSelector'
        : _body.msMatchesSelector
        ? 'msMatchesSelector'
        : _body.mozMatchesSelector
        ? 'mozMatchesSelector'
        : null;
    }

    return function (node, selector) {
      if (!hasDOM || !node) {
        return false;
      }

      return matchesFn ? node[matchesFn](selector) : false;
    };
  })();

  /**
   * 获取元素计算后的样式
   * @private
   * @param  {Element} node
   * @return {Object}
   */
  function _getComputedStyle(node) {
    return node && node.nodeType === 1 ? window.getComputedStyle(node, null) : {};
  }

  var PIXEL_PATTERN = /margin|padding|width|height|max|min|offset|size|top/i;
  var removePixel = { left: 1, top: 1, right: 1, bottom: 1 };

  /**
   * 校验并修正元素的样式属性值
   * @private
   * @param  {Element} node
   * @param  {String} type
   * @param  {Number} value
   */
  function _getStyleValue(node, type, value) {
    type = type.toLowerCase();

    if (value === 'auto') {
      if (type === 'height') {
        return node.offsetHeight || 0;
      }
      if (type === 'width') {
        return node.offsetWidth || 0;
      }
    }

    if (!(type in removePixel)) {
      // 属性值是否需要去掉 px 单位，这里假定此类的属性值都是 px 为单位的
      removePixel[type] = PIXEL_PATTERN.test(type);
    }

    return removePixel[type] ? parseFloat(value) || 0 : value;
  }

  var floatMap = { cssFloat: 1, styleFloat: 1, float: 1 };

  /**
   * 获取元素计算后的样式
   * @param  {Element} node DOM 节点
   * @param  {String} name 属性名
   * @return {Number|Object}
   */
  function getStyle$3(node, name) {
    /* istanbul ignore if */
    if (!hasDOM || !node) {
      return null;
    }

    var style = _getComputedStyle(node);

    // 如果不指定属性名，则返回全部值
    if (arguments.length === 1) {
      return style;
    }

    name = floatMap[name] ? ('cssFloat' in node.style ? 'cssFloat' : 'styleFloat') : name;

    return _getStyleValue(node, name, style.getPropertyValue(hyphenate(name)) || node.style[camelcase(name)]);
  }

  /**
   * 设置元素的样式
   * @param {Element} node  DOM 节点
   * @param {Object|String} name  属性名，或者是一个对象，包含多个属性
   * @param {Number|String} value 属性值
   *
   * @example
   * // 设置单个属性值
   * dom.setStyle(mountNode, 'width', 100);
   * // 设置多条属性值
   * dom.setStyle(mountNode, {
   *     width: 100,
   *     height: 200
   * });
   */
  function setStyle(node, name, value) {
    /* istanbul ignore if */
    if (!hasDOM || !node) {
      return false;
    }

    // 批量设置多个值
    if ((typeof name === 'undefined' ? 'undefined' : _default$4(name)) === 'object' && arguments.length === 2) {
      each$1(name, function (val, key) {
        return setStyle(node, key, val);
      });
    } else {
      name = floatMap[name] ? ('cssFloat' in node.style ? 'cssFloat' : 'styleFloat') : name;
      if (typeof value === 'number' && PIXEL_PATTERN.test(name)) {
        value = value + 'px';
      }
      node.style[camelcase(name)] = value; // IE8 support
    }
  }

  /**
   * 获取默认的滚动条大小
   * @return {Object} width, height
   */
  function scrollbar() {
    var scrollDiv = document.createElement('div');
    scrollDiv.className += 'just-to-get-scrollbar-size';

    setStyle(scrollDiv, {
      position: 'absolute',
      width: '100px',
      height: '100px',
      overflow: 'scroll',
      top: '-9999px',
    });
    document.body && document.body.appendChild(scrollDiv);
    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
    var scrollbarHeight = scrollDiv.offsetHeight - scrollDiv.clientHeight;
    document.body.removeChild(scrollDiv);

    return {
      width: scrollbarWidth,
      height: scrollbarHeight,
    };
  }

  /**
   * 获取元素距离视口顶部和左边的偏移距离
   * @return {Object} top, left
   */
  function getOffset(node) {
    var rect = node.getBoundingClientRect();
    var win = node.ownerDocument.defaultView;
    return {
      top: rect.top + win.pageYOffset,
      left: rect.left + win.pageXOffset,
    };
  }

  /**
   * 获取不同单位转为 number 的长度
   * @param {string|number} len 传入的长度
   * @return {number} pixels
   */
  function getPixels(len) {
    var win = document.defaultView;
    if (typeof +len === 'number' && !isNaN(+len)) {
      return +len;
    }

    if (typeof len === 'string') {
      var PX_REG = /(\d+)px/;
      var VH_REG = /(\d+)vh/;
      if (Array.isArray(len.match(PX_REG))) {
        return +len.match(PX_REG)[1] || 0;
      }

      if (Array.isArray(len.match(VH_REG))) {
        var _1vh = win.innerHeight / 100;
        return +(len.match(VH_REG)[1] * _1vh) || 0;
      }
    }

    return 0;
  }

  /**
   * 匹配特定选择器且离当前元素最近的祖先元素（也可以是当前元素本身），如果匹配不到，则返回 null
   * @param {element} dom 待匹配的元素
   * @param {string} selecotr 选择器
   * @return {element} parent
   */
  function getClosest(dom, selector) {
    /* istanbul ignore if */
    if (!hasDOM || !dom) {
      return null;
    }

    // ie9
    /* istanbul ignore if */
    if (!Element.prototype.closest) {
      if (!document.documentElement.contains(dom)) return null;
      do {
        if (getMatches(dom, selector)) return dom;
        dom = dom.parentElement;
      } while (dom !== null);
    } else {
      return dom.closest(selector);
    }
    return null;
  }

  /**
   * 如果元素被指定的选择器字符串选择，getMatches()  方法返回true; 否则返回false
   * @param {element} dom 待匹配的元素
   * @param {string} selecotr 选择器
   * @return {element} parent
   */
  function getMatches(dom, selector) {
    /* istanbul ignore if */
    if (!hasDOM || !dom) {
      return null;
    }

    /* istanbul ignore if */
    if (Element.prototype.matches) {
      return dom.matches(selector);
    } else if (Element.prototype.msMatchesSelector) {
      return dom.msMatchesSelector(selector);
    } else if (Element.prototype.webkitMatchesSelector) {
      return dom.webkitMatchesSelector(selector);
    }

    return null;
  }

  var _dom = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    hasDOM: hasDOM,
    hasClass: hasClass$1,
    addClass: addClass$2,
    removeClass: removeClass$2,
    toggleClass: toggleClass,
    matches: matches,
    getStyle: getStyle$3,
    setStyle: setStyle,
    scrollbar: scrollbar,
    getOffset: getOffset,
    getPixels: getPixels,
    getClosest: getClosest,
    getMatches: getMatches,
  });

  /**
   * 取消事件绑定
   * @param  {*}   node       DOM节点或任何可以绑定事件的对象
   * @param  {String}   eventName  事件名
   * @param  {Function} callback   回调方法
   * @param  {Boolean}   [useCapture=false] 是否开启事件捕获优先
   */
  function _off(node, eventName, callback, useCapture) {
    /* istanbul ignore else */
    if (node.removeEventListener) {
      node.removeEventListener(eventName, callback, useCapture || false);
    }
  }

  /**
   * 绑定事件
   * @param  {*}   node       DOM节点或任何可以绑定事件的对象
   * @param  {String}   eventName  事件名
   * @param  {Function} callback   回调方法
   * @param  {Boolean}   useCapture 是否开启事件捕获优先
   * @return {Object}               返回的object中包含一个off方法，用于取消事件监听
   *
   * @example
   * const handler = events.on(document.body, 'click', e => {
   *     // handle click ...
   * });
   * // 取消事件绑定
   * handler.off();
   */
  function on$1(node, eventName, callback, useCapture) {
    /* istanbul ignore else */
    if (node.addEventListener) {
      node.addEventListener(eventName, callback, useCapture || false);
    }

    return {
      off: function off() {
        return _off(node, eventName, callback, useCapture);
      },
    };
  }

  /**
   * 绑定事件，只执行一次后销毁
   * @param  {*}   node       DOM节点或任何可以绑定事件的对象
   * @param  {String}   eventName  事件名
   * @param  {Function} callback   回调方法
   * @param  {Boolean}   useCapture 是否开启事件捕获优先
   * @return {Function}             返回的object中包含一个off方法，用于取消事件监听
   */
  function once(node, eventName, callback, useCapture) {
    return on$1(
      node,
      eventName,
      function __fn() {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        callback.apply(this, args);

        // 由于addEventListener中的参数options只在Chrome 55、Firefox(Gecko)以上版本支持，故还是用传统的方法实现once
        _off(node, eventName, __fn, useCapture);
      },
      useCapture,
    );
  }

  var _events = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    off: _off,
    on: on$1,
    once: once,
  });

  /**
   * 一个空方法，返回入参本身或空对象
   */
  var noop$b = function noop() {};

  /**
   * 一个空方法，返回false
   */
  var prevent = function prevent() {
    return false;
  };

  /**
   * 将N个方法合并为一个链式调用的方法
   * @return {Function}     合并后的方法
   * 参考 https://github.com/react-component/util/
   *
   * @example
   * func.makeChain(this.handleChange, this.props.onChange);
   */
  function makeChain$3() {
    for (var _len = arguments.length, fns = Array(_len), _key = 0; _key < _len; _key++) {
      fns[_key] = arguments[_key];
    }

    if (fns.length === 1) {
      return fns[0];
    }

    return function chainedFunction() {
      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      for (var i = 0, j = fns.length; i < j; i++) {
        if (fns[i] && fns[i].apply) {
          fns[i].apply(this, args);
        }
      }
    };
  }

  /**
   * 批量改变方法的上下文
   * 此方法在react组件中很有用，在constructor中批量将组件上的方法执行上下文绑定到组件本身
   * 注意：用bind改变函数运行的上下文只会生效一次
   * @param  {Object} ctx 方法挂载的对象以及执行的上下文
   * @param  {Array<String>} fns 方法名列表
   *
   * @example
   * func.bindCtx(this, ['handleClick', 'handleChange']);
   */
  function bindCtx$5(ctx, fns, ns) {
    if (typeof fns === 'string') {
      fns = [fns];
    }

    // 方法的挂载空间，如果不传，默认与ctx相同
    ns = ns || ctx;

    fns.forEach(function (fnName) {
      // 这里不要添加空方法判断，由调用者保证正确性，否则出了问题无法排查
      ns[fnName] = ns[fnName].bind(ctx);
    });
  }

  /**
   * 用于执行回调方法后的逻辑
   * @param  {*} ret            回调方法执行结果
   * @param  {Function} success 执行结果返回非false的回调
   * @param  {Function} [failure=noop] 执行结果返回false的回调
   */
  function promiseCall(ret, success) {
    var failure = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : noop$b;

    if (isPromise(ret)) {
      return ret
        .then(function (result) {
          success(result);
          return result;
        })
        .catch(function (e) {
          failure(e);
          // throw e;
        });
    }

    return ret !== false ? success(ret) : failure(ret);
  }

  /**
   * 方法调用，如果obj对象中存在名为method的方法则调用该方法
   * @param {Object} target 目标对象
   * @param {string} method 方法名
   * @param {Array} args 函数参数列表
   * @returns {*} 函数返回值 如果不存在返回undefined
   */
  function invoke(target, method, args) {
    var func = target && method in target ? target[method] : undefined;
    return func && func.apply(undefined, args);
  }

  function renderNode(render, defaultRender) {
    var renderProps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

    var r = render !== undefined ? render : defaultRender;

    if (renderProps && !Array.isArray(renderProps)) {
      renderProps = [renderProps];
    }
    return typeof r === 'function' ? r.apply(undefined, renderProps) : r;
  }

  var _func = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    noop: noop$b,
    prevent: prevent,
    makeChain: makeChain$3,
    bindCtx: bindCtx$5,
    promiseCall: promiseCall,
    invoke: invoke,
    renderNode: renderNode,
  });

  var animationEndEventNames = {
    WebkitAnimation: 'webkitAnimationEnd',
    OAnimation: 'oAnimationEnd',
    animation: 'animationend',
  };

  var transitionEventNames = {
    WebkitTransition: 'webkitTransitionEnd',
    OTransition: 'oTransitionEnd',
    transition: 'transitionend',
  };

  /**
   * 是否支持某些动效事件，如果支持，返回相应的end事件名
   * @private
   * @param  {Object<String>} names
   * @return {Object|false}
   */
  function _supportEnd(names) {
    /* istanbul ignore if */
    if (!hasDOM) {
      return false;
    }

    var el = document.createElement('div');
    var ret = false;

    each$1(names, function (val, key) {
      /* istanbul ignore else */
      if (el.style[key] !== undefined) {
        ret = { end: val };
        return false;
      }
    });

    return ret;
  }

  /**
   * 是否支持某些CSS属性
   * @private
   * @param  {Object<Array<String>>} names
   * @return {Boolean}       is support
   */
  function _supportCSS(names) {
    /* istanbul ignore if */
    if (!hasDOM) {
      return false;
    }

    var el = document.createElement('div');
    var ret = false;

    each$1(names, function (val, key) {
      each$1(val, function (item) {
        try {
          el.style[key] = item;
          ret = ret || el.style[key] === item;
        } catch (e) {
          // It will be throw error when set unknown property under IE8
        }
        return !ret; // 如果有一个支持就返回false，后面不需要再判断
      });

      return !ret;
    });

    return ret;
  }

  /**
   * 是否支持animation以及动画结束事件名
   * @type {Object|false}
   * @property {String} end 动画结束事件名
   */
  var animation = _supportEnd(animationEndEventNames);

  /**
   * 是否支持transition以及过滤效果结束事件名
   * @type {Object|false}
   * @property {String} end 过渡效果结束事件名
   */
  var transition = _supportEnd(transitionEventNames);

  /**
   * 是否支持flex属性
   * @type {Boolean}
   */
  var flex = _supportCSS({
    display: ['flex', '-webkit-flex', '-moz-flex', '-ms-flexbox'],
  });

  var _support = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    animation: animation,
    transition: transition,
    flex: flex,
  });

  var _KEYCODE = {
    BACKSPACE: 8,
    TAB: 9,
    ENTER: 13,
    SHIFT: 16,
    CTRL: 17,
    ALT: 18,
    ESC: 27,
    SPACE: 32,
    END: 35,
    HOME: 36,
    LEFT: 37,
    UP: 38,
    RIGHT: 39,
    DOWN: 40,
    PAGE_UP: 33,
    PAGE_DOWN: 34,

    // version 0.x
    ESCAPE: 27,
    LEFT_ARROW: 37,
    UP_ARROW: 38,
    RIGHT_ARROW: 39,
    DOWN_ARROW: 40,

    // MacOS
    CONTROL: 17,
    OPTION: 18,
    CMD: 91,
    COMMAND: 91,
    DELETE: 8,
  };

  /**
   * 用于切换页面元素的焦点
   */

  /**
   * 元素是否可见
   * @private
   * @param   {Element}  node
   * @return  {Boolean}
   */
  function _isVisible(node) {
    while (node) {
      if (node === document.body || node === document.documentElement) {
        break;
      }
      if (node.style.display === 'none' || node.style.visibility === 'hidden') {
        return false;
      }
      node = node.parentNode;
    }
    return true;
  }

  /**
   * 元素是否可以获取焦点
   * @private
   * @param   {Element}  node
   * @return  {Boolean}
   */
  function _isFocusable(node) {
    var nodeName = node.nodeName.toLowerCase();
    var tabIndex = parseInt(node.getAttribute('tabindex'), 10);
    var hasTabIndex = !isNaN(tabIndex) && tabIndex > -1;

    if (_isVisible(node)) {
      if (nodeName === 'input') {
        return !node.disabled && node.type !== 'hidden';
      } else if (['select', 'textarea', 'button'].indexOf(nodeName) > -1) {
        return !node.disabled;
      } else if (nodeName === 'a') {
        return node.getAttribute('href') || hasTabIndex;
      } else {
        return hasTabIndex;
      }
    }
    return false;
  }

  /**
   * 列出能获取焦点的子节点
   * @param  {Element} node 容器节点
   * @return {Array<Element>}
   */
  function getFocusNodeList$1(node) {
    var res = [];
    var nodeList = node.querySelectorAll('*');

    each$1(nodeList, function (item) {
      if (_isFocusable(item)) {
        var method = item.getAttribute('data-auto-focus') ? 'unshift' : 'push';
        res[method](item);
      }
    });

    if (_isFocusable(node)) {
      res.unshift(node);
    }

    return res;
  }

  // 用于记录上一次获得焦点的无素
  var lastFocusElement = null;

  /**
   * 保存最近一次获得焦点的无素
   */
  function saveLastFocusNode$1() {
    lastFocusElement = document.activeElement;
  }

  /**
   * 清除焦点记录
   */
  function clearLastFocusNode() {
    lastFocusElement = null;
  }

  /**
   * 尝试将焦点切换到上一个元素
   */
  function backLastFocusNode$1() {
    if (lastFocusElement) {
      try {
        // 元素可能已经被移动了
        lastFocusElement.focus();
      } catch (e) {
        // ignore ...
      }
    }
  }

  /**
   * 在限制的范围内切换焦点
   * @param  {Element} node 容器节点
   * @param  {Event} e      键盘事件
   */
  function limitTabRange(node, e) {
    if (e.keyCode === _KEYCODE.TAB) {
      var tabNodeList = getFocusNodeList$1(node);
      var maxIndex = tabNodeList.length - 1;
      var index = tabNodeList.indexOf(document.activeElement);

      if (index > -1) {
        var targetIndex = index + (e.shiftKey ? -1 : 1);
        targetIndex < 0 && (targetIndex = maxIndex);
        targetIndex > maxIndex && (targetIndex = 0);
        tabNodeList[targetIndex].focus();
        e.preventDefault();
      }
    }
  }

  var _focus = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    getFocusNodeList: getFocusNodeList$1,
    saveLastFocusNode: saveLastFocusNode$1,
    clearLastFocusNode: clearLastFocusNode,
    backLastFocusNode: backLastFocusNode$1,
    limitTabRange: limitTabRange,
  });

  var timestamp = Date.now();

  /**
   * 生成全局唯一的id
   * @param  {String} [prefix=''] 前缀字符串
   * @return {String}
   *
   * @example
   * guid(); // j7jv509c
   * guid('prefix-'); // prefix-j7jv509d
   */
  function uuid(prefix) {
    prefix = prefix || '';

    return prefix + (timestamp++).toString(36);
  }

  var dayjs_min = { exports: {} };

  (function (module, exports) {
    !(function (t, e) {
      module.exports = e();
    })(commonjsGlobal, function () {
      var t = 1e3,
        e = 6e4,
        n = 36e5,
        r = 'millisecond',
        i = 'second',
        s = 'minute',
        u = 'hour',
        a = 'day',
        o = 'week',
        f = 'month',
        h = 'quarter',
        c = 'year',
        d = 'date',
        $ = 'Invalid Date',
        l = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/,
        y = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,
        M = {
          name: 'en',
          weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
          months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
        },
        m = function (t, e, n) {
          var r = String(t);
          return !r || r.length >= e ? t : '' + Array(e + 1 - r.length).join(n) + t;
        },
        g = {
          s: m,
          z: function (t) {
            var e = -t.utcOffset(),
              n = Math.abs(e),
              r = Math.floor(n / 60),
              i = n % 60;
            return (e <= 0 ? '+' : '-') + m(r, 2, '0') + ':' + m(i, 2, '0');
          },
          m: function t(e, n) {
            if (e.date() < n.date()) return -t(n, e);
            var r = 12 * (n.year() - e.year()) + (n.month() - e.month()),
              i = e.clone().add(r, f),
              s = n - i < 0,
              u = e.clone().add(r + (s ? -1 : 1), f);
            return +(-(r + (n - i) / (s ? i - u : u - i)) || 0);
          },
          a: function (t) {
            return t < 0 ? Math.ceil(t) || 0 : Math.floor(t);
          },
          p: function (t) {
            return (
              { M: f, y: c, w: o, d: a, D: d, h: u, m: s, s: i, ms: r, Q: h }[t] ||
              String(t || '')
                .toLowerCase()
                .replace(/s$/, '')
            );
          },
          u: function (t) {
            return void 0 === t;
          },
        },
        D = 'en',
        v = {};
      v[D] = M;
      var p = function (t) {
          return t instanceof _;
        },
        S = function (t, e, n) {
          var r;
          if (!t) return D;
          if ('string' == typeof t) v[t] && (r = t), e && ((v[t] = e), (r = t));
          else {
            var i = t.name;
            (v[i] = t), (r = i);
          }
          return !n && r && (D = r), r || (!n && D);
        },
        w = function (t, e) {
          if (p(t)) return t.clone();
          var n = 'object' == typeof e ? e : {};
          return (n.date = t), (n.args = arguments), new _(n);
        },
        O = g;
      (O.l = S),
        (O.i = p),
        (O.w = function (t, e) {
          return w(t, { locale: e.$L, utc: e.$u, x: e.$x, $offset: e.$offset });
        });
      var _ = (function () {
          function M(t) {
            (this.$L = S(t.locale, null, !0)), this.parse(t);
          }
          var m = M.prototype;
          return (
            (m.parse = function (t) {
              (this.$d = (function (t) {
                var e = t.date,
                  n = t.utc;
                if (null === e) return new Date(NaN);
                if (O.u(e)) return new Date();
                if (e instanceof Date) return new Date(e);
                if ('string' == typeof e && !/Z$/i.test(e)) {
                  var r = e.match(l);
                  if (r) {
                    var i = r[2] - 1 || 0,
                      s = (r[7] || '0').substring(0, 3);
                    return n
                      ? new Date(Date.UTC(r[1], i, r[3] || 1, r[4] || 0, r[5] || 0, r[6] || 0, s))
                      : new Date(r[1], i, r[3] || 1, r[4] || 0, r[5] || 0, r[6] || 0, s);
                  }
                }
                return new Date(e);
              })(t)),
                (this.$x = t.x || {}),
                this.init();
            }),
            (m.init = function () {
              var t = this.$d;
              (this.$y = t.getFullYear()),
                (this.$M = t.getMonth()),
                (this.$D = t.getDate()),
                (this.$W = t.getDay()),
                (this.$H = t.getHours()),
                (this.$m = t.getMinutes()),
                (this.$s = t.getSeconds()),
                (this.$ms = t.getMilliseconds());
            }),
            (m.$utils = function () {
              return O;
            }),
            (m.isValid = function () {
              return !(this.$d.toString() === $);
            }),
            (m.isSame = function (t, e) {
              var n = w(t);
              return this.startOf(e) <= n && n <= this.endOf(e);
            }),
            (m.isAfter = function (t, e) {
              return w(t) < this.startOf(e);
            }),
            (m.isBefore = function (t, e) {
              return this.endOf(e) < w(t);
            }),
            (m.$g = function (t, e, n) {
              return O.u(t) ? this[e] : this.set(n, t);
            }),
            (m.unix = function () {
              return Math.floor(this.valueOf() / 1e3);
            }),
            (m.valueOf = function () {
              return this.$d.getTime();
            }),
            (m.startOf = function (t, e) {
              var n = this,
                r = !!O.u(e) || e,
                h = O.p(t),
                $ = function (t, e) {
                  var i = O.w(n.$u ? Date.UTC(n.$y, e, t) : new Date(n.$y, e, t), n);
                  return r ? i : i.endOf(a);
                },
                l = function (t, e) {
                  return O.w(n.toDate()[t].apply(n.toDate('s'), (r ? [0, 0, 0, 0] : [23, 59, 59, 999]).slice(e)), n);
                },
                y = this.$W,
                M = this.$M,
                m = this.$D,
                g = 'set' + (this.$u ? 'UTC' : '');
              switch (h) {
                case c:
                  return r ? $(1, 0) : $(31, 11);
                case f:
                  return r ? $(1, M) : $(0, M + 1);
                case o:
                  var D = this.$locale().weekStart || 0,
                    v = (y < D ? y + 7 : y) - D;
                  return $(r ? m - v : m + (6 - v), M);
                case a:
                case d:
                  return l(g + 'Hours', 0);
                case u:
                  return l(g + 'Minutes', 1);
                case s:
                  return l(g + 'Seconds', 2);
                case i:
                  return l(g + 'Milliseconds', 3);
                default:
                  return this.clone();
              }
            }),
            (m.endOf = function (t) {
              return this.startOf(t, !1);
            }),
            (m.$set = function (t, e) {
              var n,
                o = O.p(t),
                h = 'set' + (this.$u ? 'UTC' : ''),
                $ = ((n = {}),
                (n[a] = h + 'Date'),
                (n[d] = h + 'Date'),
                (n[f] = h + 'Month'),
                (n[c] = h + 'FullYear'),
                (n[u] = h + 'Hours'),
                (n[s] = h + 'Minutes'),
                (n[i] = h + 'Seconds'),
                (n[r] = h + 'Milliseconds'),
                n)[o],
                l = o === a ? this.$D + (e - this.$W) : e;
              if (o === f || o === c) {
                var y = this.clone().set(d, 1);
                y.$d[$](l), y.init(), (this.$d = y.set(d, Math.min(this.$D, y.daysInMonth())).$d);
              } else $ && this.$d[$](l);
              return this.init(), this;
            }),
            (m.set = function (t, e) {
              return this.clone().$set(t, e);
            }),
            (m.get = function (t) {
              return this[O.p(t)]();
            }),
            (m.add = function (r, h) {
              var d,
                $ = this;
              r = Number(r);
              var l = O.p(h),
                y = function (t) {
                  var e = w($);
                  return O.w(e.date(e.date() + Math.round(t * r)), $);
                };
              if (l === f) return this.set(f, this.$M + r);
              if (l === c) return this.set(c, this.$y + r);
              if (l === a) return y(1);
              if (l === o) return y(7);
              var M = ((d = {}), (d[s] = e), (d[u] = n), (d[i] = t), d)[l] || 1,
                m = this.$d.getTime() + r * M;
              return O.w(m, this);
            }),
            (m.subtract = function (t, e) {
              return this.add(-1 * t, e);
            }),
            (m.format = function (t) {
              var e = this,
                n = this.$locale();
              if (!this.isValid()) return n.invalidDate || $;
              var r = t || 'YYYY-MM-DDTHH:mm:ssZ',
                i = O.z(this),
                s = this.$H,
                u = this.$m,
                a = this.$M,
                o = n.weekdays,
                f = n.months,
                h = function (t, n, i, s) {
                  return (t && (t[n] || t(e, r))) || i[n].substr(0, s);
                },
                c = function (t) {
                  return O.s(s % 12 || 12, t, '0');
                },
                d =
                  n.meridiem ||
                  function (t, e, n) {
                    var r = t < 12 ? 'AM' : 'PM';
                    return n ? r.toLowerCase() : r;
                  },
                l = {
                  YY: String(this.$y).slice(-2),
                  YYYY: this.$y,
                  M: a + 1,
                  MM: O.s(a + 1, 2, '0'),
                  MMM: h(n.monthsShort, a, f, 3),
                  MMMM: h(f, a),
                  D: this.$D,
                  DD: O.s(this.$D, 2, '0'),
                  d: String(this.$W),
                  dd: h(n.weekdaysMin, this.$W, o, 2),
                  ddd: h(n.weekdaysShort, this.$W, o, 3),
                  dddd: o[this.$W],
                  H: String(s),
                  HH: O.s(s, 2, '0'),
                  h: c(1),
                  hh: c(2),
                  a: d(s, u, !0),
                  A: d(s, u, !1),
                  m: String(u),
                  mm: O.s(u, 2, '0'),
                  s: String(this.$s),
                  ss: O.s(this.$s, 2, '0'),
                  SSS: O.s(this.$ms, 3, '0'),
                  Z: i,
                };
              return r.replace(y, function (t, e) {
                return e || l[t] || i.replace(':', '');
              });
            }),
            (m.utcOffset = function () {
              return 15 * -Math.round(this.$d.getTimezoneOffset() / 15);
            }),
            (m.diff = function (r, d, $) {
              var l,
                y = O.p(d),
                M = w(r),
                m = (M.utcOffset() - this.utcOffset()) * e,
                g = this - M,
                D = O.m(this, M);
              return (
                (D =
                  ((l = {}),
                  (l[c] = D / 12),
                  (l[f] = D),
                  (l[h] = D / 3),
                  (l[o] = (g - m) / 6048e5),
                  (l[a] = (g - m) / 864e5),
                  (l[u] = g / n),
                  (l[s] = g / e),
                  (l[i] = g / t),
                  l)[y] || g),
                $ ? D : O.a(D)
              );
            }),
            (m.daysInMonth = function () {
              return this.endOf(f).$D;
            }),
            (m.$locale = function () {
              return v[this.$L];
            }),
            (m.locale = function (t, e) {
              if (!t) return this.$L;
              var n = this.clone(),
                r = S(t, e, !0);
              return r && (n.$L = r), n;
            }),
            (m.clone = function () {
              return O.w(this.$d, this);
            }),
            (m.toDate = function () {
              return new Date(this.valueOf());
            }),
            (m.toJSON = function () {
              return this.isValid() ? this.toISOString() : null;
            }),
            (m.toISOString = function () {
              return this.$d.toISOString();
            }),
            (m.toString = function () {
              return this.$d.toUTCString();
            }),
            M
          );
        })(),
        b = _.prototype;
      return (
        (w.prototype = b),
        [
          ['$ms', r],
          ['$s', i],
          ['$m', s],
          ['$H', u],
          ['$W', a],
          ['$M', f],
          ['$y', c],
          ['$D', d],
        ].forEach(function (t) {
          b[t[1]] = function (e) {
            return this.$g(e, t[0], t[1]);
          };
        }),
        (w.extend = function (t, e) {
          return t.$i || (t(e, _, w), (t.$i = !0)), w;
        }),
        (w.locale = S),
        (w.isDayjs = p),
        (w.unix = function (t) {
          return w(1e3 * t);
        }),
        (w.en = v[D]),
        (w.Ls = v),
        (w.p = {}),
        w
      );
    });
  })(dayjs_min);

  var dayjs = dayjs_min.exports;

  var customParseFormat$1 = { exports: {} };

  (function (module, exports) {
    !(function (t, e) {
      module.exports = e();
    })(commonjsGlobal, function () {
      var t = {
          LTS: 'h:mm:ss A',
          LT: 'h:mm A',
          L: 'MM/DD/YYYY',
          LL: 'MMMM D, YYYY',
          LLL: 'MMMM D, YYYY h:mm A',
          LLLL: 'dddd, MMMM D, YYYY h:mm A',
        },
        e = /(\[[^[]*\])|([-:/.()\s]+)|(A|a|YYYY|YY?|MM?M?M?|Do|DD?|hh?|HH?|mm?|ss?|S{1,3}|z|ZZ?)/g,
        n = /\d\d/,
        r = /\d\d?/,
        i = /\d*[^\s\d-_:/()]+/,
        o = {},
        s = function (t) {
          return (t = +t) + (t > 68 ? 1900 : 2e3);
        };
      var a = function (t) {
          return function (e) {
            this[t] = +e;
          };
        },
        f = [
          /[+-]\d\d:?(\d\d)?|Z/,
          function (t) {
            (this.zone || (this.zone = {})).offset = (function (t) {
              if (!t) return 0;
              if ('Z' === t) return 0;
              var e = t.match(/([+-]|\d\d)/g),
                n = 60 * e[1] + (+e[2] || 0);
              return 0 === n ? 0 : '+' === e[0] ? -n : n;
            })(t);
          },
        ],
        u = function (t) {
          var e = o[t];
          return e && (e.indexOf ? e : e.s.concat(e.f));
        },
        h = function (t, e) {
          var n,
            r = o.meridiem;
          if (r) {
            for (var i = 1; i <= 24; i += 1)
              if (t.indexOf(r(i, 0, e)) > -1) {
                n = i > 12;
                break;
              }
          } else n = t === (e ? 'pm' : 'PM');
          return n;
        },
        d = {
          A: [
            i,
            function (t) {
              this.afternoon = h(t, !1);
            },
          ],
          a: [
            i,
            function (t) {
              this.afternoon = h(t, !0);
            },
          ],
          S: [
            /\d/,
            function (t) {
              this.milliseconds = 100 * +t;
            },
          ],
          SS: [
            n,
            function (t) {
              this.milliseconds = 10 * +t;
            },
          ],
          SSS: [
            /\d{3}/,
            function (t) {
              this.milliseconds = +t;
            },
          ],
          s: [r, a('seconds')],
          ss: [r, a('seconds')],
          m: [r, a('minutes')],
          mm: [r, a('minutes')],
          H: [r, a('hours')],
          h: [r, a('hours')],
          HH: [r, a('hours')],
          hh: [r, a('hours')],
          D: [r, a('day')],
          DD: [n, a('day')],
          Do: [
            i,
            function (t) {
              var e = o.ordinal,
                n = t.match(/\d+/);
              if (((this.day = n[0]), e))
                for (var r = 1; r <= 31; r += 1) e(r).replace(/\[|\]/g, '') === t && (this.day = r);
            },
          ],
          M: [r, a('month')],
          MM: [n, a('month')],
          MMM: [
            i,
            function (t) {
              var e = u('months'),
                n =
                  (
                    u('monthsShort') ||
                    e.map(function (t) {
                      return t.substr(0, 3);
                    })
                  ).indexOf(t) + 1;
              if (n < 1) throw new Error();
              this.month = n % 12 || n;
            },
          ],
          MMMM: [
            i,
            function (t) {
              var e = u('months').indexOf(t) + 1;
              if (e < 1) throw new Error();
              this.month = e % 12 || e;
            },
          ],
          Y: [/[+-]?\d+/, a('year')],
          YY: [
            n,
            function (t) {
              this.year = s(t);
            },
          ],
          YYYY: [/\d{4}/, a('year')],
          Z: f,
          ZZ: f,
        };
      function c(n) {
        var r, i;
        (r = n), (i = o && o.formats);
        for (
          var s = (n = r.replace(/(\[[^\]]+])|(LTS?|l{1,4}|L{1,4})/g, function (e, n, r) {
              var o = r && r.toUpperCase();
              return (
                n ||
                i[r] ||
                t[r] ||
                i[o].replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g, function (t, e, n) {
                  return e || n.slice(1);
                })
              );
            })).match(e),
            a = s.length,
            f = 0;
          f < a;
          f += 1
        ) {
          var u = s[f],
            h = d[u],
            c = h && h[0],
            l = h && h[1];
          s[f] = l ? { regex: c, parser: l } : u.replace(/^\[|\]$/g, '');
        }
        return function (t) {
          for (var e = {}, n = 0, r = 0; n < a; n += 1) {
            var i = s[n];
            if ('string' == typeof i) r += i.length;
            else {
              var o = i.regex,
                f = i.parser,
                u = t.substr(r),
                h = o.exec(u)[0];
              f.call(e, h), (t = t.replace(h, ''));
            }
          }
          return (
            (function (t) {
              var e = t.afternoon;
              if (void 0 !== e) {
                var n = t.hours;
                e ? n < 12 && (t.hours += 12) : 12 === n && (t.hours = 0), delete t.afternoon;
              }
            })(e),
            e
          );
        };
      }
      return function (t, e, n) {
        (n.p.customParseFormat = !0), t && t.parseTwoDigitYear && (s = t.parseTwoDigitYear);
        var r = e.prototype,
          i = r.parse;
        r.parse = function (t) {
          var e = t.date,
            r = t.utc,
            s = t.args;
          this.$u = r;
          var a = s[1];
          if ('string' == typeof a) {
            var f = !0 === s[2],
              u = !0 === s[3],
              h = f || u,
              d = s[2];
            u && (d = s[2]),
              (o = this.$locale()),
              !f && d && (o = n.Ls[d]),
              (this.$d = (function (t, e, n) {
                try {
                  if (['x', 'X'].indexOf(e) > -1) return new Date(('X' === e ? 1e3 : 1) * t);
                  var r = c(e)(t),
                    i = r.year,
                    o = r.month,
                    s = r.day,
                    a = r.hours,
                    f = r.minutes,
                    u = r.seconds,
                    h = r.milliseconds,
                    d = r.zone,
                    l = new Date(),
                    m = s || (i || o ? 1 : l.getDate()),
                    M = i || l.getFullYear(),
                    Y = 0;
                  (i && !o) || (Y = o > 0 ? o - 1 : l.getMonth());
                  var p = a || 0,
                    v = f || 0,
                    D = u || 0,
                    g = h || 0;
                  return d
                    ? new Date(Date.UTC(M, Y, m, p, v, D, g + 60 * d.offset * 1e3))
                    : n
                    ? new Date(Date.UTC(M, Y, m, p, v, D, g))
                    : new Date(M, Y, m, p, v, D, g);
                } catch (t) {
                  return new Date('');
                }
              })(e, a, r)),
              this.init(),
              d && !0 !== d && (this.$L = this.locale(d).$L),
              h && e != this.format(a) && (this.$d = new Date('')),
              (o = {});
          } else if (a instanceof Array)
            for (var l = a.length, m = 1; m <= l; m += 1) {
              s[1] = a[m - 1];
              var M = n.apply(this, s);
              if (M.isValid()) {
                (this.$d = M.$d), (this.$L = M.$L), this.init();
                break;
              }
              m === l && (this.$d = new Date(''));
            }
          else i.call(this, t);
        };
      };
    });
  })(customParseFormat$1);

  var customParseFormat = customParseFormat$1.exports;

  var updateLocale$1 = { exports: {} };

  (function (module, exports) {
    !(function (e, n) {
      module.exports = n();
    })(commonjsGlobal, function () {
      return function (e, n, t) {
        t.updateLocale = function (e, n) {
          var o = t.Ls[e];
          if (o)
            return (
              (n ? Object.keys(n) : []).forEach(function (e) {
                o[e] = n[e];
              }),
              o
            );
        };
      };
    });
  })(updateLocale$1);

  var updateLocale = updateLocale$1.exports;

  var localeData$1 = { exports: {} };

  (function (module, exports) {
    !(function (n, e) {
      module.exports = e();
    })(commonjsGlobal, function () {
      return function (n, e, t) {
        var r = e.prototype,
          o = function (n) {
            return n && (n.indexOf ? n : n.s);
          },
          u = function (n, e, t, r, u) {
            var i = n.name ? n : n.$locale(),
              a = o(i[e]),
              s = o(i[t]),
              f =
                a ||
                s.map(function (n) {
                  return n.substr(0, r);
                });
            if (!u) return f;
            var d = i.weekStart;
            return f.map(function (n, e) {
              return f[(e + (d || 0)) % 7];
            });
          },
          i = function () {
            return t.Ls[t.locale()];
          },
          a = function (n, e) {
            return (
              n.formats[e] ||
              (function (n) {
                return n.replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g, function (n, e, t) {
                  return e || t.slice(1);
                });
              })(n.formats[e.toUpperCase()])
            );
          },
          s = function () {
            var n = this;
            return {
              months: function (e) {
                return e ? e.format('MMMM') : u(n, 'months');
              },
              monthsShort: function (e) {
                return e ? e.format('MMM') : u(n, 'monthsShort', 'months', 3);
              },
              firstDayOfWeek: function () {
                return n.$locale().weekStart || 0;
              },
              weekdays: function (e) {
                return e ? e.format('dddd') : u(n, 'weekdays');
              },
              weekdaysMin: function (e) {
                return e ? e.format('dd') : u(n, 'weekdaysMin', 'weekdays', 2);
              },
              weekdaysShort: function (e) {
                return e ? e.format('ddd') : u(n, 'weekdaysShort', 'weekdays', 3);
              },
              longDateFormat: function (e) {
                return a(n.$locale(), e);
              },
              meridiem: this.$locale().meridiem,
              ordinal: this.$locale().ordinal,
            };
          };
        (r.localeData = function () {
          return s.bind(this)();
        }),
          (t.localeData = function () {
            var n = i();
            return {
              firstDayOfWeek: function () {
                return n.weekStart || 0;
              },
              weekdays: function () {
                return t.weekdays();
              },
              weekdaysShort: function () {
                return t.weekdaysShort();
              },
              weekdaysMin: function () {
                return t.weekdaysMin();
              },
              months: function () {
                return t.months();
              },
              monthsShort: function () {
                return t.monthsShort();
              },
              longDateFormat: function (e) {
                return a(n, e);
              },
              meridiem: n.meridiem,
              ordinal: n.ordinal,
            };
          }),
          (t.months = function () {
            return u(i(), 'months');
          }),
          (t.monthsShort = function () {
            return u(i(), 'monthsShort', 'months', 3);
          }),
          (t.weekdays = function (n) {
            return u(i(), 'weekdays', null, null, n);
          }),
          (t.weekdaysShort = function (n) {
            return u(i(), 'weekdaysShort', 'weekdays', 3, n);
          }),
          (t.weekdaysMin = function (n) {
            return u(i(), 'weekdaysMin', 'weekdays', 2, n);
          });
      };
    });
  })(localeData$1);

  var localeData = localeData$1.exports;

  var quarterOfYear$1 = { exports: {} };

  (function (module, exports) {
    !(function (t, n) {
      module.exports = n();
    })(commonjsGlobal, function () {
      var t = 'month',
        n = 'quarter';
      return function (e, i) {
        var r = i.prototype;
        r.quarter = function (t) {
          return this.$utils().u(t) ? Math.ceil((this.month() + 1) / 3) : this.month((this.month() % 3) + 3 * (t - 1));
        };
        var s = r.add;
        r.add = function (e, i) {
          return (e = Number(e)), this.$utils().p(i) === n ? this.add(3 * e, t) : s.bind(this)(e, i);
        };
        var u = r.startOf;
        r.startOf = function (e, i) {
          var r = this.$utils(),
            s = !!r.u(i) || i;
          if (r.p(e) === n) {
            var o = this.quarter() - 1;
            return s
              ? this.month(3 * o)
                  .startOf(t)
                  .startOf('day')
              : this.month(3 * o + 2)
                  .endOf(t)
                  .endOf('day');
          }
          return u.bind(this)(e, i);
        };
      };
    });
  })(quarterOfYear$1);

  var quarterOfYear = quarterOfYear$1.exports;

  var advancedFormat$1 = { exports: {} };

  (function (module, exports) {
    !(function (e, t) {
      module.exports = t();
    })(commonjsGlobal, function () {
      return function (e, t, r) {
        var n = t.prototype,
          s = n.format;
        (r.en.ordinal = function (e) {
          var t = ['th', 'st', 'nd', 'rd'],
            r = e % 100;
          return '[' + e + (t[(r - 20) % 10] || t[r] || t[0]) + ']';
        }),
          (n.format = function (e) {
            var t = this,
              r = this.$locale();
            if (!this.isValid()) return s.bind(this)(e);
            var n = this.$utils(),
              a = (e || 'YYYY-MM-DDTHH:mm:ssZ').replace(
                /\[([^\]]+)]|Q|wo|ww|w|WW|W|zzz|z|gggg|GGGG|Do|X|x|k{1,2}|S/g,
                function (e) {
                  switch (e) {
                    case 'Q':
                      return Math.ceil((t.$M + 1) / 3);
                    case 'Do':
                      return r.ordinal(t.$D);
                    case 'gggg':
                      return t.weekYear();
                    case 'GGGG':
                      return t.isoWeekYear();
                    case 'wo':
                      return r.ordinal(t.week(), 'W');
                    case 'w':
                    case 'ww':
                      return n.s(t.week(), 'w' === e ? 1 : 2, '0');
                    case 'W':
                    case 'WW':
                      return n.s(t.isoWeek(), 'W' === e ? 1 : 2, '0');
                    case 'k':
                    case 'kk':
                      return n.s(String(0 === t.$H ? 24 : t.$H), 'k' === e ? 1 : 2, '0');
                    case 'X':
                      return Math.floor(t.$d.getTime() / 1e3);
                    case 'x':
                      return t.$d.getTime();
                    case 'z':
                      return '[' + t.offsetName() + ']';
                    case 'zzz':
                      return '[' + t.offsetName('long') + ']';
                    default:
                      return e;
                  }
                },
              );
            return s.bind(this)(a);
          });
      };
    });
  })(advancedFormat$1);

  var advancedFormat = advancedFormat$1.exports;

  var weekOfYear$1 = { exports: {} };

  (function (module, exports) {
    !(function (e, t) {
      module.exports = t();
    })(commonjsGlobal, function () {
      var e = 'week',
        t = 'year';
      return function (i, n, r) {
        var f = n.prototype;
        (f.week = function (i) {
          if ((void 0 === i && (i = null), null !== i)) return this.add(7 * (i - this.week()), 'day');
          var n = this.$locale().yearStart || 1;
          if (11 === this.month() && this.date() > 25) {
            var f = r(this).startOf(t).add(1, t).date(n),
              s = r(this).endOf(e);
            if (f.isBefore(s)) return 1;
          }
          var a = r(this).startOf(t).date(n).startOf(e).subtract(1, 'millisecond'),
            o = this.diff(a, e, !0);
          return o < 0 ? r(this).startOf('week').week() : Math.ceil(o);
        }),
          (f.weeks = function (e) {
            return void 0 === e && (e = null), this.week(e);
          });
      };
    });
  })(weekOfYear$1);

  var weekOfYear = weekOfYear$1.exports;

  var zhCn = { exports: {} };

  (function (module, exports) {
    !(function (e, _) {
      module.exports = _(dayjs_min.exports);
    })(commonjsGlobal, function (e) {
      function _(e) {
        return e && 'object' == typeof e && 'default' in e ? e : { default: e };
      }
      var t = _(e),
        d = {
          name: 'zh-cn',
          weekdays: '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
          weekdaysShort: '周日_周一_周二_周三_周四_周五_周六'.split('_'),
          weekdaysMin: '日_一_二_三_四_五_六'.split('_'),
          months: '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
          monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
          ordinal: function (e, _) {
            switch (_) {
              case 'W':
                return e + '周';
              default:
                return e + '日';
            }
          },
          weekStart: 1,
          yearStart: 4,
          formats: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY/MM/DD',
            LL: 'YYYY年M月D日',
            LLL: 'YYYY年M月D日Ah点mm分',
            LLLL: 'YYYY年M月D日ddddAh点mm分',
            l: 'YYYY/M/D',
            ll: 'YYYY年M月D日',
            lll: 'YYYY年M月D日 HH:mm',
            llll: 'YYYY年M月D日dddd HH:mm',
          },
          relativeTime: {
            future: '%s内',
            past: '%s前',
            s: '几秒',
            m: '1 分钟',
            mm: '%d 分钟',
            h: '1 小时',
            hh: '%d 小时',
            d: '1 天',
            dd: '%d 天',
            M: '1 个月',
            MM: '%d 个月',
            y: '1 年',
            yy: '%d 年',
          },
          meridiem: function (e, _) {
            var t = 100 * e + _;
            return t < 600
              ? '凌晨'
              : t < 900
              ? '早上'
              : t < 1100
              ? '上午'
              : t < 1300
              ? '中午'
              : t < 1800
              ? '下午'
              : '晚上';
          },
        };
      return t.default.locale(d, null, !0), d;
    });
  })(zhCn);

  dayjs.extend(advancedFormat);
  dayjs.extend(quarterOfYear);
  dayjs.extend(customParseFormat);
  dayjs.extend(updateLocale);
  dayjs.extend(localeData);
  dayjs.extend(weekOfYear);
  dayjs.locale('zh-cn');

  var datejs = dayjs;
  datejs.isSelf = dayjs.isDayjs;

  dayjs.localeData();

  var datejs$1 = datejs;

  var dom = _dom;
  var env = _env;
  var events = _events;
  var func = _func;
  var log = _log;
  var obj = _object;
  var support = _support;
  var focus = _focus;
  var guid = uuid;
  var KEYCODE = _KEYCODE;

  var defaultLocale = {
    momentLocale: 'zh-cn',
    Timeline: {
      expand: '展开',
      fold: '收起',
    },
    Balloon: {
      close: '关闭',
    },
    Card: {
      expand: '展开',
      fold: '收起',
    },
    Calendar: {
      today: '今天',
      now: '此刻',
      ok: '确定',
      clear: '清除',
      month: '月',
      year: '年',
      prevYear: '上一年',
      nextYear: '下一年',
      prevMonth: '上个月',
      nextMonth: '下个月',
      prevDecade: '上十年',
      nextDecade: '后十年',
      yearSelectAriaLabel: '选择年份',
      monthSelectAriaLabel: '选择月份',
    },
    DatePicker: {
      placeholder: '请选择日期',
      datetimePlaceholder: '请选择日期和时间',
      monthPlaceholder: '请选择月',
      yearPlaceholder: '请选择年',
      weekPlaceholder: '请选择周',
      now: '此刻',
      selectTime: '选择时间',
      selectDate: '选择日期',
      ok: '确定',
      clear: '清除',
      startPlaceholder: '起始日期',
      endPlaceholder: '结束日期',
      hour: '时',
      minute: '分',
      second: '秒',
    },
    Dialog: {
      close: '关闭',
      ok: '确认',
      cancel: '取消',
    },
    Drawer: {
      close: '关闭',
    },
    Message: {
      closeAriaLabel: '关闭',
    },
    Pagination: {
      prev: '上一页',
      next: '下一页',
      goTo: '到第',
      page: '页',
      go: '确定',
      total: '第{current}页，共{total}页',
      labelPrev: '上一页，当前第{current}页',
      labelNext: '下一页，当前第{current}页',
      inputAriaLabel: '请输入跳转到第几页',
      selectAriaLabel: '请选择每页显示几条',
      pageSize: '每页显示：',
    },
    Input: {
      clear: '清除',
    },
    List: {
      empty: '没有数据',
    },
    Select: {
      selectPlaceholder: '请选择',
      autoCompletePlaceholder: '请输入',
      notFoundContent: '无选项',
      maxTagPlaceholder: '已选择 {selected}/{total} 项',
      selectAll: '全选',
    },
    Table: {
      empty: '没有数据',
      ok: '确认',
      reset: '重置',
      asc: '升序',
      desc: '降序',
      expanded: '已展开',
      folded: '已折叠',
      filter: '筛选',
      selectAll: '全选',
    },
    TimePicker: {
      placeholder: '请选择时间',
      clear: '清除',
      hour: '时',
      minute: '分',
      second: '秒',
    },
    Transfer: {
      items: '项',
      item: '项',
      moveAll: '移动全部',
      searchPlaceholder: '请输入',
      moveToLeft: '撤销选中元素',
      moveToRight: '提交选中元素',
    },
    Upload: {
      card: {
        cancel: '取消',
        addPhoto: '上传图片',
        download: '下载',
        delete: '删除',
      },
      drag: {
        text: '点击或者拖动文件到虚线框内上传',
        hint: '支持 docx, xls, PDF, rar, zip, PNG, JPG 等类型的文件',
      },
      upload: {
        delete: '删除',
      },
    },
    Search: {
      buttonText: '搜索',
    },
    Tag: {
      delete: '删除',
    },
    Rating: {
      description: '评分选项',
    },
    Switch: {
      on: '已打开',
      off: '已关闭',
    },
    Tab: {
      closeAriaLabel: '关闭',
    },
    Form: {
      Validate: {
        default: '%s 校验失败',
        required: '%s 是必填字段',
        format: {
          number: '%s 不是合法的数字',
          email: '%s 不是合法的 email 地址',
          url: '%s 不是合法的 URL 地址',
          tel: '%s 不是合法的电话号码',
        },
        number: {
          length: '%s 长度必须是 %s',
          min: '%s 不得小于 %s',
          max: '%s 不得大于 %s',
          minLength: '%s 字段字符长度不得少于 %s',
          maxLength: '%s 字段字符长度不得超过 %s',
        },
        string: {
          length: '%s 长度必须是 %s',
          min: '%s 不得小于 %s',
          max: '%s 不得大于 %s',
          minLength: '%s 长度不得少于 %s',
          maxLength: '%s 长度不得超过 %s',
        },
        array: {
          length: '%s 个数必须是 %s',
          minLength: '%s 个数不得少于 %s',
          maxLength: '%s 个数不得超过 %s',
        },
        pattern: '%s 数值 %s 不匹配正则 %s',
      },
    },
  };

  /**
   *
   * @param {Object|Boolean} input
   * @returns {Object} typeof obj.open === 'boolean'
   */
  var parseBoundary = function parseBoundary(input) {
    var obj = void 0;
    if (input === undefined || input === null) {
      return {};
    } else if (typeof input === 'boolean') {
      obj = { open: input };
    } else {
      obj = _default$6({ open: true }, input);
    }

    return obj;
  };

  function getContextProps(props, context, displayName) {
    var prefix = props.prefix,
      locale = props.locale;
    props.defaultPropsConfig;
    var pure = props.pure,
      rtl = props.rtl,
      device = props.device,
      popupContainer = props.popupContainer,
      errorBoundary = props.errorBoundary;
    var nextPrefix = context.nextPrefix,
      nextLocale = context.nextLocale,
      nextDefaultPropsConfig = context.nextDefaultPropsConfig,
      nextPure = context.nextPure,
      nextWarning = context.nextWarning,
      nextRtl = context.nextRtl,
      nextDevice = context.nextDevice,
      nextPopupContainer = context.nextPopupContainer,
      nextErrorBoundary = context.nextErrorBoundary;

    var newPrefix = prefix || nextPrefix;

    var localeFromContext = void 0;
    var newDisplayName = displayName;

    switch (displayName) {
      case 'DatePicker2':
        newDisplayName = 'DatePicker';
        break;
      case 'Calendar2':
        newDisplayName = 'Calendar';
        break;
      case 'TimePicker2':
        newDisplayName = 'TimePicker';
        break;
    }

    if (nextLocale) {
      localeFromContext = nextLocale[newDisplayName];
      if (localeFromContext) {
        localeFromContext.momentLocale = nextLocale.momentLocale;
      }
    }

    var newLocale = void 0;
    if (locale) {
      newLocale = obj.deepMerge({}, defaultLocale[newDisplayName], localeFromContext, locale);
    } else if (localeFromContext) {
      newLocale = obj.deepMerge({}, defaultLocale[newDisplayName], localeFromContext);
    }

    var newPure = typeof pure === 'boolean' ? pure : nextPure;
    var newRtl = typeof rtl === 'boolean' ? rtl : nextRtl;

    // ProtoType of [nextE|e]rrorBoundary can be one of [boolean, object]
    // but typeof newErrorBoundary === 'object'
    // newErrorBoundary should always have the key 'open', which indicates ErrorBoundary on or off
    var newErrorBoundary = _default$6({}, parseBoundary(nextErrorBoundary), parseBoundary(errorBoundary));

    if (!('open' in newErrorBoundary)) {
      newErrorBoundary.open = false;
    }

    return {
      prefix: newPrefix,
      locale: newLocale,
      pure: newPure,
      rtl: newRtl,
      warning: nextWarning,
      defaultPropsConfig: nextDefaultPropsConfig || {},
      device: device || nextDevice || undefined,
      popupContainer: popupContainer || nextPopupContainer,
      errorBoundary: newErrorBoundary,
    };
  }

  var _default$1 = function (obj, keys) {
    var target = {};

    for (var i in obj) {
      if (keys.indexOf(i) >= 0) continue;
      if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
      target[i] = obj[i];
    }

    return target;
  };

  var reactIs = reactIs$1.exports;

  /**
   * Copyright 2015, Yahoo! Inc.
   * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
   */
  var REACT_STATICS = {
    childContextTypes: true,
    contextType: true,
    contextTypes: true,
    defaultProps: true,
    displayName: true,
    getDefaultProps: true,
    getDerivedStateFromError: true,
    getDerivedStateFromProps: true,
    mixins: true,
    propTypes: true,
    type: true,
  };
  var KNOWN_STATICS = {
    name: true,
    length: true,
    prototype: true,
    caller: true,
    callee: true,
    arguments: true,
    arity: true,
  };
  var FORWARD_REF_STATICS = {
    $$typeof: true,
    render: true,
    defaultProps: true,
    displayName: true,
    propTypes: true,
  };
  var MEMO_STATICS = {
    $$typeof: true,
    compare: true,
    defaultProps: true,
    displayName: true,
    propTypes: true,
    type: true,
  };
  var TYPE_STATICS = {};
  TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
  TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;

  function getStatics(component) {
    // React v16.11 and below
    if (reactIs.isMemo(component)) {
      return MEMO_STATICS;
    } // React v16.12 and above

    return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
  }

  var defineProperty = Object.defineProperty;
  var getOwnPropertyNames = Object.getOwnPropertyNames;
  var getOwnPropertySymbols = Object.getOwnPropertySymbols;
  var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
  var getPrototypeOf = Object.getPrototypeOf;
  var objectPrototype = Object.prototype;
  function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
    if (typeof sourceComponent !== 'string') {
      // don't hoist over string (html) components
      if (objectPrototype) {
        var inheritedComponent = getPrototypeOf(sourceComponent);

        if (inheritedComponent && inheritedComponent !== objectPrototype) {
          hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
        }
      }

      var keys = getOwnPropertyNames(sourceComponent);

      if (getOwnPropertySymbols) {
        keys = keys.concat(getOwnPropertySymbols(sourceComponent));
      }

      var targetStatics = getStatics(targetComponent);
      var sourceStatics = getStatics(sourceComponent);

      for (var i = 0; i < keys.length; ++i) {
        var key = keys[i];

        if (
          !KNOWN_STATICS[key] &&
          !(blacklist && blacklist[key]) &&
          !(sourceStatics && sourceStatics[key]) &&
          !(targetStatics && targetStatics[key])
        ) {
          var descriptor = getOwnPropertyDescriptor(sourceComponent, key);

          try {
            // Avoid failures from read-only properties
            defineProperty(targetComponent, key, descriptor);
          } catch (e) {}
        }
      }
    }

    return targetComponent;
  }

  var hoistNonReactStatics_cjs = hoistNonReactStatics;

  var _class$p, _temp$m;

  DefaultUI.propTypes = {
    error: PropTypes$2.object,
    errorInfo: PropTypes$2.object,
  };

  function DefaultUI() {
    return '';
  }

  var ErrorBoundary =
    ((_temp$m = _class$p =
      (function (_React$Component) {
        _default$2(ErrorBoundary, _React$Component);

        function ErrorBoundary(props) {
          _default$5(this, ErrorBoundary);

          var _this = _default$3(this, _React$Component.call(this, props));

          _this.state = { error: null, errorInfo: null };
          return _this;
        }

        ErrorBoundary.prototype.componentDidCatch = function componentDidCatch(error, errorInfo) {
          this.setState({
            error: error,
            errorInfo: errorInfo,
          });

          var afterCatch = this.props.afterCatch;

          if ('afterCatch' in this.props && typeof afterCatch === 'function') {
            this.props.afterCatch(error, errorInfo);
          }
        };

        ErrorBoundary.prototype.render = function render() {
          var _props$fallbackUI = this.props.fallbackUI,
            FallbackUI = _props$fallbackUI === undefined ? DefaultUI : _props$fallbackUI;

          if (this.state.errorInfo) {
            return React__default['default'].createElement(FallbackUI, {
              error: this.state.error,
              errorInfo: this.state.errorInfo,
            });
          }
          // Normally, just render children
          return this.props.children;
        };

        return ErrorBoundary;
      })(React__default['default'].Component)),
    (_class$p.propTypes = {
      children: PropTypes$2.element,
      /**
       * 捕获错误后的自定义处理, 比如埋点上传
       * @param {Object} error 错误
       * @param {Object} errorInfo 错误详细信息
       */
      afterCatch: PropTypes$2.func,
      /**
       * 捕获错误后的展现 自定义组件
       * @param {Object} error 错误
       * @param {Object} errorInfo 错误详细信息
       * @returns {Element} 捕获错误后的处理
       */
      fallbackUI: PropTypes$2.func,
    }),
    _temp$m);
  ErrorBoundary.displayName = 'ErrorBoundary';

  var shallowEqual = obj.shallowEqual;

  function getDisplayName(Component) {
    return Component.displayName || Component.name || 'Component';
  }

  var globalLocales = void 0;
  var currentGlobalLanguage = 'zh-cn';
  var currentGlobalLocale = {};
  var currentGlobalRtl = void 0;

  function initLocales(locales) {
    globalLocales = locales;

    if (locales) {
      currentGlobalLocale = locales[currentGlobalLanguage];

      if (typeof currentGlobalRtl !== 'boolean') {
        currentGlobalRtl = currentGlobalLocale && currentGlobalLocale.rtl;
      }
    }
  }

  function setLanguage(language) {
    if (globalLocales) {
      currentGlobalLanguage = language;
      currentGlobalLocale = globalLocales[language];

      if (typeof currentGlobalRtl !== 'boolean') {
        currentGlobalRtl = currentGlobalLocale && currentGlobalLocale.rtl;
      }
    }
  }

  function setLocale(locale) {
    currentGlobalLocale = _default$6({}, globalLocales ? globalLocales[currentGlobalLanguage] : {}, locale);

    if (typeof currentGlobalRtl !== 'boolean') {
      currentGlobalRtl = currentGlobalLocale && currentGlobalLocale.rtl;
    }
  }

  function setDirection(dir) {
    currentGlobalRtl = dir === 'rtl';
  }

  function getLocale() {
    return currentGlobalLocale;
  }

  function getLanguage() {
    return currentGlobalLanguage;
  }

  function getDirection() {
    return currentGlobalRtl;
  }

  function config(Component) {
    var _class, _temp;

    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    // 非 forwardRef 创建的 class component
    if (obj.isClassComponent(Component) && Component.prototype.shouldComponentUpdate === undefined) {
      // class component: 通过定义 shouldComponentUpdate 改写成 pure component, 有refs
      Component.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {
        if (this.props.pure) {
          return !shallowEqual(this.props, nextProps) || !shallowEqual(this.state, nextState);
        }

        return true;
      };
    }

    var ConfigedComponent =
      ((_temp = _class =
        (function (_React$Component) {
          _default$2(ConfigedComponent, _React$Component);

          function ConfigedComponent(props, context) {
            _default$5(this, ConfigedComponent);

            var _this = _default$3(this, _React$Component.call(this, props, context));

            _this._getInstance = _this._getInstance.bind(_this);
            _this._deprecated = _this._deprecated.bind(_this);
            return _this;
          }

          ConfigedComponent.prototype._getInstance = function _getInstance(ref) {
            var _this2 = this;

            this._instance = ref;

            if (this._instance && options.exportNames) {
              options.exportNames.forEach(function (name) {
                var field = _this2._instance[name];
                if (typeof field === 'function') {
                  _this2[name] = field.bind(_this2._instance);
                } else {
                  _this2[name] = field;
                }
              });
            }
          };

          ConfigedComponent.prototype._deprecated = function _deprecated() {
            if (this.context.nextWarning !== false) {
              log.deprecated.apply(log, arguments);
            }
          };

          ConfigedComponent.prototype.getInstance = function getInstance() {
            return this._instance;
          };

          ConfigedComponent.prototype.render = function render() {
            var _props = this.props,
              prefix = _props.prefix,
              locale = _props.locale,
              defaultPropsConfig = _props.defaultPropsConfig,
              pure = _props.pure,
              rtl = _props.rtl,
              device = _props.device,
              popupContainer = _props.popupContainer,
              errorBoundary = _props.errorBoundary,
              others = _default$1(_props, [
                'prefix',
                'locale',
                'defaultPropsConfig',
                'pure',
                'rtl',
                'device',
                'popupContainer',
                'errorBoundary',
              ]);

            var _context = this.context,
              nextPrefix = _context.nextPrefix,
              _context$nextLocale = _context.nextLocale,
              nextLocale = _context$nextLocale === undefined ? {} : _context$nextLocale,
              _context$nextDefaultP = _context.nextDefaultPropsConfig,
              nextDefaultPropsConfig = _context$nextDefaultP === undefined ? {} : _context$nextDefaultP,
              nextPure = _context.nextPure,
              nextRtl = _context.nextRtl,
              nextDevice = _context.nextDevice,
              nextPopupContainer = _context.nextPopupContainer,
              nextErrorBoundary = _context.nextErrorBoundary;

            var displayName = options.componentName || getDisplayName(Component);
            var contextProps = getContextProps(
              {
                prefix: prefix,
                locale: locale,
                defaultPropsConfig: defaultPropsConfig,
                pure: pure,
                device: device,
                popupContainer: popupContainer,
                rtl: rtl,
                errorBoundary: errorBoundary,
              },
              {
                nextPrefix: nextPrefix,
                nextLocale: _default$6({}, currentGlobalLocale, nextLocale),
                nextDefaultPropsConfig: nextDefaultPropsConfig,
                nextPure: nextPure,
                nextDevice: nextDevice,
                nextPopupContainer: nextPopupContainer,
                nextRtl: typeof nextRtl === 'boolean' ? nextRtl : currentGlobalRtl === true ? true : undefined,
                nextErrorBoundary: nextErrorBoundary,
              },
              displayName,
            );

            // errorBoundary is only for <ErrorBoundary>
            var newContextProps = ['prefix', 'locale', 'pure', 'rtl', 'device', 'popupContainer'].reduce(function (
              ret,
              name,
            ) {
              if (typeof contextProps[name] !== 'undefined') {
                ret[name] = contextProps[name];
              }
              return ret;
            },
            {});

            if ('pure' in newContextProps && newContextProps.pure) {
              log.warning('pure of ConfigProvider is deprecated, use Function Component or React.PureComponent');
            }

            // 对于两个真正消费 popupContainer 的组件来说，正确的名字是 container,
            if (
              'popupContainer' in newContextProps &&
              this.props.container === undefined &&
              ['Overlay', 'Popup'].indexOf(displayName) > -1
            ) {
              newContextProps.container = newContextProps.popupContainer;
              delete newContextProps.popupContainer;
            }

            var newOthers = options.transform ? options.transform(others, this._deprecated) : others;

            var content = React__default['default'].createElement(
              Component,
              _default$6({}, contextProps.defaultPropsConfig[displayName], newOthers, newContextProps, {
                ref: obj.isClassComponent(Component) ? this._getInstance : null,
              }),
            );

            var _contextProps$errorBo = contextProps.errorBoundary,
              open = _contextProps$errorBo.open,
              othersBoundary = _default$1(_contextProps$errorBo, ['open']);

            return open ? React__default['default'].createElement(ErrorBoundary, othersBoundary, content) : content;
          };

          return ConfigedComponent;
        })(React__default['default'].Component)),
      (_class.propTypes = _default$6({}, Component.propTypes || {}, {
        prefix: PropTypes$2.string,
        locale: PropTypes$2.object,
        defaultPropsConfig: PropTypes$2.object,
        pure: PropTypes$2.bool,
        rtl: PropTypes$2.bool,
        device: PropTypes$2.oneOf(['tablet', 'desktop', 'phone']),
        popupContainer: PropTypes$2.any,
        errorBoundary: PropTypes$2.oneOfType([PropTypes$2.bool, PropTypes$2.object]),
      })),
      (_class.contextTypes = _default$6({}, Component.contextTypes || {}, {
        nextPrefix: PropTypes$2.string,
        nextLocale: PropTypes$2.object,
        nextDefaultPropsConfig: PropTypes$2.object,
        nextPure: PropTypes$2.bool,
        nextRtl: PropTypes$2.bool,
        nextWarning: PropTypes$2.bool,
        nextDevice: PropTypes$2.oneOf(['tablet', 'desktop', 'phone']),
        nextPopupContainer: PropTypes$2.any,
        nextErrorBoundary: PropTypes$2.oneOfType([PropTypes$2.bool, PropTypes$2.object]),
      })),
      _temp);
    ConfigedComponent.displayName = 'ConfigedComponent';

    ConfigedComponent.displayName = 'Config(' + getDisplayName(Component) + ')';

    hoistNonReactStatics_cjs(ConfigedComponent, Component);

    return ConfigedComponent;
  }

  /**
   * Creates an object with the same values as object and keys
   * generated by running each own enumerable string keyed property
   * of object thru iteratee.
   * @param {Object} obj
   * @param {Function} fn
   * @return {Object}
   */
  var mapKeys = function mapKeys(obj, fn) {
    var result = {};
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        var value = obj[key];
        var newKey = fn(key, value);
        result[newKey] = value;
      }
    }

    return result;
  };

  /**
   * Replace specific key with prefix `next`
   * and lowercase first character of the result.
   * @param {String} key
   * @return {String}
   */
  var replaceKey = function replaceKey(key) {
    return key.replace(/^(next)([A-Z])/, function (match, p1, p2) {
      return p2.toLowerCase();
    });
  };

  /**
   * @param {Object} source
   * @return {Object}
   */
  var transformContext = function transformContext(source) {
    return mapKeys(source, replaceKey);
  };

  /**
   * Consumer
   * @param {Object} prop
   * @param {Object} context
   */
  var Consumer = function Consumer(_ref, context) {
    var children = _ref.children;
    return typeof children === 'function' ? children(transformContext(context)) : null;
  };

  /**
   * PropTypes
   * @type {Object}
   * @static
   */
  Consumer.propTypes = {
    // Render context as function
    // Function(context: object): ReactElement
    children: PropTypes$2.func,
  };

  /**
   * ContextTypes (legacy context)
   * @type {Object}
   * @static
   */
  Consumer.contextTypes = {
    nextPrefix: PropTypes$2.string,
    nextLocale: PropTypes$2.object,
    nextPure: PropTypes$2.bool,
    newRtl: PropTypes$2.bool,
    nextWarning: PropTypes$2.bool,
    nextDevice: PropTypes$2.oneOf(['tablet', 'desktop', 'phone']),
    nextPopupContainer: PropTypes$2.any,
  };

  var Consumer$1 = Consumer;

  var Cache = (function () {
    function Cache() {
      _default$5(this, Cache);

      this._root = null;
      this._store = new Map();
    }

    Cache.prototype.empty = function empty() {
      return this._store.size === 0;
    };

    Cache.prototype.has = function has(key) {
      return this._store.has(key);
    };

    Cache.prototype.get = function get(key, defaultValue) {
      var res = this.has(key) ? this._store.get(key) : this.root();
      return typeof res === 'undefined' || res === null ? defaultValue : res;
    };

    Cache.prototype.add = function add(key, value) {
      if (this.empty()) {
        this._root = key;
      }
      this._store.set(key, value);
    };

    Cache.prototype.update = function update(key, value) {
      if (this.has(key)) {
        this._store.set(key, value);
      }
    };

    Cache.prototype.remove = function remove(key) {
      this._store.delete(key);

      if (key === this._root) {
        var maps = this._store.keys();
        // 如果当前销毁的实例刚好是root，那么从map中取下一个加入的节点当作root
        var nextkey = maps.next().value;
        this._root = nextkey;
      }
    };

    Cache.prototype.clear = function clear() {
      this._store.clear();
    };

    Cache.prototype.root = function root() {
      return this._store.get(this._root);
    };

    return Cache;
  })();

  var Cache$1 = Cache;

  var _class$o, _temp$l;

  var childContextCache = new Cache$1();

  var setMomentLocale = function setMomentLocale(locale) {
    var moment = void 0;
    try {
      moment = require('moment');
      if (moment && moment.default && moment.default.isMoment) moment = moment.default;
    } catch (e) {
      // ignore
    }

    if (moment && locale) {
      moment.locale(locale.momentLocale);
    }
  };

  var setDateLocale = function setDateLocale(locale) {
    if (locale) {
      datejs$1.locale(locale.dateLocale || locale.momentLocale);
    }
  };

  /**
   * ConfigProvider
   * @propsExtends false
   */
  var ConfigProvider =
    ((_temp$l = _class$o =
      (function (_Component) {
        _default$2(ConfigProvider, _Component);

        /**
         * 传入组件的 props 和 displayName，得到和 childContext 计算过的包含有 preifx/locale/pure 的对象，一般用于通过静态方法生成脱离组件树的组件
         * @param {Object} props 组件的 props
         * @param {String} displayName 组件的 displayName
         * @returns {Object} 新的 context props
         */
        function ConfigProvider() {
          _default$5(this, ConfigProvider);

          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          var _this = _default$3(this, _Component.call.apply(_Component, [this].concat(args)));

          childContextCache.add(_this, _default$6({}, childContextCache.get(_this, {}), _this.getChildContext()));

          setMomentLocale(_this.props.locale);
          setDateLocale(_this.props.locale);

          _this.state = {
            locale: _this.props.locale,
          };
          return _this;
        }

        /**
         * 传入组件，生成受 ConfigProvider 控制的 HOC 组件
         * @param {Component} Component 组件类
         * @param {Object} options 可选项
         * @returns {Component} HOC
         */

        ConfigProvider.prototype.getChildContext = function getChildContext() {
          var _props = this.props,
            prefix = _props.prefix,
            locale = _props.locale,
            defaultPropsConfig = _props.defaultPropsConfig,
            pure = _props.pure,
            warning = _props.warning,
            rtl = _props.rtl,
            device = _props.device,
            popupContainer = _props.popupContainer,
            errorBoundary = _props.errorBoundary;
          var _context = this.context,
            nextPrefix = _context.nextPrefix,
            nextDefaultPropsConfig = _context.nextDefaultPropsConfig,
            nextLocale = _context.nextLocale,
            nextPure = _context.nextPure,
            nextRtl = _context.nextRtl,
            nextWarning = _context.nextWarning,
            nextDevice = _context.nextDevice,
            nextPopupContainer = _context.nextPopupContainer,
            nextErrorBoundary = _context.nextErrorBoundary;

          return {
            nextPrefix: prefix || nextPrefix,
            nextDefaultPropsConfig: defaultPropsConfig || nextDefaultPropsConfig,
            nextLocale: locale || nextLocale,
            nextPure: typeof pure === 'boolean' ? pure : nextPure,
            nextRtl: typeof rtl === 'boolean' ? rtl : nextRtl,
            nextWarning: typeof warning === 'boolean' ? warning : nextWarning,
            nextDevice: device || nextDevice,
            nextPopupContainer: popupContainer || nextPopupContainer,
            nextErrorBoundary: errorBoundary || nextErrorBoundary,
          };
        };

        ConfigProvider.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {
          if (nextProps.locale !== prevState.locale) {
            setMomentLocale(nextProps.locale);
            setDateLocale(nextProps.locale);

            return {
              locale: nextProps.locale,
            };
          }

          return null;
        };

        ConfigProvider.prototype.componentDidUpdate = function componentDidUpdate() {
          childContextCache.add(this, _default$6({}, childContextCache.get(this, {}), this.getChildContext()));
        };

        ConfigProvider.prototype.componentWillUnmount = function componentWillUnmount() {
          childContextCache.remove(this);
        };

        ConfigProvider.prototype.render = function render() {
          return React.Children.only(this.props.children);
        };

        return ConfigProvider;
      })(React.Component)),
    (_class$o.propTypes = {
      /**
       * 样式类名的品牌前缀
       */
      prefix: PropTypes$2.string,
      /**
       * 国际化文案对象，属性为组件的 displayName
       */
      locale: PropTypes$2.object,
      /**
       * 组件 API 的默认配置
       */
      defaultPropsConfig: PropTypes$2.object,
      /**
       * 是否开启错误捕捉 errorBoundary
       * 如需自定义参数，请传入对象 对象接受参数列表如下：
       *
       * fallbackUI `Function(error?: {}, errorInfo?: {}) => Element` 捕获错误后的展示
       * afterCatch `Function(error?: {}, errorInfo?: {})` 捕获错误后的行为, 比如埋点上传
       */
      errorBoundary: PropTypes$2.oneOfType([PropTypes$2.bool, PropTypes$2.object]),
      /**
       * 是否开启 Pure Render 模式，会提高性能，但是也会带来副作用
       */
      pure: PropTypes$2.bool,
      /**
       * 是否在开发模式下显示组件属性被废弃的 warning 提示
       */
      warning: PropTypes$2.bool,
      /**
       * 是否开启 rtl 模式
       */
      rtl: PropTypes$2.bool,
      /**
       * 设备类型，针对不同的设备类型组件做出对应的响应式变化
       */
      device: PropTypes$2.oneOf(['tablet', 'desktop', 'phone']),
      /**
       * 组件树
       */
      children: PropTypes$2.any,
      /**
       * 指定浮层渲染的父节点, 可以为节点id的字符串，也可以返回节点的函数
       */
      popupContainer: PropTypes$2.any,
    }),
    (_class$o.defaultProps = {
      warning: true,
      errorBoundary: false,
    }),
    (_class$o.contextTypes = {
      nextPrefix: PropTypes$2.string,
      nextLocale: PropTypes$2.object,
      nextDefaultPropsConfig: PropTypes$2.object,
      nextPure: PropTypes$2.bool,
      nextRtl: PropTypes$2.bool,
      nextWarning: PropTypes$2.bool,
      nextDevice: PropTypes$2.oneOf(['tablet', 'desktop', 'phone']),
      nextPopupContainer: PropTypes$2.any,
      nextErrorBoundary: PropTypes$2.oneOfType([PropTypes$2.bool, PropTypes$2.object]),
    }),
    (_class$o.childContextTypes = {
      nextPrefix: PropTypes$2.string,
      nextLocale: PropTypes$2.object,
      nextDefaultPropsConfig: PropTypes$2.object,
      nextPure: PropTypes$2.bool,
      nextRtl: PropTypes$2.bool,
      nextWarning: PropTypes$2.bool,
      nextDevice: PropTypes$2.oneOf(['tablet', 'desktop', 'phone']),
      nextPopupContainer: PropTypes$2.any,
      nextErrorBoundary: PropTypes$2.oneOfType([PropTypes$2.bool, PropTypes$2.object]),
    }),
    (_class$o.config = function (Component, options) {
      return config(Component, options);
    }),
    (_class$o.getContextProps = function (props, displayName) {
      return getContextProps(props, childContextCache.root() || {}, displayName);
    }),
    (_class$o.clearCache = function () {
      childContextCache.clear();
    }),
    (_class$o.initLocales = initLocales),
    (_class$o.setLanguage = setLanguage),
    (_class$o.setLocale = setLocale),
    (_class$o.setDirection = setDirection),
    (_class$o.getLanguage = getLanguage),
    (_class$o.getLocale = getLocale),
    (_class$o.getDirection = getDirection),
    (_class$o.Consumer = Consumer$1),
    (_class$o.ErrorBoundary = ErrorBoundary),
    (_class$o.getContext = function () {
      var _ref = childContextCache.root() || {},
        nextPrefix = _ref.nextPrefix,
        nextLocale = _ref.nextLocale,
        nextDefaultPropsConfig = _ref.nextDefaultPropsConfig,
        nextPure = _ref.nextPure,
        nextRtl = _ref.nextRtl,
        nextWarning = _ref.nextWarning,
        nextDevice = _ref.nextDevice,
        nextPopupContainer = _ref.nextPopupContainer,
        nextErrorBoundary = _ref.nextErrorBoundary;

      return {
        prefix: nextPrefix,
        locale: nextLocale,
        defaultPropsConfig: nextDefaultPropsConfig,
        pure: nextPure,
        rtl: nextRtl,
        warning: nextWarning,
        device: nextDevice,
        popupContainer: nextPopupContainer,
        errorBoundary: nextErrorBoundary,
      };
    }),
    _temp$l);
  ConfigProvider.displayName = 'ConfigProvider';

  var ConfigProvider$1 = polyfill(ConfigProvider);

  var CSSTransition = { exports: {} };

  var addClass$1 = { exports: {} };

  var interopRequireDefault = { exports: {} };

  (function (module) {
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule
        ? obj
        : {
            default: obj,
          };
    }

    module.exports = _interopRequireDefault;
    (module.exports['default'] = module.exports), (module.exports.__esModule = true);
  })(interopRequireDefault);

  var hasClass = { exports: {} };

  (function (module, exports) {
    exports.__esModule = true;
    exports.default = hasClass;

    function hasClass(element, className) {
      if (element.classList) return !!className && element.classList.contains(className);
      else return (' ' + (element.className.baseVal || element.className) + ' ').indexOf(' ' + className + ' ') !== -1;
    }

    module.exports = exports['default'];
  })(hasClass, hasClass.exports);

  (function (module, exports) {
    var _interopRequireDefault = interopRequireDefault.exports;

    exports.__esModule = true;
    exports.default = addClass;

    var _hasClass = _interopRequireDefault(hasClass.exports);

    function addClass(element, className) {
      if (element.classList) element.classList.add(className);
      else if (!(0, _hasClass.default)(element, className))
        if (typeof element.className === 'string') element.className = element.className + ' ' + className;
        else element.setAttribute('class', ((element.className && element.className.baseVal) || '') + ' ' + className);
    }

    module.exports = exports['default'];
  })(addClass$1, addClass$1.exports);

  function replaceClassName(origClass, classToRemove) {
    return origClass
      .replace(new RegExp('(^|\\s)' + classToRemove + '(?:\\s|$)', 'g'), '$1')
      .replace(/\s+/g, ' ')
      .replace(/^\s*|\s*$/g, '');
  }

  var removeClass$1 = function removeClass(element, className) {
    if (element.classList) element.classList.remove(className);
    else if (typeof element.className === 'string') element.className = replaceClassName(element.className, className);
    else
      element.setAttribute(
        'class',
        replaceClassName((element.className && element.className.baseVal) || '', className),
      );
  };

  var Transition$1 = {};

  var require$$2 = /*@__PURE__*/ getAugmentedNamespace(reactLifecyclesCompat_es);

  var PropTypes$1 = {};

  PropTypes$1.__esModule = true;
  PropTypes$1.classNamesShape = PropTypes$1.timeoutsShape = void 0;

  var _propTypes = _interopRequireDefault$2(propTypes.exports);

  function _interopRequireDefault$2(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }

  var timeoutsShape = _propTypes.default.oneOfType([
    _propTypes.default.number,
    _propTypes.default.shape({
      enter: _propTypes.default.number,
      exit: _propTypes.default.number,
      appear: _propTypes.default.number,
    }).isRequired,
  ]);
  PropTypes$1.timeoutsShape = timeoutsShape;
  var classNamesShape = _propTypes.default.oneOfType([
    _propTypes.default.string,
    _propTypes.default.shape({
      enter: _propTypes.default.string,
      exit: _propTypes.default.string,
      active: _propTypes.default.string,
    }),
    _propTypes.default.shape({
      enter: _propTypes.default.string,
      enterDone: _propTypes.default.string,
      enterActive: _propTypes.default.string,
      exit: _propTypes.default.string,
      exitDone: _propTypes.default.string,
      exitActive: _propTypes.default.string,
    }),
  ]);
  PropTypes$1.classNamesShape = classNamesShape;

  Transition$1.__esModule = true;
  Transition$1.default =
    Transition$1.EXITING =
    Transition$1.ENTERED =
    Transition$1.ENTERING =
    Transition$1.EXITED =
    Transition$1.UNMOUNTED =
      void 0;

  var PropTypes = _interopRequireWildcard(propTypes.exports);

  var _react$1 = _interopRequireDefault$1(React__default['default']);

  var _reactDom = _interopRequireDefault$1(ReactDOM__default['default']);

  var _reactLifecyclesCompat = require$$2;

  var _PropTypes = PropTypes$1;

  function _interopRequireDefault$1(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc =
              Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};
            if (desc.get || desc.set) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }

  function _objectWithoutPropertiesLoose$1(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }
    return target;
  }

  function _inheritsLoose$1(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
  }

  var UNMOUNTED = 'unmounted';
  Transition$1.UNMOUNTED = UNMOUNTED;
  var EXITED = 'exited';
  Transition$1.EXITED = EXITED;
  var ENTERING = 'entering';
  Transition$1.ENTERING = ENTERING;
  var ENTERED = 'entered';
  Transition$1.ENTERED = ENTERED;
  var EXITING = 'exiting';
  /**
   * The Transition component lets you describe a transition from one component
   * state to another _over time_ with a simple declarative API. Most commonly
   * it's used to animate the mounting and unmounting of a component, but can also
   * be used to describe in-place transition states as well.
   *
   * ---
   *
   * **Note**: `Transition` is a platform-agnostic base component. If you're using
   * transitions in CSS, you'll probably want to use
   * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)
   * instead. It inherits all the features of `Transition`, but contains
   * additional features necessary to play nice with CSS transitions (hence the
   * name of the component).
   *
   * ---
   *
   * By default the `Transition` component does not alter the behavior of the
   * component it renders, it only tracks "enter" and "exit" states for the
   * components. It's up to you to give meaning and effect to those states. For
   * example we can add styles to a component when it enters or exits:
   *
   * ```jsx
   * import { Transition } from 'react-transition-group';
   *
   * const duration = 300;
   *
   * const defaultStyle = {
   *   transition: `opacity ${duration}ms ease-in-out`,
   *   opacity: 0,
   * }
   *
   * const transitionStyles = {
   *   entering: { opacity: 0 },
   *   entered:  { opacity: 1 },
   * };
   *
   * const Fade = ({ in: inProp }) => (
   *   <Transition in={inProp} timeout={duration}>
   *     {state => (
   *       <div style={{
   *         ...defaultStyle,
   *         ...transitionStyles[state]
   *       }}>
   *         I'm a fade Transition!
   *       </div>
   *     )}
   *   </Transition>
   * );
   * ```
   *
   * There are 4 main states a Transition can be in:
   *  - `'entering'`
   *  - `'entered'`
   *  - `'exiting'`
   *  - `'exited'`
   *
   * Transition state is toggled via the `in` prop. When `true` the component
   * begins the "Enter" stage. During this stage, the component will shift from
   * its current transition state, to `'entering'` for the duration of the
   * transition and then to the `'entered'` stage once it's complete. Let's take
   * the following example (we'll use the
   * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):
   *
   * ```jsx
   * function App() {
   *   const [inProp, setInProp] = useState(false);
   *   return (
   *     <div>
   *       <Transition in={inProp} timeout={500}>
   *         {state => (
   *           // ...
   *         )}
   *       </Transition>
   *       <button onClick={() => setInProp(true)}>
   *         Click to Enter
   *       </button>
   *     </div>
   *   );
   * }
   * ```
   *
   * When the button is clicked the component will shift to the `'entering'` state
   * and stay there for 500ms (the value of `timeout`) before it finally switches
   * to `'entered'`.
   *
   * When `in` is `false` the same thing happens except the state moves from
   * `'exiting'` to `'exited'`.
   */

  Transition$1.EXITING = EXITING;

  var Transition =
    /*#__PURE__*/
    (function (_React$Component) {
      _inheritsLoose$1(Transition, _React$Component);

      function Transition(props, context) {
        var _this;

        _this = _React$Component.call(this, props, context) || this;
        var parentGroup = context.transitionGroup; // In the context of a TransitionGroup all enters are really appears

        var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
        var initialStatus;
        _this.appearStatus = null;

        if (props.in) {
          if (appear) {
            initialStatus = EXITED;
            _this.appearStatus = ENTERING;
          } else {
            initialStatus = ENTERED;
          }
        } else {
          if (props.unmountOnExit || props.mountOnEnter) {
            initialStatus = UNMOUNTED;
          } else {
            initialStatus = EXITED;
          }
        }

        _this.state = {
          status: initialStatus,
        };
        _this.nextCallback = null;
        return _this;
      }

      var _proto = Transition.prototype;

      _proto.getChildContext = function getChildContext() {
        return {
          transitionGroup: null, // allows for nested Transitions
        };
      };

      Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
        var nextIn = _ref.in;

        if (nextIn && prevState.status === UNMOUNTED) {
          return {
            status: EXITED,
          };
        }

        return null;
      }; // getSnapshotBeforeUpdate(prevProps) {
      //   let nextStatus = null
      //   if (prevProps !== this.props) {
      //     const { status } = this.state
      //     if (this.props.in) {
      //       if (status !== ENTERING && status !== ENTERED) {
      //         nextStatus = ENTERING
      //       }
      //     } else {
      //       if (status === ENTERING || status === ENTERED) {
      //         nextStatus = EXITING
      //       }
      //     }
      //   }
      //   return { nextStatus }
      // }

      _proto.componentDidMount = function componentDidMount() {
        this.updateStatus(true, this.appearStatus);
      };

      _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
        var nextStatus = null;

        if (prevProps !== this.props) {
          var status = this.state.status;

          if (this.props.in) {
            if (status !== ENTERING && status !== ENTERED) {
              nextStatus = ENTERING;
            }
          } else {
            if (status === ENTERING || status === ENTERED) {
              nextStatus = EXITING;
            }
          }
        }

        this.updateStatus(false, nextStatus);
      };

      _proto.componentWillUnmount = function componentWillUnmount() {
        this.cancelNextCallback();
      };

      _proto.getTimeouts = function getTimeouts() {
        var timeout = this.props.timeout;
        var exit, enter, appear;
        exit = enter = appear = timeout;

        if (timeout != null && typeof timeout !== 'number') {
          exit = timeout.exit;
          enter = timeout.enter; // TODO: remove fallback for next major

          appear = timeout.appear !== undefined ? timeout.appear : enter;
        }

        return {
          exit: exit,
          enter: enter,
          appear: appear,
        };
      };

      _proto.updateStatus = function updateStatus(mounting, nextStatus) {
        if (mounting === void 0) {
          mounting = false;
        }

        if (nextStatus !== null) {
          // nextStatus will always be ENTERING or EXITING.
          this.cancelNextCallback();

          var node = _reactDom.default.findDOMNode(this);

          if (nextStatus === ENTERING) {
            this.performEnter(node, mounting);
          } else {
            this.performExit(node);
          }
        } else if (this.props.unmountOnExit && this.state.status === EXITED) {
          this.setState({
            status: UNMOUNTED,
          });
        }
      };

      _proto.performEnter = function performEnter(node, mounting) {
        var _this2 = this;

        var enter = this.props.enter;
        var appearing = this.context.transitionGroup ? this.context.transitionGroup.isMounting : mounting;
        var timeouts = this.getTimeouts();
        var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED
        // if we are mounting and running this it means appear _must_ be set

        if (!mounting && !enter) {
          this.safeSetState(
            {
              status: ENTERED,
            },
            function () {
              _this2.props.onEntered(node);
            },
          );
          return;
        }

        this.props.onEnter(node, appearing);
        this.safeSetState(
          {
            status: ENTERING,
          },
          function () {
            _this2.props.onEntering(node, appearing);

            _this2.onTransitionEnd(node, enterTimeout, function () {
              _this2.safeSetState(
                {
                  status: ENTERED,
                },
                function () {
                  _this2.props.onEntered(node, appearing);
                },
              );
            });
          },
        );
      };

      _proto.performExit = function performExit(node) {
        var _this3 = this;

        var exit = this.props.exit;
        var timeouts = this.getTimeouts(); // no exit animation skip right to EXITED

        if (!exit) {
          this.safeSetState(
            {
              status: EXITED,
            },
            function () {
              _this3.props.onExited(node);
            },
          );
          return;
        }

        this.props.onExit(node);
        this.safeSetState(
          {
            status: EXITING,
          },
          function () {
            _this3.props.onExiting(node);

            _this3.onTransitionEnd(node, timeouts.exit, function () {
              _this3.safeSetState(
                {
                  status: EXITED,
                },
                function () {
                  _this3.props.onExited(node);
                },
              );
            });
          },
        );
      };

      _proto.cancelNextCallback = function cancelNextCallback() {
        if (this.nextCallback !== null) {
          this.nextCallback.cancel();
          this.nextCallback = null;
        }
      };

      _proto.safeSetState = function safeSetState(nextState, callback) {
        // This shouldn't be necessary, but there are weird race conditions with
        // setState callbacks and unmounting in testing, so always make sure that
        // we can cancel any pending setState callbacks after we unmount.
        callback = this.setNextCallback(callback);
        this.setState(nextState, callback);
      };

      _proto.setNextCallback = function setNextCallback(callback) {
        var _this4 = this;

        var active = true;

        this.nextCallback = function (event) {
          if (active) {
            active = false;
            _this4.nextCallback = null;
            callback(event);
          }
        };

        this.nextCallback.cancel = function () {
          active = false;
        };

        return this.nextCallback;
      };

      _proto.onTransitionEnd = function onTransitionEnd(node, timeout, handler) {
        this.setNextCallback(handler);
        var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;

        if (!node || doesNotHaveTimeoutOrListener) {
          setTimeout(this.nextCallback, 0);
          return;
        }

        if (this.props.addEndListener) {
          this.props.addEndListener(node, this.nextCallback);
        }

        if (timeout != null) {
          setTimeout(this.nextCallback, timeout);
        }
      };

      _proto.render = function render() {
        var status = this.state.status;

        if (status === UNMOUNTED) {
          return null;
        }

        var _this$props = this.props,
          children = _this$props.children,
          childProps = _objectWithoutPropertiesLoose$1(_this$props, ['children']); // filter props for Transtition

        delete childProps.in;
        delete childProps.mountOnEnter;
        delete childProps.unmountOnExit;
        delete childProps.appear;
        delete childProps.enter;
        delete childProps.exit;
        delete childProps.timeout;
        delete childProps.addEndListener;
        delete childProps.onEnter;
        delete childProps.onEntering;
        delete childProps.onEntered;
        delete childProps.onExit;
        delete childProps.onExiting;
        delete childProps.onExited;

        if (typeof children === 'function') {
          return children(status, childProps);
        }

        var child = _react$1.default.Children.only(children);

        return _react$1.default.cloneElement(child, childProps);
      };

      return Transition;
    })(_react$1.default.Component);

  Transition.contextTypes = {
    transitionGroup: PropTypes.object,
  };
  Transition.childContextTypes = {
    transitionGroup: function transitionGroup() {},
  };
  Transition.propTypes = {
    /**
     * A `function` child can be used instead of a React element. This function is
     * called with the current transition status (`'entering'`, `'entered'`,
     * `'exiting'`, `'exited'`, `'unmounted'`), which can be used to apply context
     * specific props to a component.
     *
     * ```jsx
     * <Transition in={this.state.in} timeout={150}>
     *   {state => (
     *     <MyComponent className={`fade fade-${state}`} />
     *   )}
     * </Transition>
     * ```
     */
    children: PropTypes.oneOfType([PropTypes.func.isRequired, PropTypes.element.isRequired]).isRequired,

    /**
     * Show the component; triggers the enter or exit states
     */
    in: PropTypes.bool,

    /**
     * By default the child component is mounted immediately along with
     * the parent `Transition` component. If you want to "lazy mount" the component on the
     * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
     * mounted, even on "exited", unless you also specify `unmountOnExit`.
     */
    mountOnEnter: PropTypes.bool,

    /**
     * By default the child component stays mounted after it reaches the `'exited'` state.
     * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
     */
    unmountOnExit: PropTypes.bool,

    /**
     * Normally a component is not transitioned if it is shown when the `<Transition>` component mounts.
     * If you want to transition on the first mount set `appear` to `true`, and the
     * component will transition in as soon as the `<Transition>` mounts.
     *
     * > Note: there are no specific "appear" states. `appear` only adds an additional `enter` transition.
     */
    appear: PropTypes.bool,

    /**
     * Enable or disable enter transitions.
     */
    enter: PropTypes.bool,

    /**
     * Enable or disable exit transitions.
     */
    exit: PropTypes.bool,

    /**
     * The duration of the transition, in milliseconds.
     * Required unless `addEndListener` is provided.
     *
     * You may specify a single timeout for all transitions:
     *
     * ```jsx
     * timeout={500}
     * ```
     *
     * or individually:
     *
     * ```jsx
     * timeout={{
     *  appear: 500,
     *  enter: 300,
     *  exit: 500,
     * }}
     * ```
     *
     * - `appear` defaults to the value of `enter`
     * - `enter` defaults to `0`
     * - `exit` defaults to `0`
     *
     * @type {number | { enter?: number, exit?: number, appear?: number }}
     */
    timeout: function timeout(props) {
      var pt = _PropTypes.timeoutsShape;
      if (!props.addEndListener) pt = pt.isRequired;

      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      return pt.apply(void 0, [props].concat(args));
    },

    /**
     * Add a custom transition end trigger. Called with the transitioning
     * DOM node and a `done` callback. Allows for more fine grained transition end
     * logic. **Note:** Timeouts are still used as a fallback if provided.
     *
     * ```jsx
     * addEndListener={(node, done) => {
     *   // use the css transitionend event to mark the finish of a transition
     *   node.addEventListener('transitionend', done, false);
     * }}
     * ```
     */
    addEndListener: PropTypes.func,

    /**
     * Callback fired before the "entering" status is applied. An extra parameter
     * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
     *
     * @type Function(node: HtmlElement, isAppearing: bool) -> void
     */
    onEnter: PropTypes.func,

    /**
     * Callback fired after the "entering" status is applied. An extra parameter
     * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
     *
     * @type Function(node: HtmlElement, isAppearing: bool)
     */
    onEntering: PropTypes.func,

    /**
     * Callback fired after the "entered" status is applied. An extra parameter
     * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
     *
     * @type Function(node: HtmlElement, isAppearing: bool) -> void
     */
    onEntered: PropTypes.func,

    /**
     * Callback fired before the "exiting" status is applied.
     *
     * @type Function(node: HtmlElement) -> void
     */
    onExit: PropTypes.func,

    /**
     * Callback fired after the "exiting" status is applied.
     *
     * @type Function(node: HtmlElement) -> void
     */
    onExiting: PropTypes.func,

    /**
     * Callback fired after the "exited" status is applied.
     *
     * @type Function(node: HtmlElement) -> void
     */
    onExited: PropTypes.func, // Name the function so it is clearer in the documentation
  };

  function noop$a() {}

  Transition.defaultProps = {
    in: false,
    mountOnEnter: false,
    unmountOnExit: false,
    appear: false,
    enter: true,
    exit: true,
    onEnter: noop$a,
    onEntering: noop$a,
    onEntered: noop$a,
    onExit: noop$a,
    onExiting: noop$a,
    onExited: noop$a,
  };
  Transition.UNMOUNTED = 0;
  Transition.EXITED = 1;
  Transition.ENTERING = 2;
  Transition.ENTERED = 3;
  Transition.EXITING = 4;

  var _default = (0, _reactLifecyclesCompat.polyfill)(Transition);

  Transition$1.default = _default;

  (function (module, exports) {
    exports.__esModule = true;
    exports.default = void 0;

    var PropTypes = _interopRequireWildcard(propTypes.exports);

    var _addClass = _interopRequireDefault(addClass$1.exports);

    var _removeClass = _interopRequireDefault(removeClass$1);

    var _react = _interopRequireDefault(React__default['default']);

    var _Transition = _interopRequireDefault(Transition$1);

    var _PropTypes = PropTypes$1;

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }

    function _interopRequireWildcard(obj) {
      if (obj && obj.__esModule) {
        return obj;
      } else {
        var newObj = {};
        if (obj != null) {
          for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) {
              var desc =
                Object.defineProperty && Object.getOwnPropertyDescriptor
                  ? Object.getOwnPropertyDescriptor(obj, key)
                  : {};
              if (desc.get || desc.set) {
                Object.defineProperty(newObj, key, desc);
              } else {
                newObj[key] = obj[key];
              }
            }
          }
        }
        newObj.default = obj;
        return newObj;
      }
    }

    function _extends() {
      _extends =
        Object.assign ||
        function (target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
      return _extends.apply(this, arguments);
    }

    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
    }

    var addClass = function addClass(node, classes) {
      return (
        node &&
        classes &&
        classes.split(' ').forEach(function (c) {
          return (0, _addClass.default)(node, c);
        })
      );
    };

    var removeClass = function removeClass(node, classes) {
      return (
        node &&
        classes &&
        classes.split(' ').forEach(function (c) {
          return (0, _removeClass.default)(node, c);
        })
      );
    };
    /**
     * A transition component inspired by the excellent
     * [ng-animate](http://www.nganimate.org/) library, you should use it if you're
     * using CSS transitions or animations. It's built upon the
     * [`Transition`](https://reactcommunity.org/react-transition-group/transition)
     * component, so it inherits all of its props.
     *
     * `CSSTransition` applies a pair of class names during the `appear`, `enter`,
     * and `exit` states of the transition. The first class is applied and then a
     * second `*-active` class in order to activate the CSSS transition. After the
     * transition, matching `*-done` class names are applied to persist the
     * transition state.
     *
     * ```jsx
     * function App() {
     *   const [inProp, setInProp] = useState(false);
     *   return (
     *     <div>
     *       <CSSTransition in={inProp} timeout={200} classNames="my-node">
     *         <div>
     *           {"I'll receive my-node-* classes"}
     *         </div>
     *       </CSSTransition>
     *       <button type="button" onClick={() => setInProp(true)}>
     *         Click to Enter
     *       </button>
     *     </div>
     *   );
     * }
     * ```
     *
     * When the `in` prop is set to `true`, the child component will first receive
     * the class `example-enter`, then the `example-enter-active` will be added in
     * the next tick. `CSSTransition` [forces a
     * reflow](https://github.com/reactjs/react-transition-group/blob/5007303e729a74be66a21c3e2205e4916821524b/src/CSSTransition.js#L208-L215)
     * between before adding the `example-enter-active`. This is an important trick
     * because it allows us to transition between `example-enter` and
     * `example-enter-active` even though they were added immediately one after
     * another. Most notably, this is what makes it possible for us to animate
     * _appearance_.
     *
     * ```css
     * .my-node-enter {
     *   opacity: 0;
     * }
     * .my-node-enter-active {
     *   opacity: 1;
     *   transition: opacity 200ms;
     * }
     * .my-node-exit {
     *   opacity: 1;
     * }
     * .my-node-exit-active {
     *   opacity: 0;
     *   transition: opacity: 200ms;
     * }
     * ```
     *
     * `*-active` classes represent which styles you want to animate **to**.
     */

    var CSSTransition =
      /*#__PURE__*/
      (function (_React$Component) {
        _inheritsLoose(CSSTransition, _React$Component);

        function CSSTransition() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;

          _this.onEnter = function (node, appearing) {
            var _this$getClassNames = _this.getClassNames(appearing ? 'appear' : 'enter'),
              className = _this$getClassNames.className;

            _this.removeClasses(node, 'exit');

            addClass(node, className);

            if (_this.props.onEnter) {
              _this.props.onEnter(node, appearing);
            }
          };

          _this.onEntering = function (node, appearing) {
            var _this$getClassNames2 = _this.getClassNames(appearing ? 'appear' : 'enter'),
              activeClassName = _this$getClassNames2.activeClassName;

            _this.reflowAndAddClass(node, activeClassName);

            if (_this.props.onEntering) {
              _this.props.onEntering(node, appearing);
            }
          };

          _this.onEntered = function (node, appearing) {
            var appearClassName = _this.getClassNames('appear').doneClassName;

            var enterClassName = _this.getClassNames('enter').doneClassName;

            var doneClassName = appearing ? appearClassName + ' ' + enterClassName : enterClassName;

            _this.removeClasses(node, appearing ? 'appear' : 'enter');

            addClass(node, doneClassName);

            if (_this.props.onEntered) {
              _this.props.onEntered(node, appearing);
            }
          };

          _this.onExit = function (node) {
            var _this$getClassNames3 = _this.getClassNames('exit'),
              className = _this$getClassNames3.className;

            _this.removeClasses(node, 'appear');

            _this.removeClasses(node, 'enter');

            addClass(node, className);

            if (_this.props.onExit) {
              _this.props.onExit(node);
            }
          };

          _this.onExiting = function (node) {
            var _this$getClassNames4 = _this.getClassNames('exit'),
              activeClassName = _this$getClassNames4.activeClassName;

            _this.reflowAndAddClass(node, activeClassName);

            if (_this.props.onExiting) {
              _this.props.onExiting(node);
            }
          };

          _this.onExited = function (node) {
            var _this$getClassNames5 = _this.getClassNames('exit'),
              doneClassName = _this$getClassNames5.doneClassName;

            _this.removeClasses(node, 'exit');

            addClass(node, doneClassName);

            if (_this.props.onExited) {
              _this.props.onExited(node);
            }
          };

          _this.getClassNames = function (type) {
            var classNames = _this.props.classNames;
            var isStringClassNames = typeof classNames === 'string';
            var prefix = isStringClassNames && classNames ? classNames + '-' : '';
            var className = isStringClassNames ? prefix + type : classNames[type];
            var activeClassName = isStringClassNames ? className + '-active' : classNames[type + 'Active'];
            var doneClassName = isStringClassNames ? className + '-done' : classNames[type + 'Done'];
            return {
              className: className,
              activeClassName: activeClassName,
              doneClassName: doneClassName,
            };
          };

          return _this;
        }

        var _proto = CSSTransition.prototype;

        _proto.removeClasses = function removeClasses(node, type) {
          var _this$getClassNames6 = this.getClassNames(type),
            className = _this$getClassNames6.className,
            activeClassName = _this$getClassNames6.activeClassName,
            doneClassName = _this$getClassNames6.doneClassName;

          className && removeClass(node, className);
          activeClassName && removeClass(node, activeClassName);
          doneClassName && removeClass(node, doneClassName);
        };

        _proto.reflowAndAddClass = function reflowAndAddClass(node, className) {
          // This is for to force a repaint,
          // which is necessary in order to transition styles when adding a class name.
          if (className) {
            /* eslint-disable no-unused-expressions */
            node && node.scrollTop;
            /* eslint-enable no-unused-expressions */

            addClass(node, className);
          }
        };

        _proto.render = function render() {
          var props = _extends({}, this.props);

          delete props.classNames;
          return _react.default.createElement(
            _Transition.default,
            _extends({}, props, {
              onEnter: this.onEnter,
              onEntered: this.onEntered,
              onEntering: this.onEntering,
              onExit: this.onExit,
              onExiting: this.onExiting,
              onExited: this.onExited,
            }),
          );
        };

        return CSSTransition;
      })(_react.default.Component);

    CSSTransition.defaultProps = {
      classNames: '',
    };
    CSSTransition.propTypes = _extends({}, _Transition.default.propTypes, {
      /**
       * The animation classNames applied to the component as it enters, exits or
       * has finished the transition. A single name can be provided and it will be
       * suffixed for each stage: e.g.
       *
       * `classNames="fade"` applies `fade-enter`, `fade-enter-active`,
       * `fade-enter-done`, `fade-exit`, `fade-exit-active`, `fade-exit-done`,
       * `fade-appear`, `fade-appear-active`, and `fade-appear-done`.
       *
       * **Note**: `fade-appear-done` and `fade-enter-done` will _both_ be applied.
       * This allows you to define different behavior for when appearing is done and
       * when regular entering is done, using selectors like
       * `.fade-enter-done:not(.fade-appear-done)`. For example, you could apply an
       * epic entrance animation when element first appears in the DOM using
       * [Animate.css](https://daneden.github.io/animate.css/). Otherwise you can
       * simply use `fade-enter-done` for defining both cases.
       *
       * Each individual classNames can also be specified independently like:
       *
       * ```js
       * classNames={{
       *  appear: 'my-appear',
       *  appearActive: 'my-active-appear',
       *  appearDone: 'my-done-appear',
       *  enter: 'my-enter',
       *  enterActive: 'my-active-enter',
       *  enterDone: 'my-done-enter',
       *  exit: 'my-exit',
       *  exitActive: 'my-active-exit',
       *  exitDone: 'my-done-exit',
       * }}
       * ```
       *
       * If you want to set these classes using CSS Modules:
       *
       * ```js
       * import styles from './styles.css';
       * ```
       *
       * you might want to use camelCase in your CSS file, that way could simply
       * spread them instead of listing them one by one:
       *
       * ```js
       * classNames={{ ...styles }}
       * ```
       *
       * @type {string | {
       *  appear?: string,
       *  appearActive?: string,
       *  appearDone?: string,
       *  enter?: string,
       *  enterActive?: string,
       *  enterDone?: string,
       *  exit?: string,
       *  exitActive?: string,
       *  exitDone?: string,
       * }}
       */
      classNames: _PropTypes.classNamesShape,

      /**
       * A `<Transition>` callback fired immediately after the 'enter' or 'appear' class is
       * applied.
       *
       * @type Function(node: HtmlElement, isAppearing: bool)
       */
      onEnter: PropTypes.func,

      /**
       * A `<Transition>` callback fired immediately after the 'enter-active' or
       * 'appear-active' class is applied.
       *
       * @type Function(node: HtmlElement, isAppearing: bool)
       */
      onEntering: PropTypes.func,

      /**
       * A `<Transition>` callback fired immediately after the 'enter' or
       * 'appear' classes are **removed** and the `done` class is added to the DOM node.
       *
       * @type Function(node: HtmlElement, isAppearing: bool)
       */
      onEntered: PropTypes.func,

      /**
       * A `<Transition>` callback fired immediately after the 'exit' class is
       * applied.
       *
       * @type Function(node: HtmlElement)
       */
      onExit: PropTypes.func,

      /**
       * A `<Transition>` callback fired immediately after the 'exit-active' is applied.
       *
       * @type Function(node: HtmlElement)
       */
      onExiting: PropTypes.func,

      /**
       * A `<Transition>` callback fired immediately after the 'exit' classes
       * are **removed** and the `exit-done` class is added to the DOM node.
       *
       * @type Function(node: HtmlElement)
       */
      onExited: PropTypes.func,
    });
    var _default = CSSTransition;
    exports.default = _default;
    module.exports = exports['default'];
  })(CSSTransition, CSSTransition.exports);

  var ReplaceTransition = { exports: {} };

  var TransitionGroup = { exports: {} };

  var ChildMapping = {};

  ChildMapping.__esModule = true;
  ChildMapping.getChildMapping = getChildMapping;
  ChildMapping.mergeChildMappings = mergeChildMappings;
  ChildMapping.getInitialChildMapping = getInitialChildMapping;
  ChildMapping.getNextChildMapping = getNextChildMapping;

  var _react = React__default['default'];

  /**
   * Given `this.props.children`, return an object mapping key to child.
   *
   * @param {*} children `this.props.children`
   * @return {object} Mapping of key to child
   */
  function getChildMapping(children, mapFn) {
    var mapper = function mapper(child) {
      return mapFn && (0, _react.isValidElement)(child) ? mapFn(child) : child;
    };

    var result = Object.create(null);
    if (children)
      _react.Children.map(children, function (c) {
        return c;
      }).forEach(function (child) {
        // run the map function here instead so that the key is the computed one
        result[child.key] = mapper(child);
      });
    return result;
  }
  /**
   * When you're adding or removing children some may be added or removed in the
   * same render pass. We want to show *both* since we want to simultaneously
   * animate elements in and out. This function takes a previous set of keys
   * and a new set of keys and merges them with its best guess of the correct
   * ordering. In the future we may expose some of the utilities in
   * ReactMultiChild to make this easy, but for now React itself does not
   * directly have this concept of the union of prevChildren and nextChildren
   * so we implement it here.
   *
   * @param {object} prev prev children as returned from
   * `ReactTransitionChildMapping.getChildMapping()`.
   * @param {object} next next children as returned from
   * `ReactTransitionChildMapping.getChildMapping()`.
   * @return {object} a key set that contains all keys in `prev` and all keys
   * in `next` in a reasonable order.
   */

  function mergeChildMappings(prev, next) {
    prev = prev || {};
    next = next || {};

    function getValueForKey(key) {
      return key in next ? next[key] : prev[key];
    } // For each key of `next`, the list of keys to insert before that key in
    // the combined list

    var nextKeysPending = Object.create(null);
    var pendingKeys = [];

    for (var prevKey in prev) {
      if (prevKey in next) {
        if (pendingKeys.length) {
          nextKeysPending[prevKey] = pendingKeys;
          pendingKeys = [];
        }
      } else {
        pendingKeys.push(prevKey);
      }
    }

    var i;
    var childMapping = {};

    for (var nextKey in next) {
      if (nextKeysPending[nextKey]) {
        for (i = 0; i < nextKeysPending[nextKey].length; i++) {
          var pendingNextKey = nextKeysPending[nextKey][i];
          childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
        }
      }

      childMapping[nextKey] = getValueForKey(nextKey);
    } // Finally, add the keys which didn't appear before any key in `next`

    for (i = 0; i < pendingKeys.length; i++) {
      childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
    }

    return childMapping;
  }

  function getProp(child, prop, props) {
    return props[prop] != null ? props[prop] : child.props[prop];
  }

  function getInitialChildMapping(props, onExited) {
    return getChildMapping(props.children, function (child) {
      return (0, _react.cloneElement)(child, {
        onExited: onExited.bind(null, child),
        in: true,
        appear: getProp(child, 'appear', props),
        enter: getProp(child, 'enter', props),
        exit: getProp(child, 'exit', props),
      });
    });
  }

  function getNextChildMapping(nextProps, prevChildMapping, onExited) {
    var nextChildMapping = getChildMapping(nextProps.children);
    var children = mergeChildMappings(prevChildMapping, nextChildMapping);
    Object.keys(children).forEach(function (key) {
      var child = children[key];
      if (!(0, _react.isValidElement)(child)) return;
      var hasPrev = key in prevChildMapping;
      var hasNext = key in nextChildMapping;
      var prevChild = prevChildMapping[key];
      var isLeaving = (0, _react.isValidElement)(prevChild) && !prevChild.props.in; // item is new (entering)

      if (hasNext && (!hasPrev || isLeaving)) {
        // console.log('entering', key)
        children[key] = (0, _react.cloneElement)(child, {
          onExited: onExited.bind(null, child),
          in: true,
          exit: getProp(child, 'exit', nextProps),
          enter: getProp(child, 'enter', nextProps),
        });
      } else if (!hasNext && hasPrev && !isLeaving) {
        // item is old (exiting)
        // console.log('leaving', key)
        children[key] = (0, _react.cloneElement)(child, {
          in: false,
        });
      } else if (hasNext && hasPrev && (0, _react.isValidElement)(prevChild)) {
        // item hasn't changed transition states
        // copy over the last transition props;
        // console.log('unchanged', key)
        children[key] = (0, _react.cloneElement)(child, {
          onExited: onExited.bind(null, child),
          in: prevChild.props.in,
          exit: getProp(child, 'exit', nextProps),
          enter: getProp(child, 'enter', nextProps),
        });
      }
    });
    return children;
  }

  (function (module, exports) {
    exports.__esModule = true;
    exports.default = void 0;

    var _propTypes = _interopRequireDefault(propTypes.exports);

    var _react = _interopRequireDefault(React__default['default']);

    var _reactLifecyclesCompat = require$$2;

    var _ChildMapping = ChildMapping;

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }

    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }

    function _extends() {
      _extends =
        Object.assign ||
        function (target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
      return _extends.apply(this, arguments);
    }

    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
    }

    function _assertThisInitialized(self) {
      if (self === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self;
    }

    var values =
      Object.values ||
      function (obj) {
        return Object.keys(obj).map(function (k) {
          return obj[k];
        });
      };

    var defaultProps = {
      component: 'div',
      childFactory: function childFactory(child) {
        return child;
      },
      /**
       * The `<TransitionGroup>` component manages a set of transition components
       * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition
       * components, `<TransitionGroup>` is a state machine for managing the mounting
       * and unmounting of components over time.
       *
       * Consider the example below. As items are removed or added to the TodoList the
       * `in` prop is toggled automatically by the `<TransitionGroup>`.
       *
       * Note that `<TransitionGroup>`  does not define any animation behavior!
       * Exactly _how_ a list item animates is up to the individual transition
       * component. This means you can mix and match animations across different list
       * items.
       */
    };

    var TransitionGroup =
      /*#__PURE__*/
      (function (_React$Component) {
        _inheritsLoose(TransitionGroup, _React$Component);

        function TransitionGroup(props, context) {
          var _this;

          _this = _React$Component.call(this, props, context) || this;

          var handleExited = _this.handleExited.bind(_assertThisInitialized(_assertThisInitialized(_this))); // Initial children should all be entering, dependent on appear

          _this.state = {
            handleExited: handleExited,
            firstRender: true,
          };
          return _this;
        }

        var _proto = TransitionGroup.prototype;

        _proto.getChildContext = function getChildContext() {
          return {
            transitionGroup: {
              isMounting: !this.appeared,
            },
          };
        };

        _proto.componentDidMount = function componentDidMount() {
          this.appeared = true;
          this.mounted = true;
        };

        _proto.componentWillUnmount = function componentWillUnmount() {
          this.mounted = false;
        };

        TransitionGroup.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
          var prevChildMapping = _ref.children,
            handleExited = _ref.handleExited,
            firstRender = _ref.firstRender;
          return {
            children: firstRender
              ? (0, _ChildMapping.getInitialChildMapping)(nextProps, handleExited)
              : (0, _ChildMapping.getNextChildMapping)(nextProps, prevChildMapping, handleExited),
            firstRender: false,
          };
        };

        _proto.handleExited = function handleExited(child, node) {
          var currentChildMapping = (0, _ChildMapping.getChildMapping)(this.props.children);
          if (child.key in currentChildMapping) return;

          if (child.props.onExited) {
            child.props.onExited(node);
          }

          if (this.mounted) {
            this.setState(function (state) {
              var children = _extends({}, state.children);

              delete children[child.key];
              return {
                children: children,
              };
            });
          }
        };

        _proto.render = function render() {
          var _this$props = this.props,
            Component = _this$props.component,
            childFactory = _this$props.childFactory,
            props = _objectWithoutPropertiesLoose(_this$props, ['component', 'childFactory']);

          var children = values(this.state.children).map(childFactory);
          delete props.appear;
          delete props.enter;
          delete props.exit;

          if (Component === null) {
            return children;
          }

          return _react.default.createElement(Component, props, children);
        };

        return TransitionGroup;
      })(_react.default.Component);

    TransitionGroup.childContextTypes = {
      transitionGroup: _propTypes.default.object.isRequired,
    };
    TransitionGroup.propTypes = {
      /**
       * `<TransitionGroup>` renders a `<div>` by default. You can change this
       * behavior by providing a `component` prop.
       * If you use React v16+ and would like to avoid a wrapping `<div>` element
       * you can pass in `component={null}`. This is useful if the wrapping div
       * borks your css styles.
       */
      component: _propTypes.default.any,

      /**
       * A set of `<Transition>` components, that are toggled `in` and out as they
       * leave. the `<TransitionGroup>` will inject specific transition props, so
       * remember to spread them through if you are wrapping the `<Transition>` as
       * with our `<Fade>` example.
       *
       * While this component is meant for multiple `Transition` or `CSSTransition`
       * children, sometimes you may want to have a single transition child with
       * content that you want to be transitioned out and in when you change it
       * (e.g. routes, images etc.) In that case you can change the `key` prop of
       * the transition child as you change its content, this will cause
       * `TransitionGroup` to transition the child out and back in.
       */
      children: _propTypes.default.node,

      /**
       * A convenience prop that enables or disables appear animations
       * for all children. Note that specifying this will override any defaults set
       * on individual children Transitions.
       */
      appear: _propTypes.default.bool,

      /**
       * A convenience prop that enables or disables enter animations
       * for all children. Note that specifying this will override any defaults set
       * on individual children Transitions.
       */
      enter: _propTypes.default.bool,

      /**
       * A convenience prop that enables or disables exit animations
       * for all children. Note that specifying this will override any defaults set
       * on individual children Transitions.
       */
      exit: _propTypes.default.bool,

      /**
       * You may need to apply reactive updates to a child as it is exiting.
       * This is generally done by using `cloneElement` however in the case of an exiting
       * child the element has already been removed and not accessible to the consumer.
       *
       * If you do need to update a child as it leaves you can provide a `childFactory`
       * to wrap every child, even the ones that are leaving.
       *
       * @type Function(child: ReactElement) -> ReactElement
       */
      childFactory: _propTypes.default.func,
    };
    TransitionGroup.defaultProps = defaultProps;

    var _default = (0, _reactLifecyclesCompat.polyfill)(TransitionGroup);

    exports.default = _default;
    module.exports = exports['default'];
  })(TransitionGroup, TransitionGroup.exports);

  (function (module, exports) {
    exports.__esModule = true;
    exports.default = void 0;

    var _propTypes = _interopRequireDefault(propTypes.exports);

    var _react = _interopRequireDefault(React__default['default']);

    var _reactDom = ReactDOM__default['default'];

    var _TransitionGroup = _interopRequireDefault(TransitionGroup.exports);

    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }

    function _objectWithoutPropertiesLoose(source, excluded) {
      if (source == null) return {};
      var target = {};
      var sourceKeys = Object.keys(source);
      var key, i;
      for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
      }
      return target;
    }

    function _inheritsLoose(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
    }

    /**
     * The `<ReplaceTransition>` component is a specialized `Transition` component
     * that animates between two children.
     *
     * ```jsx
     * <ReplaceTransition in>
     *   <Fade><div>I appear first</div></Fade>
     *   <Fade><div>I replace the above</div></Fade>
     * </ReplaceTransition>
     * ```
     */
    var ReplaceTransition =
      /*#__PURE__*/
      (function (_React$Component) {
        _inheritsLoose(ReplaceTransition, _React$Component);

        function ReplaceTransition() {
          var _this;

          for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
            _args[_key] = arguments[_key];
          }

          _this = _React$Component.call.apply(_React$Component, [this].concat(_args)) || this;

          _this.handleEnter = function () {
            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
              args[_key2] = arguments[_key2];
            }

            return _this.handleLifecycle('onEnter', 0, args);
          };

          _this.handleEntering = function () {
            for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
              args[_key3] = arguments[_key3];
            }

            return _this.handleLifecycle('onEntering', 0, args);
          };

          _this.handleEntered = function () {
            for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
              args[_key4] = arguments[_key4];
            }

            return _this.handleLifecycle('onEntered', 0, args);
          };

          _this.handleExit = function () {
            for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
              args[_key5] = arguments[_key5];
            }

            return _this.handleLifecycle('onExit', 1, args);
          };

          _this.handleExiting = function () {
            for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
              args[_key6] = arguments[_key6];
            }

            return _this.handleLifecycle('onExiting', 1, args);
          };

          _this.handleExited = function () {
            for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
              args[_key7] = arguments[_key7];
            }

            return _this.handleLifecycle('onExited', 1, args);
          };

          return _this;
        }

        var _proto = ReplaceTransition.prototype;

        _proto.handleLifecycle = function handleLifecycle(handler, idx, originalArgs) {
          var _child$props;

          var children = this.props.children;

          var child = _react.default.Children.toArray(children)[idx];

          if (child.props[handler]) (_child$props = child.props)[handler].apply(_child$props, originalArgs);
          if (this.props[handler]) this.props[handler]((0, _reactDom.findDOMNode)(this));
        };

        _proto.render = function render() {
          var _this$props = this.props,
            children = _this$props.children,
            inProp = _this$props.in,
            props = _objectWithoutPropertiesLoose(_this$props, ['children', 'in']);

          var _React$Children$toArr = _react.default.Children.toArray(children),
            first = _React$Children$toArr[0],
            second = _React$Children$toArr[1];

          delete props.onEnter;
          delete props.onEntering;
          delete props.onEntered;
          delete props.onExit;
          delete props.onExiting;
          delete props.onExited;
          return _react.default.createElement(
            _TransitionGroup.default,
            props,
            inProp
              ? _react.default.cloneElement(first, {
                  key: 'first',
                  onEnter: this.handleEnter,
                  onEntering: this.handleEntering,
                  onEntered: this.handleEntered,
                })
              : _react.default.cloneElement(second, {
                  key: 'second',
                  onEnter: this.handleExit,
                  onEntering: this.handleExiting,
                  onEntered: this.handleExited,
                }),
          );
        };

        return ReplaceTransition;
      })(_react.default.Component);

    ReplaceTransition.propTypes = {
      in: _propTypes.default.bool.isRequired,
      children: function children(props, propName) {
        if (_react.default.Children.count(props[propName]) !== 2)
          return new Error('"' + propName + '" must be exactly two transition components.');
        return null;
      },
    };
    var _default = ReplaceTransition;
    exports.default = _default;
    module.exports = exports['default'];
  })(ReplaceTransition, ReplaceTransition.exports);

  var _CSSTransition = _interopRequireDefault(CSSTransition.exports);

  var _ReplaceTransition = _interopRequireDefault(ReplaceTransition.exports);

  var _TransitionGroup = _interopRequireDefault(TransitionGroup.exports);

  var _Transition = _interopRequireDefault(Transition$1);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }

  var reactTransitionGroup = {
    Transition: _Transition.default,
    TransitionGroup: _TransitionGroup.default,
    ReplaceTransition: _ReplaceTransition.default,
    CSSTransition: _CSSTransition.default,
  };

  var _class$n, _temp$k;

  var noop$9 = function noop() {};
  var on = events.on,
    off = events.off;
  var addClass = dom.addClass,
    removeClass = dom.removeClass;

  var prefixes$1 = ['-webkit-', '-moz-', '-o-', 'ms-', ''];

  function getStyleProperty$1(node, name) {
    var style = window.getComputedStyle(node);
    var ret = '';
    for (var i = 0; i < prefixes$1.length; i++) {
      ret = style.getPropertyValue(prefixes$1[i] + name);
      if (ret) {
        break;
      }
    }
    return ret;
  }

  var AnimateChild =
    ((_temp$k = _class$n =
      (function (_Component) {
        _default$2(AnimateChild, _Component);

        function AnimateChild(props) {
          _default$5(this, AnimateChild);

          var _this2 = _default$3(this, _Component.call(this, props));

          func.bindCtx(_this2, [
            'handleEnter',
            'handleEntering',
            'handleEntered',
            'handleExit',
            'handleExiting',
            'handleExited',
            'addEndListener',
          ]);
          _this2.endListeners = {
            transitionend: [],
            animationend: [],
          };
          _this2.timeoutMap = {};
          return _this2;
        }

        AnimateChild.prototype.componentWillUnmount = function componentWillUnmount() {
          var _this3 = this;

          Object.keys(this.endListeners).forEach(function (eventName) {
            _this3.endListeners[eventName].forEach(function (listener) {
              off(_this3.node, eventName, listener);
            });
          });
          this.endListeners = {
            transitionend: [],
            animationend: [],
          };
        };

        AnimateChild.prototype.generateEndListener = function generateEndListener(node, done, eventName, id) {
          var _this = this;
          return function endListener(e) {
            if (e && e.target === node) {
              if (_this.timeoutMap[id]) {
                clearTimeout(_this.timeoutMap[id]);
                delete _this.timeoutMap[id];
              }

              done();
              off(node, eventName, endListener);
              var listeners = _this.endListeners[eventName];
              var index = listeners.indexOf(endListener);
              index > -1 && listeners.splice(index, 1);
            }
          };
        };

        AnimateChild.prototype.addEndListener = function addEndListener(node, done) {
          var _this4 = this;

          if (support.transition || support.animation) {
            var id = guid();

            this.node = node;
            if (support.transition) {
              var transitionEndListener = this.generateEndListener(node, done, 'transitionend', id);
              on(node, 'transitionend', transitionEndListener);
              this.endListeners.transitionend.push(transitionEndListener);
            }
            if (support.animation) {
              var animationEndListener = this.generateEndListener(node, done, 'animationend', id);
              on(node, 'animationend', animationEndListener);
              this.endListeners.animationend.push(animationEndListener);
            }

            setTimeout(function () {
              var transitionDelay = parseFloat(getStyleProperty$1(node, 'transition-delay')) || 0;
              var transitionDuration = parseFloat(getStyleProperty$1(node, 'transition-duration')) || 0;
              var animationDelay = parseFloat(getStyleProperty$1(node, 'animation-delay')) || 0;
              var animationDuration = parseFloat(getStyleProperty$1(node, 'animation-duration')) || 0;
              var time = Math.max(transitionDuration + transitionDelay, animationDuration + animationDelay);
              if (time) {
                _this4.timeoutMap[id] = setTimeout(function () {
                  done();
                }, time * 1000 + 200);
              }
            }, 15);
          } else {
            done();
          }
        };

        AnimateChild.prototype.removeEndtListener = function removeEndtListener() {
          this.transitionOff && this.transitionOff();
          this.animationOff && this.animationOff();
        };

        AnimateChild.prototype.removeClassNames = function removeClassNames(node, names) {
          Object.keys(names).forEach(function (key) {
            removeClass(node, names[key]);
          });
        };

        AnimateChild.prototype.handleEnter = function handleEnter(node, isAppearing) {
          var names = this.props.names;

          if (names) {
            this.removeClassNames(node, names);
            var className = isAppearing ? 'appear' : 'enter';
            addClass(node, names[className]);
          }

          var hook = isAppearing ? this.props.onAppear : this.props.onEnter;
          hook(node);
        };

        AnimateChild.prototype.handleEntering = function handleEntering(node, isAppearing) {
          var _this5 = this;

          setTimeout(function () {
            var names = _this5.props.names;

            if (names) {
              var className = isAppearing ? 'appearActive' : 'enterActive';
              addClass(node, names[className]);
            }

            var hook = isAppearing ? _this5.props.onAppearing : _this5.props.onEntering;
            hook(node);
          }, 10);
        };

        AnimateChild.prototype.handleEntered = function handleEntered(node, isAppearing) {
          var names = this.props.names;

          if (names) {
            var classNames = isAppearing ? [names.appear, names.appearActive] : [names.enter, names.enterActive];
            classNames.forEach(function (className) {
              removeClass(node, className);
            });
          }

          var hook = isAppearing ? this.props.onAppeared : this.props.onEntered;
          hook(node);
        };

        AnimateChild.prototype.handleExit = function handleExit(node) {
          var names = this.props.names;

          if (names) {
            this.removeClassNames(node, names);
            addClass(node, names.leave);
          }

          this.props.onExit(node);
        };

        AnimateChild.prototype.handleExiting = function handleExiting(node) {
          var _this6 = this;

          setTimeout(function () {
            var names = _this6.props.names;

            if (names) {
              addClass(node, names.leaveActive);
            }
            _this6.props.onExiting(node);
          }, 10);
        };

        AnimateChild.prototype.handleExited = function handleExited(node) {
          var names = this.props.names;

          if (names) {
            [names.leave, names.leaveActive].forEach(function (className) {
              removeClass(node, className);
            });
          }

          this.props.onExited(node);
        };

        AnimateChild.prototype.render = function render() {
          /* eslint-disable no-unused-vars */
          var _props = this.props;
          _props.names;
          _props.onAppear;
          _props.onAppeared;
          _props.onAppearing;
          _props.onEnter;
          _props.onEntering;
          _props.onEntered;
          _props.onExit;
          _props.onExiting;
          _props.onExited;
          var others = _default$1(_props, [
            'names',
            'onAppear',
            'onAppeared',
            'onAppearing',
            'onEnter',
            'onEntering',
            'onEntered',
            'onExit',
            'onExiting',
            'onExited',
          ]);
          /* eslint-enable no-unused-vars */

          return React__default['default'].createElement(
            reactTransitionGroup.Transition,
            _default$6({}, others, {
              onEnter: this.handleEnter,
              onEntering: this.handleEntering,
              onEntered: this.handleEntered,
              onExit: this.handleExit,
              onExiting: this.handleExiting,
              onExited: this.handleExited,
              addEndListener: this.addEndListener,
            }),
          );
        };

        return AnimateChild;
      })(React.Component)),
    (_class$n.propTypes = {
      names: PropTypes$2.oneOfType([PropTypes$2.string, PropTypes$2.object]),
      onAppear: PropTypes$2.func,
      onAppearing: PropTypes$2.func,
      onAppeared: PropTypes$2.func,
      onEnter: PropTypes$2.func,
      onEntering: PropTypes$2.func,
      onEntered: PropTypes$2.func,
      onExit: PropTypes$2.func,
      onExiting: PropTypes$2.func,
      onExited: PropTypes$2.func,
    }),
    (_class$n.defaultProps = {
      onAppear: noop$9,
      onAppearing: noop$9,
      onAppeared: noop$9,
      onEnter: noop$9,
      onEntering: noop$9,
      onEntered: noop$9,
      onExit: noop$9,
      onExiting: noop$9,
      onExited: noop$9,
    }),
    _temp$k);
  AnimateChild.displayName = 'AnimateChild';

  var _class$m, _temp$j;

  var noop$8 = function noop() {};
  var FirstChild = function FirstChild(props) {
    var childrenArray = React__default['default'].Children.toArray(props.children);
    return childrenArray[0] || null;
  };

  /**
   * Animate
   */
  var Animate =
    ((_temp$j = _class$m =
      (function (_Component) {
        _default$2(Animate, _Component);

        function Animate() {
          _default$5(this, Animate);

          return _default$3(this, _Component.apply(this, arguments));
        }

        Animate.prototype.normalizeNames = function normalizeNames(names) {
          if (typeof names === 'string') {
            return {
              appear: names + '-appear',
              appearActive: names + '-appear-active',
              enter: names + '-enter',
              enterActive: names + '-enter-active',
              leave: names + '-leave',
              leaveActive: names + '-leave-active',
            };
          }
          if ((typeof names === 'undefined' ? 'undefined' : _default$4(names)) === 'object') {
            return {
              appear: names.appear,
              appearActive: names.appear + '-active',
              enter: '' + names.enter,
              enterActive: names.enter + '-active',
              leave: '' + names.leave,
              leaveActive: names.leave + '-active',
            };
          }
        };

        Animate.prototype.render = function render() {
          var _this2 = this;

          /* eslint-disable no-unused-vars */
          var _props = this.props,
            animation = _props.animation,
            children = _props.children,
            animationAppear = _props.animationAppear,
            singleMode = _props.singleMode,
            component = _props.component,
            beforeAppear = _props.beforeAppear,
            onAppear = _props.onAppear,
            afterAppear = _props.afterAppear,
            beforeEnter = _props.beforeEnter,
            onEnter = _props.onEnter,
            afterEnter = _props.afterEnter,
            beforeLeave = _props.beforeLeave,
            onLeave = _props.onLeave,
            afterLeave = _props.afterLeave,
            others = _default$1(_props, [
              'animation',
              'children',
              'animationAppear',
              'singleMode',
              'component',
              'beforeAppear',
              'onAppear',
              'afterAppear',
              'beforeEnter',
              'onEnter',
              'afterEnter',
              'beforeLeave',
              'onLeave',
              'afterLeave',
            ]);
          /* eslint-enable no-unused-vars */

          var animateChildren = React.Children.map(children, function (child) {
            return React__default['default'].createElement(
              AnimateChild,
              {
                key: child.key,
                names: _this2.normalizeNames(animation),
                onAppear: beforeAppear,
                onAppearing: onAppear,
                onAppeared: afterAppear,
                onEnter: beforeEnter,
                onEntering: onEnter,
                onEntered: afterEnter,
                onExit: beforeLeave,
                onExiting: onLeave,
                onExited: afterLeave,
              },
              child,
            );
          });

          return React__default['default'].createElement(
            reactTransitionGroup.TransitionGroup,
            _default$6(
              {
                appear: animationAppear,
                component: singleMode ? FirstChild : component,
              },
              others,
            ),
            animateChildren,
          );
        };

        return Animate;
      })(React.Component)),
    (_class$m.propTypes = {
      /**
       * 动画 className
       */
      animation: PropTypes$2.oneOfType([PropTypes$2.string, PropTypes$2.object]),
      /**
       * 子元素第一次挂载时是否执行动画
       */
      animationAppear: PropTypes$2.bool,
      /**
       * 包裹子元素的标签
       */
      component: PropTypes$2.any,
      /**
       * 是否只有单个子元素，如果有多个子元素，请设置为 false
       */
      singleMode: PropTypes$2.bool,
      /**
       * 子元素
       */
      children: PropTypes$2.oneOfType([PropTypes$2.element, PropTypes$2.arrayOf(PropTypes$2.element)]),
      /**
       * 执行第一次挂载动画前触发的回调函数
       * @param {HTMLElement} node 执行动画的 dom 元素
       */
      beforeAppear: PropTypes$2.func,
      /**
       * 执行第一次挂载动画，添加 xxx-appear-active 类名后触发的回调函数
       *  @param {HTMLElement} node 执行动画的 dom 元素
       */
      onAppear: PropTypes$2.func,
      /**
       * 执行完第一次挂载动画后触发的函数
       * @param {HTMLElement} node 执行动画的 dom 元素
       */
      afterAppear: PropTypes$2.func,
      /**
       * 执行进场动画前触发的回调函数
       * @param {HTMLElement} node 执行动画的 dom 元素
       */
      beforeEnter: PropTypes$2.func,
      /**
       * 执行进场动画，添加 xxx-enter-active 类名后触发的回调函数
       * @param {HTMLElement} node 执行动画的 dom 元素
       */
      onEnter: PropTypes$2.func,
      /**
       * 执行完进场动画后触发的回调函数
       * @param {HTMLElement} node 执行动画的 dom 元素
       */
      afterEnter: PropTypes$2.func,
      /**
       * 执行离场动画前触发的回调函数
       * @param {HTMLElement} node 执行动画的 dom 元素
       */
      beforeLeave: PropTypes$2.func,
      /**
       * 执行离场动画，添加 xxx-leave-active 类名后触发的回调函数
       * @param {HTMLElement} node 执行动画的 dom 元素
       */
      onLeave: PropTypes$2.func,
      /**
       * 执行完离场动画后触发的回调函数
       * @param {HTMLElement} node 执行动画的 dom 元素
       */
      afterLeave: PropTypes$2.func,
    }),
    (_class$m.defaultProps = {
      animationAppear: true,
      component: 'div',
      singleMode: true,
      beforeAppear: noop$8,
      onAppear: noop$8,
      afterAppear: noop$8,
      beforeEnter: noop$8,
      onEnter: noop$8,
      afterEnter: noop$8,
      beforeLeave: noop$8,
      onLeave: noop$8,
      afterLeave: noop$8,
    }),
    _temp$j);
  Animate.displayName = 'Animate';

  var Animate$1 = Animate;

  var _class$l, _temp$i;

  var noop$7 = function noop() {};
  var getStyle$2 = dom.getStyle;
  var Expand =
    ((_temp$i = _class$l =
      (function (_Component) {
        _default$2(Expand, _Component);

        function Expand(props) {
          _default$5(this, Expand);

          var _this = _default$3(this, _Component.call(this, props));

          func.bindCtx(_this, ['beforeEnter', 'onEnter', 'afterEnter', 'beforeLeave', 'onLeave', 'afterLeave']);
          return _this;
        }

        Expand.prototype.beforeEnter = function beforeEnter(node) {
          if (this.leaving) {
            this.afterLeave(node);
          }

          this.cacheCurrentStyle(node);
          this.cacheComputedStyle(node);
          this.setCurrentStyleToZero(node);

          this.props.beforeEnter(node);
        };

        Expand.prototype.onEnter = function onEnter(node) {
          this.setCurrentStyleToComputedStyle(node);

          this.props.onEnter(node);
        };

        Expand.prototype.afterEnter = function afterEnter(node) {
          this.restoreCurrentStyle(node);

          this.props.afterEnter(node);
        };

        Expand.prototype.beforeLeave = function beforeLeave(node) {
          this.leaving = true;

          this.cacheCurrentStyle(node);
          this.cacheComputedStyle(node);
          this.setCurrentStyleToComputedStyle(node);

          this.props.beforeLeave(node);
        };

        Expand.prototype.onLeave = function onLeave(node) {
          this.setCurrentStyleToZero(node);

          this.props.onLeave(node);
        };

        Expand.prototype.afterLeave = function afterLeave(node) {
          this.leaving = false;

          this.restoreCurrentStyle(node);

          this.props.afterLeave(node);
        };

        Expand.prototype.cacheCurrentStyle = function cacheCurrentStyle(node) {
          this.styleBorderTopWidth = node.style.borderTopWidth;
          this.stylePaddingTop = node.style.paddingTop;
          this.styleHeight = node.style.height;
          this.stylePaddingBottom = node.style.paddingBottom;
          this.styleBorderBottomWidth = node.style.borderBottomWidth;
        };

        Expand.prototype.cacheComputedStyle = function cacheComputedStyle(node) {
          this.borderTopWidth = getStyle$2(node, 'borderTopWidth');
          this.paddingTop = getStyle$2(node, 'paddingTop');
          this.height = node.offsetHeight;
          this.paddingBottom = getStyle$2(node, 'paddingBottom');
          this.borderBottomWidth = getStyle$2(node, 'borderBottomWidth');
        };

        Expand.prototype.setCurrentStyleToZero = function setCurrentStyleToZero(node) {
          node.style.borderTopWidth = '0px';
          node.style.paddingTop = '0px';
          node.style.height = '0px';
          node.style.paddingBottom = '0px';
          node.style.borderBottomWidth = '0px';
        };

        Expand.prototype.setCurrentStyleToComputedStyle = function setCurrentStyleToComputedStyle(node) {
          node.style.borderTopWidth = this.borderTopWidth + 'px';
          node.style.paddingTop = this.paddingTop + 'px';
          node.style.height = this.height + 'px';
          node.style.paddingBottom = this.paddingBottom + 'px';
          node.style.borderBottomWidth = this.borderBottomWidth + 'px';
        };

        Expand.prototype.restoreCurrentStyle = function restoreCurrentStyle(node) {
          node.style.borderTopWidth = this.styleBorderTopWidth;
          node.style.paddingTop = this.stylePaddingTop;
          node.style.height = this.styleHeight;
          node.style.paddingBottom = this.stylePaddingBottom;
          node.style.borderBottomWidth = this.styleBorderBottomWidth;
        };

        Expand.prototype.render = function render() {
          var _props = this.props,
            animation = _props.animation,
            others = _default$1(_props, ['animation']);

          var newAnimation = animation || 'expand';

          return React__default['default'].createElement(
            Animate$1,
            _default$6({}, others, {
              animation: newAnimation,
              beforeEnter: this.beforeEnter,
              onEnter: this.onEnter,
              afterEnter: this.afterEnter,
              beforeLeave: this.beforeLeave,
              onLeave: this.onLeave,
              afterLeave: this.afterLeave,
            }),
          );
        };

        return Expand;
      })(React.Component)),
    (_class$l.propTypes = {
      animation: PropTypes$2.oneOfType([PropTypes$2.string, PropTypes$2.object]),
      beforeEnter: PropTypes$2.func,
      onEnter: PropTypes$2.func,
      afterEnter: PropTypes$2.func,
      beforeLeave: PropTypes$2.func,
      onLeave: PropTypes$2.func,
      afterLeave: PropTypes$2.func,
    }),
    (_class$l.defaultProps = {
      beforeEnter: noop$7,
      onEnter: noop$7,
      afterEnter: noop$7,
      beforeLeave: noop$7,
      onLeave: noop$7,
      afterLeave: noop$7,
    }),
    _temp$i);
  Expand.displayName = 'Expand';

  Animate$1.Expand = Expand;

  var overlayManager = {
    allOverlays: [],

    addOverlay: function addOverlay(overlay) {
      this.removeOverlay(overlay);
      this.allOverlays.unshift(overlay);
    },
    isCurrentOverlay: function isCurrentOverlay(overlay) {
      return overlay && this.allOverlays[0] === overlay;
    },
    removeOverlay: function removeOverlay(overlay) {
      var i = this.allOverlays.indexOf(overlay);
      if (i > -1) {
        this.allOverlays.splice(i, 1);
      }
    },
  };

  var overlayManager$1 = overlayManager;

  function findNode(target, param) {
    if (!target) {
      return null;
    }

    if (typeof target === 'string') {
      return document.getElementById(target);
    }

    if (typeof target === 'function') {
      try {
        target = target(param);
      } catch (err) {
        target = null;
      }
    }

    if (!target) {
      return null;
    }

    try {
      return ReactDOM.findDOMNode(target);
    } catch (err) {
      return target;
    }
  }

  var _class$k, _temp$h;

  var makeChain$2 = func.makeChain;

  var getContainerNode$1 = function getContainerNode(props) {
    var targetNode = findNode(props.target);
    return findNode(props.container, targetNode);
  };

  var Gateway =
    ((_temp$h = _class$k =
      (function (_Component) {
        _default$2(Gateway, _Component);

        function Gateway(props) {
          _default$5(this, Gateway);

          var _this = _default$3(this, _Component.call(this, props));

          _this.updateContainer = function () {
            var containerNode = getContainerNode$1(_this.props);

            if (containerNode !== _this.state.containerNode) {
              // eslint-disable-next-line
              _this.setState({
                containerNode: containerNode,
              });
            }
          };

          _this.saveChildRef = function (ref) {
            _this.child = ref;
          };

          _this.state = {
            containerNode: null,
          };
          return _this;
        }

        Gateway.prototype.componentDidMount = function componentDidMount() {
          this.updateContainer();
        };

        Gateway.prototype.componentDidUpdate = function componentDidUpdate() {
          this.updateContainer();
        };

        Gateway.prototype.getChildNode = function getChildNode() {
          try {
            return ReactDOM.findDOMNode(this.child);
          } catch (err) {
            return null;
          }
        };

        Gateway.prototype.render = function render() {
          var containerNode = this.state.containerNode;

          if (!containerNode) {
            return null;
          }

          var children = this.props.children;

          var child = children ? React.Children.only(children) : null;
          if (!child) {
            return null;
          }

          if (typeof child.ref === 'string') {
            throw new Error('Can not set ref by string in Gateway, use function instead.');
          }
          child = React__default['default'].cloneElement(child, {
            ref: makeChain$2(this.saveChildRef, child.ref),
          });

          return ReactDOM.createPortal(child, containerNode);
        };

        return Gateway;
      })(React.Component)),
    (_class$k.propTypes = {
      children: PropTypes$2.node,
      container: PropTypes$2.any,
      target: PropTypes$2.any,
    }),
    (_class$k.defaultProps = {
      container: function container() {
        return document.body;
      },
    }),
    _temp$h);
  Gateway.displayName = 'Gateway';

  var Gateway$1 = polyfill(Gateway);

  /**
   * A collection of shims that provide minimal functionality of the ES6 collections.
   *
   * These implementations are not meant to be used outside of the ResizeObserver
   * modules as they cover only a limited range of use cases.
   */
  /* eslint-disable require-jsdoc, valid-jsdoc */
  var MapShim = (function () {
    if (typeof Map !== 'undefined') {
      return Map;
    }
    /**
     * Returns index in provided array that matches the specified key.
     *
     * @param {Array<Array>} arr
     * @param {*} key
     * @returns {number}
     */
    function getIndex(arr, key) {
      var result = -1;
      arr.some(function (entry, index) {
        if (entry[0] === key) {
          result = index;
          return true;
        }
        return false;
      });
      return result;
    }
    return /** @class */ (function () {
      function class_1() {
        this.__entries__ = [];
      }
      Object.defineProperty(class_1.prototype, 'size', {
        /**
         * @returns {boolean}
         */
        get: function () {
          return this.__entries__.length;
        },
        enumerable: true,
        configurable: true,
      });
      /**
       * @param {*} key
       * @returns {*}
       */
      class_1.prototype.get = function (key) {
        var index = getIndex(this.__entries__, key);
        var entry = this.__entries__[index];
        return entry && entry[1];
      };
      /**
       * @param {*} key
       * @param {*} value
       * @returns {void}
       */
      class_1.prototype.set = function (key, value) {
        var index = getIndex(this.__entries__, key);
        if (~index) {
          this.__entries__[index][1] = value;
        } else {
          this.__entries__.push([key, value]);
        }
      };
      /**
       * @param {*} key
       * @returns {void}
       */
      class_1.prototype.delete = function (key) {
        var entries = this.__entries__;
        var index = getIndex(entries, key);
        if (~index) {
          entries.splice(index, 1);
        }
      };
      /**
       * @param {*} key
       * @returns {void}
       */
      class_1.prototype.has = function (key) {
        return !!~getIndex(this.__entries__, key);
      };
      /**
       * @returns {void}
       */
      class_1.prototype.clear = function () {
        this.__entries__.splice(0);
      };
      /**
       * @param {Function} callback
       * @param {*} [ctx=null]
       * @returns {void}
       */
      class_1.prototype.forEach = function (callback, ctx) {
        if (ctx === void 0) {
          ctx = null;
        }
        for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {
          var entry = _a[_i];
          callback.call(ctx, entry[1], entry[0]);
        }
      };
      return class_1;
    })();
  })();

  /**
   * Detects whether window and document objects are available in current environment.
   */
  var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && window.document === document;

  // Returns global object of a current environment.
  var global$1 = (function () {
    if (typeof global !== 'undefined' && global.Math === Math) {
      return global;
    }
    if (typeof self !== 'undefined' && self.Math === Math) {
      return self;
    }
    if (typeof window !== 'undefined' && window.Math === Math) {
      return window;
    }
    // eslint-disable-next-line no-new-func
    return Function('return this')();
  })();

  /**
   * A shim for the requestAnimationFrame which falls back to the setTimeout if
   * first one is not supported.
   *
   * @returns {number} Requests' identifier.
   */
  var requestAnimationFrame$1 = (function () {
    if (typeof requestAnimationFrame === 'function') {
      // It's required to use a bounded function because IE sometimes throws
      // an "Invalid calling object" error if rAF is invoked without the global
      // object on the left hand side.
      return requestAnimationFrame.bind(global$1);
    }
    return function (callback) {
      return setTimeout(function () {
        return callback(Date.now());
      }, 1000 / 60);
    };
  })();

  // Defines minimum timeout before adding a trailing call.
  var trailingTimeout = 2;
  /**
   * Creates a wrapper function which ensures that provided callback will be
   * invoked only once during the specified delay period.
   *
   * @param {Function} callback - Function to be invoked after the delay period.
   * @param {number} delay - Delay after which to invoke callback.
   * @returns {Function}
   */
  function throttle(callback, delay) {
    var leadingCall = false,
      trailingCall = false,
      lastCallTime = 0;
    /**
     * Invokes the original callback function and schedules new invocation if
     * the "proxy" was called during current request.
     *
     * @returns {void}
     */
    function resolvePending() {
      if (leadingCall) {
        leadingCall = false;
        callback();
      }
      if (trailingCall) {
        proxy();
      }
    }
    /**
     * Callback invoked after the specified delay. It will further postpone
     * invocation of the original function delegating it to the
     * requestAnimationFrame.
     *
     * @returns {void}
     */
    function timeoutCallback() {
      requestAnimationFrame$1(resolvePending);
    }
    /**
     * Schedules invocation of the original function.
     *
     * @returns {void}
     */
    function proxy() {
      var timeStamp = Date.now();
      if (leadingCall) {
        // Reject immediately following calls.
        if (timeStamp - lastCallTime < trailingTimeout) {
          return;
        }
        // Schedule new call to be in invoked when the pending one is resolved.
        // This is important for "transitions" which never actually start
        // immediately so there is a chance that we might miss one if change
        // happens amids the pending invocation.
        trailingCall = true;
      } else {
        leadingCall = true;
        trailingCall = false;
        setTimeout(timeoutCallback, delay);
      }
      lastCallTime = timeStamp;
    }
    return proxy;
  }

  // Minimum delay before invoking the update of observers.
  var REFRESH_DELAY = 20;
  // A list of substrings of CSS properties used to find transition events that
  // might affect dimensions of observed elements.
  var transitionKeys = ['top', 'right', 'bottom', 'left', 'width', 'height', 'size', 'weight'];
  // Check if MutationObserver is available.
  var mutationObserverSupported = typeof MutationObserver !== 'undefined';
  /**
   * Singleton controller class which handles updates of ResizeObserver instances.
   */
  var ResizeObserverController = /** @class */ (function () {
    /**
     * Creates a new instance of ResizeObserverController.
     *
     * @private
     */
    function ResizeObserverController() {
      /**
       * Indicates whether DOM listeners have been added.
       *
       * @private {boolean}
       */
      this.connected_ = false;
      /**
       * Tells that controller has subscribed for Mutation Events.
       *
       * @private {boolean}
       */
      this.mutationEventsAdded_ = false;
      /**
       * Keeps reference to the instance of MutationObserver.
       *
       * @private {MutationObserver}
       */
      this.mutationsObserver_ = null;
      /**
       * A list of connected observers.
       *
       * @private {Array<ResizeObserverSPI>}
       */
      this.observers_ = [];
      this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);
      this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);
    }
    /**
     * Adds observer to observers list.
     *
     * @param {ResizeObserverSPI} observer - Observer to be added.
     * @returns {void}
     */
    ResizeObserverController.prototype.addObserver = function (observer) {
      if (!~this.observers_.indexOf(observer)) {
        this.observers_.push(observer);
      }
      // Add listeners if they haven't been added yet.
      if (!this.connected_) {
        this.connect_();
      }
    };
    /**
     * Removes observer from observers list.
     *
     * @param {ResizeObserverSPI} observer - Observer to be removed.
     * @returns {void}
     */
    ResizeObserverController.prototype.removeObserver = function (observer) {
      var observers = this.observers_;
      var index = observers.indexOf(observer);
      // Remove observer if it's present in registry.
      if (~index) {
        observers.splice(index, 1);
      }
      // Remove listeners if controller has no connected observers.
      if (!observers.length && this.connected_) {
        this.disconnect_();
      }
    };
    /**
     * Invokes the update of observers. It will continue running updates insofar
     * it detects changes.
     *
     * @returns {void}
     */
    ResizeObserverController.prototype.refresh = function () {
      var changesDetected = this.updateObservers_();
      // Continue running updates if changes have been detected as there might
      // be future ones caused by CSS transitions.
      if (changesDetected) {
        this.refresh();
      }
    };
    /**
     * Updates every observer from observers list and notifies them of queued
     * entries.
     *
     * @private
     * @returns {boolean} Returns "true" if any observer has detected changes in
     *      dimensions of it's elements.
     */
    ResizeObserverController.prototype.updateObservers_ = function () {
      // Collect observers that have active observations.
      var activeObservers = this.observers_.filter(function (observer) {
        return observer.gatherActive(), observer.hasActive();
      });
      // Deliver notifications in a separate cycle in order to avoid any
      // collisions between observers, e.g. when multiple instances of
      // ResizeObserver are tracking the same element and the callback of one
      // of them changes content dimensions of the observed target. Sometimes
      // this may result in notifications being blocked for the rest of observers.
      activeObservers.forEach(function (observer) {
        return observer.broadcastActive();
      });
      return activeObservers.length > 0;
    };
    /**
     * Initializes DOM listeners.
     *
     * @private
     * @returns {void}
     */
    ResizeObserverController.prototype.connect_ = function () {
      // Do nothing if running in a non-browser environment or if listeners
      // have been already added.
      if (!isBrowser || this.connected_) {
        return;
      }
      // Subscription to the "Transitionend" event is used as a workaround for
      // delayed transitions. This way it's possible to capture at least the
      // final state of an element.
      document.addEventListener('transitionend', this.onTransitionEnd_);
      window.addEventListener('resize', this.refresh);
      if (mutationObserverSupported) {
        this.mutationsObserver_ = new MutationObserver(this.refresh);
        this.mutationsObserver_.observe(document, {
          attributes: true,
          childList: true,
          characterData: true,
          subtree: true,
        });
      } else {
        document.addEventListener('DOMSubtreeModified', this.refresh);
        this.mutationEventsAdded_ = true;
      }
      this.connected_ = true;
    };
    /**
     * Removes DOM listeners.
     *
     * @private
     * @returns {void}
     */
    ResizeObserverController.prototype.disconnect_ = function () {
      // Do nothing if running in a non-browser environment or if listeners
      // have been already removed.
      if (!isBrowser || !this.connected_) {
        return;
      }
      document.removeEventListener('transitionend', this.onTransitionEnd_);
      window.removeEventListener('resize', this.refresh);
      if (this.mutationsObserver_) {
        this.mutationsObserver_.disconnect();
      }
      if (this.mutationEventsAdded_) {
        document.removeEventListener('DOMSubtreeModified', this.refresh);
      }
      this.mutationsObserver_ = null;
      this.mutationEventsAdded_ = false;
      this.connected_ = false;
    };
    /**
     * "Transitionend" event handler.
     *
     * @private
     * @param {TransitionEvent} event
     * @returns {void}
     */
    ResizeObserverController.prototype.onTransitionEnd_ = function (_a) {
      var _b = _a.propertyName,
        propertyName = _b === void 0 ? '' : _b;
      // Detect whether transition may affect dimensions of an element.
      var isReflowProperty = transitionKeys.some(function (key) {
        return !!~propertyName.indexOf(key);
      });
      if (isReflowProperty) {
        this.refresh();
      }
    };
    /**
     * Returns instance of the ResizeObserverController.
     *
     * @returns {ResizeObserverController}
     */
    ResizeObserverController.getInstance = function () {
      if (!this.instance_) {
        this.instance_ = new ResizeObserverController();
      }
      return this.instance_;
    };
    /**
     * Holds reference to the controller's instance.
     *
     * @private {ResizeObserverController}
     */
    ResizeObserverController.instance_ = null;
    return ResizeObserverController;
  })();

  /**
   * Defines non-writable/enumerable properties of the provided target object.
   *
   * @param {Object} target - Object for which to define properties.
   * @param {Object} props - Properties to be defined.
   * @returns {Object} Target object.
   */
  var defineConfigurable = function (target, props) {
    for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {
      var key = _a[_i];
      Object.defineProperty(target, key, {
        value: props[key],
        enumerable: false,
        writable: false,
        configurable: true,
      });
    }
    return target;
  };

  /**
   * Returns the global object associated with provided element.
   *
   * @param {Object} target
   * @returns {Object}
   */
  var getWindowOf = function (target) {
    // Assume that the element is an instance of Node, which means that it
    // has the "ownerDocument" property from which we can retrieve a
    // corresponding global object.
    var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;
    // Return the local global object if it's not possible extract one from
    // provided element.
    return ownerGlobal || global$1;
  };

  // Placeholder of an empty content rectangle.
  var emptyRect = createRectInit(0, 0, 0, 0);
  /**
   * Converts provided string to a number.
   *
   * @param {number|string} value
   * @returns {number}
   */
  function toFloat(value) {
    return parseFloat(value) || 0;
  }
  /**
   * Extracts borders size from provided styles.
   *
   * @param {CSSStyleDeclaration} styles
   * @param {...string} positions - Borders positions (top, right, ...)
   * @returns {number}
   */
  function getBordersSize(styles) {
    var positions = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      positions[_i - 1] = arguments[_i];
    }
    return positions.reduce(function (size, position) {
      var value = styles['border-' + position + '-width'];
      return size + toFloat(value);
    }, 0);
  }
  /**
   * Extracts paddings sizes from provided styles.
   *
   * @param {CSSStyleDeclaration} styles
   * @returns {Object} Paddings box.
   */
  function getPaddings(styles) {
    var positions = ['top', 'right', 'bottom', 'left'];
    var paddings = {};
    for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {
      var position = positions_1[_i];
      var value = styles['padding-' + position];
      paddings[position] = toFloat(value);
    }
    return paddings;
  }
  /**
   * Calculates content rectangle of provided SVG element.
   *
   * @param {SVGGraphicsElement} target - Element content rectangle of which needs
   *      to be calculated.
   * @returns {DOMRectInit}
   */
  function getSVGContentRect(target) {
    var bbox = target.getBBox();
    return createRectInit(0, 0, bbox.width, bbox.height);
  }
  /**
   * Calculates content rectangle of provided HTMLElement.
   *
   * @param {HTMLElement} target - Element for which to calculate the content rectangle.
   * @returns {DOMRectInit}
   */
  function getHTMLElementContentRect(target) {
    // Client width & height properties can't be
    // used exclusively as they provide rounded values.
    var clientWidth = target.clientWidth,
      clientHeight = target.clientHeight;
    // By this condition we can catch all non-replaced inline, hidden and
    // detached elements. Though elements with width & height properties less
    // than 0.5 will be discarded as well.
    //
    // Without it we would need to implement separate methods for each of
    // those cases and it's not possible to perform a precise and performance
    // effective test for hidden elements. E.g. even jQuery's ':visible' filter
    // gives wrong results for elements with width & height less than 0.5.
    if (!clientWidth && !clientHeight) {
      return emptyRect;
    }
    var styles = getWindowOf(target).getComputedStyle(target);
    var paddings = getPaddings(styles);
    var horizPad = paddings.left + paddings.right;
    var vertPad = paddings.top + paddings.bottom;
    // Computed styles of width & height are being used because they are the
    // only dimensions available to JS that contain non-rounded values. It could
    // be possible to utilize the getBoundingClientRect if only it's data wasn't
    // affected by CSS transformations let alone paddings, borders and scroll bars.
    var width = toFloat(styles.width),
      height = toFloat(styles.height);
    // Width & height include paddings and borders when the 'border-box' box
    // model is applied (except for IE).
    if (styles.boxSizing === 'border-box') {
      // Following conditions are required to handle Internet Explorer which
      // doesn't include paddings and borders to computed CSS dimensions.
      //
      // We can say that if CSS dimensions + paddings are equal to the "client"
      // properties then it's either IE, and thus we don't need to subtract
      // anything, or an element merely doesn't have paddings/borders styles.
      if (Math.round(width + horizPad) !== clientWidth) {
        width -= getBordersSize(styles, 'left', 'right') + horizPad;
      }
      if (Math.round(height + vertPad) !== clientHeight) {
        height -= getBordersSize(styles, 'top', 'bottom') + vertPad;
      }
    }
    // Following steps can't be applied to the document's root element as its
    // client[Width/Height] properties represent viewport area of the window.
    // Besides, it's as well not necessary as the <html> itself neither has
    // rendered scroll bars nor it can be clipped.
    if (!isDocumentElement(target)) {
      // In some browsers (only in Firefox, actually) CSS width & height
      // include scroll bars size which can be removed at this step as scroll
      // bars are the only difference between rounded dimensions + paddings
      // and "client" properties, though that is not always true in Chrome.
      var vertScrollbar = Math.round(width + horizPad) - clientWidth;
      var horizScrollbar = Math.round(height + vertPad) - clientHeight;
      // Chrome has a rather weird rounding of "client" properties.
      // E.g. for an element with content width of 314.2px it sometimes gives
      // the client width of 315px and for the width of 314.7px it may give
      // 314px. And it doesn't happen all the time. So just ignore this delta
      // as a non-relevant.
      if (Math.abs(vertScrollbar) !== 1) {
        width -= vertScrollbar;
      }
      if (Math.abs(horizScrollbar) !== 1) {
        height -= horizScrollbar;
      }
    }
    return createRectInit(paddings.left, paddings.top, width, height);
  }
  /**
   * Checks whether provided element is an instance of the SVGGraphicsElement.
   *
   * @param {Element} target - Element to be checked.
   * @returns {boolean}
   */
  var isSVGGraphicsElement = (function () {
    // Some browsers, namely IE and Edge, don't have the SVGGraphicsElement
    // interface.
    if (typeof SVGGraphicsElement !== 'undefined') {
      return function (target) {
        return target instanceof getWindowOf(target).SVGGraphicsElement;
      };
    }
    // If it's so, then check that element is at least an instance of the
    // SVGElement and that it has the "getBBox" method.
    // eslint-disable-next-line no-extra-parens
    return function (target) {
      return target instanceof getWindowOf(target).SVGElement && typeof target.getBBox === 'function';
    };
  })();
  /**
   * Checks whether provided element is a document element (<html>).
   *
   * @param {Element} target - Element to be checked.
   * @returns {boolean}
   */
  function isDocumentElement(target) {
    return target === getWindowOf(target).document.documentElement;
  }
  /**
   * Calculates an appropriate content rectangle for provided html or svg element.
   *
   * @param {Element} target - Element content rectangle of which needs to be calculated.
   * @returns {DOMRectInit}
   */
  function getContentRect(target) {
    if (!isBrowser) {
      return emptyRect;
    }
    if (isSVGGraphicsElement(target)) {
      return getSVGContentRect(target);
    }
    return getHTMLElementContentRect(target);
  }
  /**
   * Creates rectangle with an interface of the DOMRectReadOnly.
   * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly
   *
   * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.
   * @returns {DOMRectReadOnly}
   */
  function createReadOnlyRect(_a) {
    var x = _a.x,
      y = _a.y,
      width = _a.width,
      height = _a.height;
    // If DOMRectReadOnly is available use it as a prototype for the rectangle.
    var Constr = typeof DOMRectReadOnly !== 'undefined' ? DOMRectReadOnly : Object;
    var rect = Object.create(Constr.prototype);
    // Rectangle's properties are not writable and non-enumerable.
    defineConfigurable(rect, {
      x: x,
      y: y,
      width: width,
      height: height,
      top: y,
      right: x + width,
      bottom: height + y,
      left: x,
    });
    return rect;
  }
  /**
   * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.
   * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit
   *
   * @param {number} x - X coordinate.
   * @param {number} y - Y coordinate.
   * @param {number} width - Rectangle's width.
   * @param {number} height - Rectangle's height.
   * @returns {DOMRectInit}
   */
  function createRectInit(x, y, width, height) {
    return { x: x, y: y, width: width, height: height };
  }

  /**
   * Class that is responsible for computations of the content rectangle of
   * provided DOM element and for keeping track of it's changes.
   */
  var ResizeObservation = /** @class */ (function () {
    /**
     * Creates an instance of ResizeObservation.
     *
     * @param {Element} target - Element to be observed.
     */
    function ResizeObservation(target) {
      /**
       * Broadcasted width of content rectangle.
       *
       * @type {number}
       */
      this.broadcastWidth = 0;
      /**
       * Broadcasted height of content rectangle.
       *
       * @type {number}
       */
      this.broadcastHeight = 0;
      /**
       * Reference to the last observed content rectangle.
       *
       * @private {DOMRectInit}
       */
      this.contentRect_ = createRectInit(0, 0, 0, 0);
      this.target = target;
    }
    /**
     * Updates content rectangle and tells whether it's width or height properties
     * have changed since the last broadcast.
     *
     * @returns {boolean}
     */
    ResizeObservation.prototype.isActive = function () {
      var rect = getContentRect(this.target);
      this.contentRect_ = rect;
      return rect.width !== this.broadcastWidth || rect.height !== this.broadcastHeight;
    };
    /**
     * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data
     * from the corresponding properties of the last observed content rectangle.
     *
     * @returns {DOMRectInit} Last observed content rectangle.
     */
    ResizeObservation.prototype.broadcastRect = function () {
      var rect = this.contentRect_;
      this.broadcastWidth = rect.width;
      this.broadcastHeight = rect.height;
      return rect;
    };
    return ResizeObservation;
  })();

  var ResizeObserverEntry = /** @class */ (function () {
    /**
     * Creates an instance of ResizeObserverEntry.
     *
     * @param {Element} target - Element that is being observed.
     * @param {DOMRectInit} rectInit - Data of the element's content rectangle.
     */
    function ResizeObserverEntry(target, rectInit) {
      var contentRect = createReadOnlyRect(rectInit);
      // According to the specification following properties are not writable
      // and are also not enumerable in the native implementation.
      //
      // Property accessors are not being used as they'd require to define a
      // private WeakMap storage which may cause memory leaks in browsers that
      // don't support this type of collections.
      defineConfigurable(this, { target: target, contentRect: contentRect });
    }
    return ResizeObserverEntry;
  })();

  var ResizeObserverSPI = /** @class */ (function () {
    /**
     * Creates a new instance of ResizeObserver.
     *
     * @param {ResizeObserverCallback} callback - Callback function that is invoked
     *      when one of the observed elements changes it's content dimensions.
     * @param {ResizeObserverController} controller - Controller instance which
     *      is responsible for the updates of observer.
     * @param {ResizeObserver} callbackCtx - Reference to the public
     *      ResizeObserver instance which will be passed to callback function.
     */
    function ResizeObserverSPI(callback, controller, callbackCtx) {
      /**
       * Collection of resize observations that have detected changes in dimensions
       * of elements.
       *
       * @private {Array<ResizeObservation>}
       */
      this.activeObservations_ = [];
      /**
       * Registry of the ResizeObservation instances.
       *
       * @private {Map<Element, ResizeObservation>}
       */
      this.observations_ = new MapShim();
      if (typeof callback !== 'function') {
        throw new TypeError('The callback provided as parameter 1 is not a function.');
      }
      this.callback_ = callback;
      this.controller_ = controller;
      this.callbackCtx_ = callbackCtx;
    }
    /**
     * Starts observing provided element.
     *
     * @param {Element} target - Element to be observed.
     * @returns {void}
     */
    ResizeObserverSPI.prototype.observe = function (target) {
      if (!arguments.length) {
        throw new TypeError('1 argument required, but only 0 present.');
      }
      // Do nothing if current environment doesn't have the Element interface.
      if (typeof Element === 'undefined' || !(Element instanceof Object)) {
        return;
      }
      if (!(target instanceof getWindowOf(target).Element)) {
        throw new TypeError('parameter 1 is not of type "Element".');
      }
      var observations = this.observations_;
      // Do nothing if element is already being observed.
      if (observations.has(target)) {
        return;
      }
      observations.set(target, new ResizeObservation(target));
      this.controller_.addObserver(this);
      // Force the update of observations.
      this.controller_.refresh();
    };
    /**
     * Stops observing provided element.
     *
     * @param {Element} target - Element to stop observing.
     * @returns {void}
     */
    ResizeObserverSPI.prototype.unobserve = function (target) {
      if (!arguments.length) {
        throw new TypeError('1 argument required, but only 0 present.');
      }
      // Do nothing if current environment doesn't have the Element interface.
      if (typeof Element === 'undefined' || !(Element instanceof Object)) {
        return;
      }
      if (!(target instanceof getWindowOf(target).Element)) {
        throw new TypeError('parameter 1 is not of type "Element".');
      }
      var observations = this.observations_;
      // Do nothing if element is not being observed.
      if (!observations.has(target)) {
        return;
      }
      observations.delete(target);
      if (!observations.size) {
        this.controller_.removeObserver(this);
      }
    };
    /**
     * Stops observing all elements.
     *
     * @returns {void}
     */
    ResizeObserverSPI.prototype.disconnect = function () {
      this.clearActive();
      this.observations_.clear();
      this.controller_.removeObserver(this);
    };
    /**
     * Collects observation instances the associated element of which has changed
     * it's content rectangle.
     *
     * @returns {void}
     */
    ResizeObserverSPI.prototype.gatherActive = function () {
      var _this = this;
      this.clearActive();
      this.observations_.forEach(function (observation) {
        if (observation.isActive()) {
          _this.activeObservations_.push(observation);
        }
      });
    };
    /**
     * Invokes initial callback function with a list of ResizeObserverEntry
     * instances collected from active resize observations.
     *
     * @returns {void}
     */
    ResizeObserverSPI.prototype.broadcastActive = function () {
      // Do nothing if observer doesn't have active observations.
      if (!this.hasActive()) {
        return;
      }
      var ctx = this.callbackCtx_;
      // Create ResizeObserverEntry instance for every active observation.
      var entries = this.activeObservations_.map(function (observation) {
        return new ResizeObserverEntry(observation.target, observation.broadcastRect());
      });
      this.callback_.call(ctx, entries, ctx);
      this.clearActive();
    };
    /**
     * Clears the collection of active observations.
     *
     * @returns {void}
     */
    ResizeObserverSPI.prototype.clearActive = function () {
      this.activeObservations_.splice(0);
    };
    /**
     * Tells whether observer has active observations.
     *
     * @returns {boolean}
     */
    ResizeObserverSPI.prototype.hasActive = function () {
      return this.activeObservations_.length > 0;
    };
    return ResizeObserverSPI;
  })();

  // Registry of internal observers. If WeakMap is not available use current shim
  // for the Map collection as it has all required methods and because WeakMap
  // can't be fully polyfilled anyway.
  var observers = typeof WeakMap !== 'undefined' ? new WeakMap() : new MapShim();
  /**
   * ResizeObserver API. Encapsulates the ResizeObserver SPI implementation
   * exposing only those methods and properties that are defined in the spec.
   */
  var ResizeObserver$1 = /** @class */ (function () {
    /**
     * Creates a new instance of ResizeObserver.
     *
     * @param {ResizeObserverCallback} callback - Callback that is invoked when
     *      dimensions of the observed elements change.
     */
    function ResizeObserver(callback) {
      if (!(this instanceof ResizeObserver)) {
        throw new TypeError('Cannot call a class as a function.');
      }
      if (!arguments.length) {
        throw new TypeError('1 argument required, but only 0 present.');
      }
      var controller = ResizeObserverController.getInstance();
      var observer = new ResizeObserverSPI(callback, controller, this);
      observers.set(this, observer);
    }
    return ResizeObserver;
  })();
  // Expose public methods of ResizeObserver.
  ['observe', 'unobserve', 'disconnect'].forEach(function (method) {
    ResizeObserver$1.prototype[method] = function () {
      var _a;
      return (_a = observers.get(this))[method].apply(_a, arguments);
    };
  });

  var index = (function () {
    // Export existing implementation if available.
    if (typeof global$1.ResizeObserver !== 'undefined') {
      return global$1.ResizeObserver;
    }
    return ResizeObserver$1;
  })();

  var _class$j, _temp$g, _initialiseProps$1;

  var VIEWPORT = 'viewport';

  // IE8 not support pageXOffset
  var getPageX = function getPageX() {
    return window.pageXOffset || document.documentElement.scrollLeft;
  };
  var getPageY = function getPageY() {
    return window.pageYOffset || document.documentElement.scrollTop;
  };

  /**
   * @private get element size
   * @param       {Element} element
   * @return      {Object}
   */
  function _getSize(element) {
    // element like `svg` do not have offsetWidth and offsetHeight prop
    // then getBoundingClientRect
    if ('offsetWidth' in element && 'offsetHeight' in element) {
      return {
        width: element.offsetWidth,
        height: element.offsetHeight,
      };
    } else {
      var _element$getBoundingC = element.getBoundingClientRect(),
        width = _element$getBoundingC.width,
        height = _element$getBoundingC.height;

      return {
        width: width,
        height: height,
      };
    }
  }

  /**
   * @private get element rect
   * @param       {Element} elem
   * @return      {Object}
   */
  function _getElementRect(elem, container) {
    var offsetTop = 0,
      offsetLeft = 0,
      scrollTop = 0,
      scrollLeft = 0;

    var _getSize2 = _getSize(elem),
      width = _getSize2.width,
      height = _getSize2.height;

    do {
      if (!isNaN(elem.offsetTop)) {
        offsetTop += elem.offsetTop;
      }
      if (!isNaN(elem.offsetLeft)) {
        offsetLeft += elem.offsetLeft;
      }
      if (elem && elem.offsetParent) {
        if (!isNaN(elem.offsetParent.scrollLeft) && elem.offsetParent !== document.body) {
          scrollLeft += elem.offsetParent.scrollLeft;
        }

        if (!isNaN(elem.offsetParent.scrollTop) && elem.offsetParent !== document.body) {
          scrollTop += elem.offsetParent.scrollTop;
        }
      }

      elem = elem.offsetParent;
    } while (elem !== null && elem !== container);

    // if container is body or invalid, treat as window, use client width & height
    var treatAsWindow = !container || container === document.body;

    return {
      top: offsetTop - scrollTop - (treatAsWindow ? document.documentElement.scrollTop || document.body.scrollTop : 0),
      left:
        offsetLeft - scrollLeft - (treatAsWindow ? document.documentElement.scrollLeft || document.body.scrollLeft : 0),
      width: width,
      height: height,
    };
  }

  /**
   * @private get viewport size
   * @return {Object}
   */
  function _getViewportSize(container) {
    if (!container || container === document.body) {
      return {
        width: document.documentElement.clientWidth,
        height: document.documentElement.clientHeight,
      };
    }

    var _container$getBoundin = container.getBoundingClientRect(),
      width = _container$getBoundin.width,
      height = _container$getBoundin.height;

    return {
      width: width,
      height: height,
    };
  }

  var getContainer$1 = function getContainer(_ref) {
    var container = _ref.container,
      baseElement = _ref.baseElement;

    // SSR下会有副作用
    if ((typeof document === 'undefined' ? 'undefined' : _default$4(document)) === undefined) {
      return container;
    }

    var calcContainer = findNode(container, baseElement);

    if (!calcContainer) {
      calcContainer = document.body;
    }

    while (dom.getStyle(calcContainer, 'position') === 'static') {
      if (!calcContainer || calcContainer === document.body) {
        return document.body;
      }
      calcContainer = calcContainer.parentNode;
    }

    return calcContainer;
  };

  var Position$1 =
    ((_temp$g = _class$j =
      (function () {
        function Position(props) {
          _default$5(this, Position);

          _initialiseProps$1.call(this);

          this.pinElement = props.pinElement;
          this.baseElement = props.baseElement;
          this.pinFollowBaseElementWhenFixed = props.pinFollowBaseElementWhenFixed;
          this.container = getContainer$1(props);
          this.autoFit = props.autoFit || false;
          this.align = props.align || 'tl tl';
          this.offset = props.offset || [0, 0];
          this.needAdjust = props.needAdjust || false;
          this.isRtl = props.isRtl || false;
        }

        /**
         * @public static place method
         * @param  {Object}       props
         *     @param  {DOM}      props.pinElement
         *     @param  {DOM}      props.baseElement
         *     @param  {String}   props.align
         *     @param  {Number}   props.offset
         *     @param  {Boolean}  props.needAdjust
         *     @param  {Boolean}  props.isRtl
         * @return {Position}
         */

        Position.prototype.setPosition = function setPosition() {
          var pinElement = this.pinElement;
          var baseElement = this.baseElement;
          var pinFollowBaseElementWhenFixed = this.pinFollowBaseElementWhenFixed;
          var expectedAlign = this._getExpectedAlign();
          var isPinFixed = void 0,
            isBaseFixed = void 0,
            firstPositionResult = void 0;
          if (pinElement === VIEWPORT) {
            return;
          }
          if (dom.getStyle(pinElement, 'position') !== 'fixed') {
            dom.setStyle(pinElement, 'position', 'absolute');
            isPinFixed = false;
          } else {
            isPinFixed = true;
          }
          if (baseElement === VIEWPORT || dom.getStyle(baseElement, 'position') !== 'fixed') {
            isBaseFixed = false;
          } else {
            isBaseFixed = true;
          }

          // 根据期望的定位
          for (var i = 0; i < expectedAlign.length; i++) {
            var align = expectedAlign[i];
            var pinElementPoints = this._normalizePosition(pinElement, align.split(' ')[0], isPinFixed);
            var baseElementPoints = this._normalizePosition(
              baseElement,
              align.split(' ')[1],
              // 忽略元素位置，发生在类似dialog的场景下
              isPinFixed && !pinFollowBaseElementWhenFixed,
            );

            var pinElementParentOffset = this._getParentOffset(pinElement);
            var pinElementParentScrollOffset = this._getParentScrollOffset(pinElement);

            var baseElementOffset =
              isPinFixed && isBaseFixed
                ? this._getLeftTop(baseElement) // 在 pin 是 fixed 布局，并且又需要根据 base 计算位置时，计算 base 的 offset 需要忽略页面滚动
                : baseElementPoints.offset(isPinFixed && pinFollowBaseElementWhenFixed);
            var top =
              baseElementOffset.top +
              baseElementPoints.y -
              pinElementParentOffset.top -
              pinElementPoints.y +
              pinElementParentScrollOffset.top;
            var left =
              baseElementOffset.left +
              baseElementPoints.x -
              pinElementParentOffset.left -
              pinElementPoints.x +
              pinElementParentScrollOffset.left;

            this._setPinElementPostion(pinElement, { left: left, top: top }, this.offset);

            if (this._isInViewport(pinElement, align)) {
              return align;
            } else if (!firstPositionResult) {
              if (this.needAdjust && !this.autoFit) {
                var _getViewportOffset2 = this._getViewportOffset(pinElement, align),
                  right = _getViewportOffset2.right;

                firstPositionResult = {
                  left: right < 0 ? left + right : left,
                  top: top,
                };
              } else {
                firstPositionResult = { left: left, top: top };
              }
            }
          }

          // This will only execute if `pinElement` could not be placed entirely in the Viewport
          var inViewportLeft = this._makeElementInViewport(pinElement, firstPositionResult.left, 'Left', isPinFixed);
          var inViewportTop = this._makeElementInViewport(pinElement, firstPositionResult.top, 'Top', isPinFixed);

          this._setPinElementPostion(
            pinElement,
            { left: inViewportLeft, top: inViewportTop },
            this._calPinOffset(expectedAlign[0]),
          );

          return expectedAlign[0];
        };

        Position.prototype._getParentOffset = function _getParentOffset(element) {
          var parent = element.offsetParent || document.documentElement;
          var offset = void 0;
          if (parent === document.body && dom.getStyle(parent, 'position') === 'static') {
            offset = {
              top: 0,
              left: 0,
            };
          } else {
            offset = this._getElementOffset(parent);
          }

          offset.top += parseFloat(dom.getStyle(parent, 'border-top-width'), 10);
          offset.left += parseFloat(dom.getStyle(parent, 'border-left-width'), 10);
          offset.offsetParent = parent;
          return offset;
        };

        Position.prototype._makeElementInViewport = function _makeElementInViewport(
          pinElement,
          number,
          type,
          isPinFixed,
        ) {
          // pinElement.offsetParent is never body because wrapper has position: absolute
          // refactored to make code clearer. Revert if wrapper style changes.
          var result = number;
          var docElement = document.documentElement;
          var offsetParent = pinElement.offsetParent || document.documentElement;

          if (result < 0) {
            if (isPinFixed) {
              result = 0;
            } else if (offsetParent === document.body && dom.getStyle(offsetParent, 'position') === 'static') {
              // Only when div's offsetParent is document.body, we set new position result.
              result = Math.max(docElement['scroll' + type], document.body['scroll' + type]);
            }
          }
          return result;
        };

        // 这里的第三个参数真实含义为：是否为fixed布局，并且像dialog一样，不跟随trigger元素

        Position.prototype._normalizePosition = function _normalizePosition(element, align, ignoreElementOffset) {
          var points = this._normalizeElement(element, ignoreElementOffset);
          this._normalizeXY(points, align);

          return points;
        };

        Position.prototype._normalizeXY = function _normalizeXY(points, align) {
          var x = align.split('')[1];
          var y = align.split('')[0];

          points.x = this._xyConverter(x, points, 'width');
          points.y = this._xyConverter(y, points, 'height');

          return points;
        };

        Position.prototype._xyConverter = function _xyConverter(align, points, type) {
          var res = align
            .replace(/t|l/gi, '0%')
            .replace(/c/gi, '50%')
            .replace(/b|r/gi, '100%')
            .replace(/(\d+)%/gi, function (m, d) {
              return points.size()[type] * (d / 100);
            });

          return parseFloat(res, 10) || 0;
        };

        Position.prototype._getLeftTop = function _getLeftTop(element) {
          return {
            left: parseFloat(dom.getStyle(element, 'left')) || 0,
            top: parseFloat(dom.getStyle(element, 'top')) || 0,
          };
        };

        Position.prototype._normalizeElement = function _normalizeElement(element, ignoreElementOffset) {
          var _this = this;

          var result = {
              element: element,
              x: 0,
              y: 0,
            },
            isViewport = element === VIEWPORT,
            docElement = document.documentElement;

          result.offset = function (ignoreScroll) {
            // 这里是关键，第二个参数的含义以ing该是：是否为 fixed 布局，并且像 dialog 一样，不跟随 trigger 元素
            if (ignoreElementOffset) {
              return {
                left: 0,
                top: 0,
              };
            } else if (isViewport) {
              return {
                left: getPageX(),
                top: getPageY(),
              };
            } else {
              return _this._getElementOffset(element, ignoreScroll);
            }
          };

          result.size = function () {
            if (isViewport) {
              return {
                width: docElement.clientWidth,
                height: docElement.clientHeight,
              };
            } else {
              return _getSize(element);
            }
          };

          return result;
        };

        // ignoreScroll 在 pin 元素为 fixed 的时候生效，此时需要忽略页面滚动
        // 对 fixed 模式下 subNav 弹层的计算很重要，只有在这种情况下，才同时需要元素的相对位置，又不关心页面滚动

        Position.prototype._getElementOffset = function _getElementOffset(element, ignoreScroll) {
          var rect = element.getBoundingClientRect();
          var docElement = document.documentElement;
          var body = document.body;
          var docClientLeft = docElement.clientLeft || body.clientLeft || 0;
          var docClientTop = docElement.clientTop || body.clientTop || 0;

          return {
            left: rect.left + (ignoreScroll ? 0 : getPageX()) - docClientLeft,
            top: rect.top + (ignoreScroll ? 0 : getPageY()) - docClientTop,
          };
        };

        // According to the location of the overflow to calculate the desired positioning

        Position.prototype._getExpectedAlign = function _getExpectedAlign() {
          var align = this.isRtl ? this._replaceAlignDir(this.align, /l|r/g, { l: 'r', r: 'l' }) : this.align;
          var expectedAlign = [align];
          if (this.needAdjust) {
            if (/t|b/g.test(align)) {
              expectedAlign.push(this._replaceAlignDir(align, /t|b/g, { t: 'b', b: 't' }));
            }
            if (/l|r/g.test(align)) {
              expectedAlign.push(this._replaceAlignDir(align, /l|r/g, { l: 'r', r: 'l' }));
            }
            if (/c/g.test(align)) {
              expectedAlign.push(this._replaceAlignDir(align, /c(?= |$)/g, { c: 'l' }));
              expectedAlign.push(this._replaceAlignDir(align, /c(?= |$)/g, { c: 'r' }));
            }
            expectedAlign.push(
              this._replaceAlignDir(align, /l|r|t|b/g, {
                l: 'r',
                r: 'l',
                t: 'b',
                b: 't',
              }),
            );
          }
          return expectedAlign;
        };

        // Transform align order.

        Position.prototype._replaceAlignDir = function _replaceAlignDir(align, regExp, map) {
          return align.replace(regExp, function (res) {
            return map[res];
          });
        };

        // Are the right sides of the pin and base aligned?

        Position.prototype._isRightAligned = function _isRightAligned(align) {
          var _align$split = align.split(' '),
            pinAlign = _align$split[0],
            baseAlign = _align$split[1];

          return pinAlign[1] === 'r' && pinAlign[1] === baseAlign[1];
        };

        // Are the bottoms of the pin and base aligned?

        Position.prototype._isBottomAligned = function _isBottomAligned(align) {
          var _align$split2 = align.split(' '),
            pinAlign = _align$split2[0],
            baseAlign = _align$split2[1];

          return pinAlign[0] === 'b' && pinAlign[0] === baseAlign[0];
        };

        // Detecting element is in the window， we want to adjust position later.

        Position.prototype._isInViewport = function _isInViewport(element, align) {
          var viewportSize = _getViewportSize(this.container);
          var elementRect = _getElementRect(element, this.container);
          var elementSize = _getSize(element);

          // https://github.com/alibaba-fusion/next/issues/853
          // Equality causes issues in Chrome when pin element is off screen to right or bottom.
          // If it is not supposed to align with the bottom or right, then subtract 1 to use strict less than.
          var viewportWidth = this._isRightAligned(align) ? viewportSize.width : viewportSize.width - 1;
          var viewportHeight = this._isBottomAligned(align) ? viewportSize.height : viewportSize.height - 1;

          // 临时方案，在 select + table 的场景下，不需要关注横向上是否在可视区域内
          // 在 balloon 场景下需要关注
          if (this.autoFit) {
            return elementRect.top >= 0 && elementRect.top + element.offsetHeight <= viewportHeight;
          }

          // Avoid animate problem that use offsetWidth instead of getBoundingClientRect.
          return (
            elementRect.left >= 0 &&
            elementRect.left + elementSize.width <= viewportWidth &&
            elementRect.top >= 0 &&
            elementRect.top + elementSize.height <= viewportHeight
          );
        };

        Position.prototype._getViewportOffset = function _getViewportOffset(element, align) {
          var viewportSize = _getViewportSize(this.container);
          var elementRect = _getElementRect(element, this.container);
          var elementSize = _getSize(element);

          var viewportWidth = this._isRightAligned(align) ? viewportSize.width : viewportSize.width - 1;
          var viewportHeight = this._isBottomAligned(align) ? viewportSize.height : viewportSize.height - 1;

          return {
            top: elementRect.top,
            right: viewportWidth - (elementRect.left + elementSize.width),
            bottom: viewportHeight - (elementRect.top + elementSize.height),
            left: elementRect.left,
          };
        };

        // 在这里做RTL判断 top-left 定位转化为等效的 top-right定位

        Position.prototype._setPinElementPostion = function _setPinElementPostion(pinElement, postion) {
          var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [0, 0];
          var top = postion.top,
            left = postion.left;

          if (!this.isRtl) {
            dom.setStyle(pinElement, {
              left: left + offset[0] + 'px',
              top: top + offset[1] + 'px',
            });
            return;
          }

          // transfer {left,top} equaly to {right,top}
          var pinElementParentOffset = this._getParentOffset(pinElement);

          var _getElementRect2 = _getElementRect(pinElementParentOffset.offsetParent),
            offsetParentWidth = _getElementRect2.width;

          var _getElementRect3 = _getElementRect(pinElement),
            width = _getElementRect3.width;

          var right = offsetParentWidth - (left + width);
          dom.setStyle(pinElement, {
            left: 'auto',
            right: right + offset[0] + 'px',
            top: top + offset[1] + 'px',
          });
        };

        return Position;
      })()),
    (_class$j.VIEWPORT = VIEWPORT),
    (_class$j.place = function (props) {
      return new Position$1(props).setPosition();
    }),
    (_initialiseProps$1 = function _initialiseProps() {
      var _this2 = this;

      this._calPinOffset = function (align) {
        var offset = [].concat(_this2.offset);

        if (_this2.autoFit && align && _this2.container && _this2.container !== document.body) {
          var baseElementRect = _getElementRect(_this2.baseElement, _this2.container);
          var pinElementRect = _getElementRect(_this2.pinElement, _this2.container);
          var viewportSize = _getViewportSize(_this2.container);
          var pinAlign = align.split(' ')[0];
          pinAlign.charAt(1);
          var y = pinAlign.charAt(0);

          if (pinElementRect.top < 0 || pinElementRect.top + pinElementRect.height > viewportSize.height) {
            offset[1] = -baseElementRect.top - (y === 't' ? baseElementRect.height : 0);
          }
        }
        return offset;
      };

      this._getParentScrollOffset = function (elem) {
        var top = 0;
        var left = 0;

        if (elem && elem.offsetParent && elem.offsetParent !== document.body) {
          if (!isNaN(elem.offsetParent.scrollTop)) {
            top += elem.offsetParent.scrollTop;
          }
          if (!isNaN(elem.offsetParent.scrollLeft)) {
            left += elem.offsetParent.scrollLeft;
          }
        }

        return {
          top: top,
          left: left,
        };
      };
    }),
    _temp$g);

  var _class$i, _temp$f;

  var noop$6 = func.noop,
    bindCtx$4 = func.bindCtx;
  var getStyle$1 = dom.getStyle;

  var place = Position$1.place;

  var Position =
    ((_temp$f = _class$i =
      (function (_Component) {
        _default$2(Position, _Component);

        function Position(props) {
          _default$5(this, Position);

          var _this = _default$3(this, _Component.call(this, props));

          _this.observe = function () {
            var contentNode = _this.getContentNode();
            contentNode && _this.resizeObserver.observe(contentNode);
          };

          _this.unobserve = function () {
            _this.resizeObserver.disconnect();
          };

          bindCtx$4(_this, ['handleResize']);

          _this.resizeObserver = new index(_this.handleResize);
          return _this;
        }

        Position.prototype.componentDidMount = function componentDidMount() {
          this.setPosition();

          if (this.props.needListenResize) {
            events.on(window, 'resize', this.handleResize);
            this.observe();
          }
        };

        Position.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
          var props = this.props;

          if (('align' in props && props.align !== prevProps.align) || props.shouldUpdatePosition) {
            this.shouldUpdatePosition = true;
          }

          if (this.shouldUpdatePosition) {
            clearTimeout(this.resizeTimeout);

            this.setPosition();
            this.shouldUpdatePosition = false;
          }
        };

        Position.prototype.componentWillUnmount = function componentWillUnmount() {
          if (this.props.needListenResize) {
            events.off(window, 'resize', this.handleResize);
            this.unobserve();
          }

          clearTimeout(this.resizeTimeout);
        };

        Position.prototype.setPosition = function setPosition() {
          var _props = this.props,
            align = _props.align,
            offset = _props.offset,
            beforePosition = _props.beforePosition,
            onPosition = _props.onPosition,
            needAdjust = _props.needAdjust,
            container = _props.container,
            rtl = _props.rtl,
            pinFollowBaseElementWhenFixed = _props.pinFollowBaseElementWhenFixed,
            autoFit = _props.autoFit;

          beforePosition();

          var contentNode = this.getContentNode();
          var targetNode = this.getTargetNode();

          if (contentNode && targetNode) {
            var resultAlign = place({
              pinElement: contentNode,
              baseElement: targetNode,
              pinFollowBaseElementWhenFixed: pinFollowBaseElementWhenFixed,
              align: align,
              offset: offset,
              autoFit: autoFit,
              container: container,
              needAdjust: needAdjust,
              isRtl: rtl,
            });
            var top = getStyle$1(contentNode, 'top');
            var left = getStyle$1(contentNode, 'left');

            onPosition(
              {
                align: resultAlign.split(' '),
                top: top,
                left: left,
              },
              contentNode,
            );
          }
        };

        Position.prototype.getContentNode = function getContentNode() {
          try {
            return ReactDOM.findDOMNode(this);
          } catch (err) {
            return null;
          }
        };

        Position.prototype.getTargetNode = function getTargetNode() {
          var target = this.props.target;

          return target === Position$1.VIEWPORT ? Position$1.VIEWPORT : findNode(target, this.props);
        };

        Position.prototype.handleResize = function handleResize() {
          var _this2 = this;

          clearTimeout(this.resizeTimeout);

          this.resizeTimeout = setTimeout(function () {
            _this2.setPosition();
          }, 200);
        };

        Position.prototype.render = function render() {
          return React.Children.only(this.props.children);
        };

        return Position;
      })(React.Component)),
    (_class$i.VIEWPORT = Position$1.VIEWPORT),
    (_class$i.propTypes = {
      children: PropTypes$2.node,
      target: PropTypes$2.any,
      container: PropTypes$2.any,
      align: PropTypes$2.oneOfType([PropTypes$2.string, PropTypes$2.bool]),
      offset: PropTypes$2.array,
      beforePosition: PropTypes$2.func,
      onPosition: PropTypes$2.func,
      needAdjust: PropTypes$2.bool,
      autoFit: PropTypes$2.bool,
      needListenResize: PropTypes$2.bool,
      shouldUpdatePosition: PropTypes$2.bool,
      rtl: PropTypes$2.bool,
      pinFollowBaseElementWhenFixed: PropTypes$2.bool,
    }),
    (_class$i.defaultProps = {
      align: 'tl bl',
      offset: [0, 0],
      beforePosition: noop$6,
      onPosition: noop$6,
      needAdjust: true,
      autoFit: false,
      needListenResize: true,
      shouldUpdatePosition: false,
      rtl: false,
    }),
    _temp$f);
  Position.displayName = 'Position';

  var _class$h, _temp$e;

  var saveLastFocusNode = focus.saveLastFocusNode,
    getFocusNodeList = focus.getFocusNodeList,
    backLastFocusNode = focus.backLastFocusNode;
  var makeChain$1 = func.makeChain,
    noop$5 = func.noop,
    bindCtx$3 = func.bindCtx;

  var isScrollDisplay = function isScrollDisplay(element) {
    try {
      var scrollbarStyle = window.getComputedStyle(element, '::-webkit-scrollbar');
      return !scrollbarStyle || scrollbarStyle.getPropertyValue('display') !== 'none';
    } catch (e) {
      // ignore error for firefox
    }

    return true;
  };
  var hasScroll = function hasScroll(containerNode) {
    var parentNode = containerNode.parentNode;

    return (
      parentNode &&
      parentNode.scrollHeight > parentNode.clientHeight &&
      dom.scrollbar().width > 0 &&
      isScrollDisplay(parentNode) &&
      isScrollDisplay(containerNode)
    );
  };

  var getContainerNode = function getContainerNode(props) {
    var targetNode = findNode(props.target);
    return findNode(props.container, targetNode);
  };

  var prefixes = ['-webkit-', '-moz-', '-o-', 'ms-', ''];
  var getStyleProperty = function getStyleProperty(node, name) {
    var style = window.getComputedStyle(node);
    var ret = '';
    for (var i = 0; i < prefixes.length; i++) {
      ret = style.getPropertyValue(prefixes[i] + name);
      if (ret) {
        break;
      }
    }
    return ret;
  };

  // 存 containerNode 信息
  var containerNodeList = [];

  /**
   * Overlay
   */
  var Overlay$1 =
    ((_temp$e = _class$h =
      (function (_Component) {
        _default$2(Overlay, _Component);

        function Overlay(props) {
          _default$5(this, Overlay);

          var _this = _default$3(this, _Component.call(this, props));

          _this.saveContentRef = function (ref) {
            _this.contentRef = ref;
          };

          _this.saveGatewayRef = function (ref) {
            _this.gatewayRef = ref;
          };

          _this.lastAlign = props.align;

          bindCtx$3(_this, [
            'handlePosition',
            'handleAnimateEnd',
            'handleDocumentKeyDown',
            'handleDocumentClick',
            'handleMaskClick',
            'beforeOpen',
            'beforeClose',
          ]);

          _this.state = {
            visible: false,
            status: 'none',
            animation: _this.getAnimation(props),
            willOpen: false,
            willClose: false,
          };

          _this.timeoutMap = {};
          return _this;
        }

        Overlay.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {
          var willOpen = !prevState.visible && nextProps.visible;
          var willClose = prevState.visible && !nextProps.visible;

          var nextState = {
            willOpen: willOpen,
            willClose: willClose,
          };

          if (willOpen) {
            nextProps.beforeOpen && nextProps.beforeOpen();
          } else if (willClose) {
            nextProps.beforeClose && nextProps.beforeClose();
          }

          if (nextProps.animation || nextProps.animation === false) {
            nextState.animation = nextProps.animation;
          }

          if (nextProps.animation !== false && support.animation) {
            if (willOpen) {
              nextState.visible = true;
              nextState.status = 'mounting';
            } else if (willClose) {
              // can not set visible=false directly, otherwise animation not work without dom
              // nextState.visible = false;
              nextState.status = 'leaving';
            }
          } else if ('visible' in nextProps && nextProps.visible !== prevState.visible) {
            nextState.visible = nextProps.visible;
          }

          return nextState;
        };

        Overlay.prototype.componentDidMount = function componentDidMount() {
          if (this.state.willOpen) {
            this.beforeOpen();
          } else if (this.state.willClose) {
            this.beforeClose();
          }

          if (this.state.visible) {
            this.doAnimation(true, false);
            this._isMounted = true;
          }

          this.addDocumentEvents();

          overlayManager$1.addOverlay(this);
        };

        Overlay.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
          if (this.state.willOpen) {
            this.beforeOpen();
          } else if (this.state.willClose) {
            this.beforeClose();
          }

          if (!this._isMounted && this.props.visible) {
            this._isMounted = true;
          }

          if (this.props.align !== prevProps.align) {
            this.lastAlign = prevProps.align;
          }

          var willOpen = !prevProps.visible && this.props.visible;
          var willClose = prevProps.visible && !this.props.visible;

          (willOpen || willClose) && this.doAnimation(willOpen, willClose);
        };

        Overlay.prototype.componentWillUnmount = function componentWillUnmount() {
          this._isDestroyed = true;
          this._isMounted = false;
          overlayManager$1.removeOverlay(this);
          this.removeDocumentEvents();
          if (this.focusTimeout) {
            clearTimeout(this.focusTimeout);
          }
          if (this._animation) {
            this._animation.off();
            this._animation = null;
          }
          this.beforeClose();
        };

        Overlay.prototype.doAnimation = function doAnimation(open, close) {
          var _this2 = this;

          if (this.state.animation && support.animation) {
            if (open) {
              this.onEntering();
            } else if (close) {
              this.onLeaving();
            }
            this.addAnimationEvents();
          } else {
            if (open) {
              // fix https://github.com/alibaba-fusion/next/issues/1901
              setTimeout(function () {
                _this2.props.onOpen();
                dom.addClass(_this2.getWrapperNode(), 'opened');
                overlayManager$1.addOverlay(_this2);
                _this2.props.afterOpen();
              });
            } else if (close) {
              this.props.onClose();
              dom.removeClass(this.getWrapperNode(), 'opened');
              overlayManager$1.removeOverlay(this);
              this.props.afterClose();
            }
            this.setFocusNode();
          }
        };

        Overlay.prototype.getAnimation = function getAnimation(props) {
          if (props.animation === false) {
            return false;
          }

          if (props.animation) {
            return props.animation;
          }

          return this.getAnimationByAlign(props.align);
        };

        Overlay.prototype.getAnimationByAlign = function getAnimationByAlign(align) {
          switch (align[0]) {
            case 't':
              return {
                // 为了防止有的用户 js升级了而css没升级，所以把两个动画都保留了。
                // 动画不会叠加，会替代，顺序根据 src/animate/main.scss 中的样式先后顺序遵循css覆盖原则
                // fadeInDownSmall fadeOutUpSmall 优先级更高
                in: 'expandInDown fadeInDownSmall',
                out: 'expandOutUp fadeOutUpSmall',
              };
            case 'b':
              return {
                in: 'fadeInUp',
                out: 'fadeOutDown',
              };
            default:
              return {
                in: 'expandInDown fadeInDownSmall',
                out: 'expandOutUp fadeOutUpSmall',
              };
          }
        };

        Overlay.prototype.addAnimationEvents = function addAnimationEvents() {
          var _this3 = this;

          setTimeout(function () {
            var node = _this3.getContentNode();
            if (node) {
              var id = guid();

              _this3._animation = events.on(node, support.animation.end, _this3.handleAnimateEnd.bind(_this3, id));

              var animationDelay = parseFloat(getStyleProperty(node, 'animation-delay')) || 0;
              var animationDuration = parseFloat(getStyleProperty(node, 'animation-duration')) || 0;
              var time = animationDelay + animationDuration;
              if (time) {
                _this3.timeoutMap[id] = setTimeout(function () {
                  _this3.handleAnimateEnd(id);
                }, time * 1000 + 200);
              }
            }
          });
        };

        Overlay.prototype.handlePosition = function handlePosition(config) {
          var align = config.align.join(' ');

          if (!('animation' in this.props) && this.props.needAdjust && this.lastAlign !== align) {
            this.setState({
              animation: this.getAnimationByAlign(align),
            });
          }

          var status = this.state.status;

          if (status === 'mounting') {
            this.setState({
              status: 'entering',
            });
          }

          this.lastAlign = align;
        };

        Overlay.prototype.handleAnimateEnd = function handleAnimateEnd(id) {
          if (this.timeoutMap[id]) {
            clearTimeout(this.timeoutMap[id]);
          }
          delete this.timeoutMap[id];

          if (this._animation) {
            this._animation.off();
            this._animation = null;
          }

          if (!this._isMounted) {
            return;
          }

          if (this.state.status === 'leaving') {
            this.setState({
              visible: false,
              status: 'none',
            });

            this.onLeaved();
            // dom结构首次出现 触发的是entering
            // dom结构已经存在（例如设置了cache），触发的是mounting
          } else if (this.state.status === 'entering' || this.state.status === 'mounting') {
            this.setState({
              status: 'none',
            });

            this.onEntered();
          }
        };

        Overlay.prototype.onEntering = function onEntering() {
          var _this4 = this;

          if (this._isDestroyed) {
            return;
          }

          // make sure overlay.ref has been called (eg: menu/popup-item called overlay.getInstance().getContentNode().)
          setTimeout(function () {
            var wrapperNode = _this4.getWrapperNode();
            dom.addClass(wrapperNode, 'opened');
            _this4.props.onOpen();
          });
        };

        Overlay.prototype.onLeaving = function onLeaving() {
          var wrapperNode = this.getWrapperNode();
          dom.removeClass(wrapperNode, 'opened');
          this.props.onClose();
        };

        Overlay.prototype.onEntered = function onEntered() {
          overlayManager$1.addOverlay(this);
          this.setFocusNode();
          this.props.afterOpen();
        };

        Overlay.prototype.onLeaved = function onLeaved() {
          overlayManager$1.removeOverlay(this);
          this.setFocusNode();
          this.props.afterClose();
        };

        Overlay.prototype.beforeOpen = function beforeOpen() {
          if (this.props.disableScroll) {
            var containerNode = getContainerNode(this.props) || document.body;
            var _containerNode$style = containerNode.style,
              overflow = _containerNode$style.overflow,
              paddingRight = _containerNode$style.paddingRight;

            var cnInfo = containerNodeList.find(function (m) {
              return m.containerNode === containerNode;
            }) || {
              containerNode: containerNode,
              count: 0,
            };

            /**
             * container 节点初始状态已经是 overflow=hidden 则忽略
             * See {@link https://codesandbox.io/s/next-overlay-overflow-2-fulpq?file=/src/App.js}
             */
            if (cnInfo.count === 0 && overflow !== 'hidden') {
              var style = {
                overflow: 'hidden',
              };

              cnInfo.overflow = overflow;

              if (hasScroll(containerNode)) {
                cnInfo.paddingRight = paddingRight;
                style.paddingRight = dom.getStyle(containerNode, 'paddingRight') + dom.scrollbar().width + 'px';
              }

              dom.setStyle(containerNode, style);
              containerNodeList.push(cnInfo);
              cnInfo.count++;
            } else if (cnInfo.count) {
              cnInfo.count++;
            }

            this._containerNode = containerNode;
          }
        };

        Overlay.prototype.beforeClose = function beforeClose() {
          var _this5 = this;

          if (this.props.disableScroll) {
            var idx = containerNodeList.findIndex(function (cn) {
              return cn.containerNode === _this5._containerNode;
            });

            if (idx !== -1) {
              var cnInfo = containerNodeList[idx];
              var overflow = cnInfo.overflow,
                paddingRight = cnInfo.paddingRight;

              // 最后一个 overlay 的时候再将样式重置回去
              // 此时 overflow 应该值在 beforeOpen 中设置的 hidden

              if (cnInfo.count === 1 && this._containerNode && this._containerNode.style.overflow === 'hidden') {
                var style = {
                  overflow: overflow,
                };

                if (paddingRight !== undefined) {
                  style.paddingRight = paddingRight;
                }

                dom.setStyle(this._containerNode, style);
              }

              cnInfo.count--;

              if (cnInfo.count === 0) {
                containerNodeList.splice(idx, 1);
              }
            }
            this._containerNode = undefined;
          }
        };

        Overlay.prototype.setFocusNode = function setFocusNode() {
          var _this6 = this;

          if (!this.props.autoFocus) {
            return;
          }

          if (this.state.visible && !this._hasFocused) {
            saveLastFocusNode();
            // 这个时候很可能上一个弹层的关闭事件还未触发，导致焦点已经回到触发的元素
            // 这里延时处理一下，延时的时间为 document.click 捕获触发的延时时间
            this.focusTimeout = setTimeout(function () {
              var node = _this6.getContentNode();
              if (node) {
                var focusNodeList = getFocusNodeList(node);
                if (focusNodeList.length) {
                  focusNodeList[0].focus();
                }
                _this6._hasFocused = true;
              }
            }, 100);
          } else if (!this.state.visible && this._hasFocused) {
            backLastFocusNode();
            this._hasFocused = false;
          }
        };

        Overlay.prototype.getContent = function getContent() {
          return this.contentRef;
        };

        Overlay.prototype.getContentNode = function getContentNode() {
          try {
            return ReactDOM.findDOMNode(this.contentRef);
          } catch (err) {
            return null;
          }
        };

        Overlay.prototype.getWrapperNode = function getWrapperNode() {
          return this.gatewayRef ? this.gatewayRef.getChildNode() : null;
        };

        /**
         * document global event
         */

        Overlay.prototype.addDocumentEvents = function addDocumentEvents() {
          if (this.props.canCloseByEsc) {
            this._keydownEvents = events.on(document, 'keydown', this.handleDocumentKeyDown);
          }

          if (this.props.canCloseByOutSideClick) {
            this._clickEvents = events.on(document, 'click', this.handleDocumentClick);
            this._touchEvents = events.on(document, 'touchend', this.handleDocumentClick);
          }
        };

        Overlay.prototype.removeDocumentEvents = function removeDocumentEvents() {
          var _this7 = this;

          ['_keydownEvents', '_clickEvents', '_touchEvents'].forEach(function (event) {
            if (_this7[event]) {
              _this7[event].off();
              _this7[event] = null;
            }
          });
        };

        Overlay.prototype.handleDocumentKeyDown = function handleDocumentKeyDown(e) {
          if (this.state.visible && e.keyCode === KEYCODE.ESC && overlayManager$1.isCurrentOverlay(this)) {
            this.props.onRequestClose('keyboard', e);
          }
        };

        Overlay.prototype.isInShadowDOM = function isInShadowDOM(node) {
          return node.getRootNode ? node.getRootNode().nodeType === 11 : false;
        };

        Overlay.prototype.getEventPath = function getEventPath(event) {
          // 参考 https://github.com/spring-media/react-shadow-dom-retarget-events/blob/master/index.js#L29
          return event.path || (event.composedPath && event.composedPath()) || this.composedPath(event.target);
        };

        Overlay.prototype.composedPath = function composedPath(el) {
          var path = [];
          while (el) {
            path.push(el);
            if (el.tagName === 'HTML') {
              path.push(document);
              path.push(window);
              return path;
            }
            el = el.parentElement;
          }
        };

        Overlay.prototype.matchInShadowDOM = function matchInShadowDOM(node, e) {
          if (this.isInShadowDOM(node)) {
            // Shadow DOM 环境中，触发点击事件，监听 document click 事件获得的事件源
            // 并非实际触发的 dom 节点，而是 Shadow DOM 的 host 节点
            // 进而会导致如 Select 组件的下拉弹层打开后立即关闭等问题
            // 因此额外增加 node 和 eventPath 的判断
            var eventPath = this.getEventPath(e);
            return node === eventPath[0] || node.contains(eventPath[0]);
          }

          return false;
        };

        Overlay.prototype.handleDocumentClick = function handleDocumentClick(e) {
          var _this8 = this;

          if (this.state.visible) {
            var safeNode = this.props.safeNode;

            var safeNodes = Array.isArray(safeNode) ? [].concat(safeNode) : [safeNode];
            safeNodes.unshift(function () {
              return _this8.getWrapperNode();
            });

            for (var i = 0; i < safeNodes.length; i++) {
              var node = findNode(safeNodes[i], this.props);
              // HACK: 如果触发点击的节点是弹层内部的节点，并且在被点击后立即销毁，那么此时无法使用 node.contains(e.target)
              // 来判断此时点击的节点是否是弹层内部的节点，额外判断
              if (
                node &&
                (node === e.target ||
                  node.contains(e.target) ||
                  this.matchInShadowDOM(node, e) ||
                  (e.target !== document && !document.documentElement.contains(e.target)))
              ) {
                return;
              }
            }

            this.props.onRequestClose('docClick', e);
          }
        };

        Overlay.prototype.handleMaskClick = function handleMaskClick(e) {
          if (e.currentTarget === e.target && this.props.canCloseByMask) {
            this.props.onRequestClose('maskClick', e);
          }
        };

        // 兼容过去的用法: this.popupRef.getInstance().overlay.getInstance().getContentNode()
        Overlay.prototype.getInstance = function getInstance() {
          return this;
        };

        Overlay.prototype.render = function render() {
          var _props = this.props,
            prefix = _props.prefix,
            className = _props.className,
            style = _props.style,
            propChildren = _props.children,
            target = _props.target,
            align = _props.align,
            offset = _props.offset,
            container = _props.container,
            hasMask = _props.hasMask,
            needAdjust = _props.needAdjust,
            autoFit = _props.autoFit,
            beforePosition = _props.beforePosition,
            onPosition = _props.onPosition,
            wrapperStyle = _props.wrapperStyle,
            rtl = _props.rtl,
            propShouldUpdatePosition = _props.shouldUpdatePosition,
            cache = _props.cache,
            wrapperClassName = _props.wrapperClassName,
            onMaskMouseEnter = _props.onMaskMouseEnter,
            onMaskMouseLeave = _props.onMaskMouseLeave,
            maskClass = _props.maskClass,
            isChildrenInMask = _props.isChildrenInMask,
            pinFollowBaseElementWhenFixed = _props.pinFollowBaseElementWhenFixed;
          var _state = this.state,
            stateVisible = _state.visible,
            status = _state.status,
            animation = _state.animation;

          var children = stateVisible || (cache && this._isMounted) ? propChildren : null;
          if (children) {
            var _classnames, _classnames2;

            var child = React.Children.only(children);
            // if chlild is a functional component wrap in a component to allow a ref to be set
            if (typeof child.type === 'function' && !(child.type.prototype instanceof React.Component)) {
              child = React__default['default'].createElement('div', { role: 'none' }, child);
            }
            var childClazz = cls(
              ((_classnames = {}),
              (_classnames[prefix + 'overlay-inner'] = true),
              (_classnames[animation.in] = status === 'entering' || status === 'mounting'),
              (_classnames[animation.out] = status === 'leaving'),
              (_classnames[child.props.className] = !!child.props.className),
              (_classnames[className] = !!className),
              _classnames),
            );
            if (typeof child.ref === 'string') {
              throw new Error('Can not set ref by string in Overlay, use function instead.');
            }

            children = React__default['default'].cloneElement(child, {
              className: childClazz,
              style: _default$6({}, child.props.style, style),
              ref: makeChain$1(this.saveContentRef, child.ref),
              'aria-hidden': !stateVisible && cache && this._isMounted,
              onClick: makeChain$1(this.props.onClick, child.props.onClick),
            });

            if (align) {
              var shouldUpdatePosition = status === 'leaving' ? false : propShouldUpdatePosition;
              children = React__default['default'].createElement(Position, {
                children: children,
                target: target,
                align: align,
                offset: offset,
                autoFit: autoFit,
                container: container,
                needAdjust: needAdjust,
                pinFollowBaseElementWhenFixed: pinFollowBaseElementWhenFixed,
                beforePosition: beforePosition,
                onPosition: makeChain$1(this.handlePosition, onPosition),
                shouldUpdatePosition: shouldUpdatePosition,
                rtl: rtl,
              });
            }

            var wrapperClazz = cls([prefix + 'overlay-wrapper', wrapperClassName]);
            var newWrapperStyle = _default$6(
              {},
              {
                display: stateVisible ? '' : 'none',
              },
              wrapperStyle,
            );

            var maskClazz = cls(
              ((_classnames2 = {}),
              (_classnames2[prefix + 'overlay-backdrop'] = true),
              (_classnames2[maskClass] = !!maskClass),
              _classnames2),
            );

            children = React__default['default'].createElement(
              'div',
              { className: wrapperClazz, style: newWrapperStyle, dir: rtl ? 'rtl' : undefined },
              hasMask
                ? React__default['default'].createElement(
                    'div',
                    {
                      className: maskClazz,
                      onClick: this.handleMaskClick,
                      onMouseEnter: onMaskMouseEnter,
                      onMouseLeave: onMaskMouseLeave,
                      dir: rtl ? 'rtl' : undefined,
                    },
                    isChildrenInMask && children,
                  )
                : null,
              !isChildrenInMask && children,
            );
          }

          return React__default['default'].createElement(
            Gateway$1,
            _default$6({ container: container, target: target, children: children }, { ref: this.saveGatewayRef }),
          );
        };

        return Overlay;
      })(React.Component)),
    (_class$h.propTypes = {
      prefix: PropTypes$2.string,
      pure: PropTypes$2.bool,
      rtl: PropTypes$2.bool,
      className: PropTypes$2.string,
      style: PropTypes$2.object,
      /**
       * 弹层内容
       */
      children: PropTypes$2.any,
      /**
       * 是否显示弹层
       */
      visible: PropTypes$2.bool,
      /**
       * 弹层请求关闭时触发事件的回调函数
       * @param {String} type 弹层关闭的来源
       * @param {Object} e DOM 事件
       */
      onRequestClose: PropTypes$2.func,
      /**
       * 弹层定位的参照元素
       */
      target: PropTypes$2.any,
      /**
       * 弹层相对于参照元素的定位, 详见开发指南的[定位部分](#定位)
       */
      align: PropTypes$2.oneOfType([PropTypes$2.string, PropTypes$2.bool]),
      /**
       * 弹层相对于trigger的定位的微调, 接收数组[hoz, ver], 表示弹层在 left / top 上的增量
       * e.g. [100, 100] 表示往右(RTL 模式下是往左) 、下分布偏移100px
       */
      offset: PropTypes$2.array,
      /**
       * 渲染组件的容器，如果是函数需要返回 ref，如果是字符串则是该 DOM 的 id，也可以直接传入 DOM 节点
       */
      container: PropTypes$2.any,
      /**
       * 是否显示遮罩
       */
      hasMask: PropTypes$2.bool,
      /**
       * 是否支持 esc 按键关闭弹层
       */
      canCloseByEsc: PropTypes$2.bool,
      /**
       * 点击弹层外的区域是否关闭弹层，不显示遮罩时生效
       */
      canCloseByOutSideClick: PropTypes$2.bool,
      /**
       * 点击遮罩区域是否关闭弹层，显示遮罩时生效
       */
      canCloseByMask: PropTypes$2.bool,
      /**
       * 弹层打开前触发事件的回调函数
       */
      beforeOpen: PropTypes$2.func,
      /**
       * 弹层打开时触发事件的回调函数
       */
      onOpen: PropTypes$2.func,
      /**
       * 弹层打开后触发事件的回调函数, 如果有动画，则在动画结束后触发
       */
      afterOpen: PropTypes$2.func,
      /**
       * 弹层关闭前触发事件的回调函数
       */
      beforeClose: PropTypes$2.func,
      /**
       * 弹层关闭时触发事件的回调函数
       */
      onClose: PropTypes$2.func,
      /**
       * 弹层关闭后触发事件的回调函数, 如果有动画，则在动画结束后触发
       */
      afterClose: PropTypes$2.func,
      /**
       * 弹层定位完成前触发的事件
       */
      beforePosition: PropTypes$2.func,
      /**
       * 弹层定位完成时触发的事件
       * @param {Object} config 定位的参数
       * @param {Array} config.align 对齐方式，如 ['cc', 'cc']（如果开启 needAdjust，可能和预先设置的 align 不同）
       * @param {Number} config.top 距离视口顶部距离
       * @param {Number} config.left 距离视口左侧距离
       * @param {Object} node 定位参照的容器节点
       */
      onPosition: PropTypes$2.func,
      /**
       * 是否在每次弹层重新渲染后强制更新定位信息，一般用于弹层内容区域大小发生变化时，仍需保持原来的定位方式
       */
      shouldUpdatePosition: PropTypes$2.bool,
      /**
       * 弹层打开时是否让其中的元素自动获取焦点
       */
      autoFocus: PropTypes$2.bool,
      /**
       * 当弹层由于页面滚动等情况不在可视区域时，是否自动调整定位以出现在可视区域
       */
      needAdjust: PropTypes$2.bool,
      /**
       * 是否禁用页面滚动
       */
      disableScroll: PropTypes$2.bool,
      /**
       * 隐藏时是否保留子节点
       */
      cache: PropTypes$2.bool,
      /**
       * 安全节点，当点击 document 的时候，如果包含该节点则不会关闭弹层，如果是函数需要返回 ref，如果是字符串则是该 DOM 的 id，也可以直接传入 DOM 节点，或者以上值组成的数组
       */
      safeNode: PropTypes$2.any,
      /**
       * 弹层的根节点的样式类
       */
      wrapperClassName: PropTypes$2.string,
      /**
       * 弹层的根节点的内联样式
       */
      wrapperStyle: PropTypes$2.object,
      /**
       * 配置动画的播放方式，支持 { in: 'enter-class', out: 'leave-class' } 的对象参数，如果设置为 false，则不播放动画。 请参考 Animate 组件的文档获取可用的动画名
       * @default { in: 'expandInDown', out: 'expandOutUp' }
       */
      animation: PropTypes$2.oneOfType([PropTypes$2.object, PropTypes$2.bool]),
      onMaskMouseEnter: PropTypes$2.func,
      onMaskMouseLeave: PropTypes$2.func,
      onClick: PropTypes$2.func,
      maskClass: PropTypes$2.string,
      isChildrenInMask: PropTypes$2.bool,
      // 当 pin 元素（一般是弹层）是 fixed 布局的时候，pin 元素是否要跟随 base 元素（一般是trigger）
      // 举例来说，dialog/drawer 这类组件弹层是不跟随trigger的，而 fixed 布局下的subNav是跟随trigger的
      pinFollowBaseElementWhenFixed: PropTypes$2.bool,
    }),
    (_class$h.defaultProps = {
      prefix: 'next-',
      pure: false,
      visible: false,
      onRequestClose: noop$5,
      target: Position.VIEWPORT,
      align: 'tl bl',
      offset: [0, 0],
      hasMask: false,
      canCloseByEsc: true,
      canCloseByOutSideClick: true,
      canCloseByMask: true,
      beforeOpen: noop$5,
      onOpen: noop$5,
      afterOpen: noop$5,
      beforeClose: noop$5,
      onClose: noop$5,
      afterClose: noop$5,
      beforePosition: noop$5,
      onPosition: noop$5,
      onMaskMouseEnter: noop$5,
      onMaskMouseLeave: noop$5,
      shouldUpdatePosition: false,
      autoFocus: false,
      needAdjust: true,
      disableScroll: false,
      cache: false,
      isChildrenInMask: false,
      onClick: noop$5,
      maskClass: '',
    }),
    _temp$e);
  Overlay$1.displayName = 'Overlay';

  var Overlay$2 = polyfill(Overlay$1);

  var _class$g, _temp$d;

  var noop$4 = func.noop,
    makeChain = func.makeChain,
    bindCtx$2 = func.bindCtx;

  /**
   * Overlay.Popup
   * @description 继承 Overlay 的 API，除非特别说明
   * */

  var Popup$2 =
    ((_temp$d = _class$g =
      (function (_Component) {
        _default$2(Popup, _Component);

        function Popup(props) {
          _default$5(this, Popup);

          var _this = _default$3(this, _Component.call(this, props));

          _this.state = {
            visible: typeof props.visible === 'undefined' ? props.defaultVisible : props.visible,
          };

          bindCtx$2(_this, [
            'handleTriggerClick',
            'handleTriggerKeyDown',
            'handleTriggerMouseEnter',
            'handleTriggerMouseLeave',
            'handleTriggerFocus',
            'handleTriggerBlur',
            'handleContentMouseEnter',
            'handleContentMouseLeave',
            'handleContentMouseDown',
            'handleRequestClose',
            'handleMaskMouseEnter',
            'handleMaskMouseLeave',
          ]);
          return _this;
        }

        Popup.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {
          if ('visible' in nextProps) {
            return _default$6({}, prevState, {
              visible: nextProps.visible,
            });
          }

          return null;
        };

        Popup.prototype.componentWillUnmount = function componentWillUnmount() {
          var _this2 = this;

          ['_timer', '_hideTimer', '_showTimer'].forEach(function (time) {
            _this2[time] && clearTimeout(_this2[time]);
          });
        };

        Popup.prototype.handleVisibleChange = function handleVisibleChange(visible, type, e) {
          if (!('visible' in this.props)) {
            this.setState({
              visible: visible,
            });
          }

          this.props.onVisibleChange(visible, type, e);
        };

        Popup.prototype.handleTriggerClick = function handleTriggerClick(e) {
          if (this.state.visible && !this.props.canCloseByTrigger) {
            return;
          }

          this.handleVisibleChange(!this.state.visible, 'fromTrigger', e);
        };

        Popup.prototype.handleTriggerKeyDown = function handleTriggerKeyDown(e) {
          var triggerClickKeycode = this.props.triggerClickKeycode;

          var keycodes = Array.isArray(triggerClickKeycode) ? triggerClickKeycode : [triggerClickKeycode];
          if (keycodes.includes(e.keyCode)) {
            e.preventDefault();
            this.handleTriggerClick(e);
          }
        };

        Popup.prototype.handleTriggerMouseEnter = function handleTriggerMouseEnter(e) {
          var _this3 = this;

          this._mouseNotFirstOnMask = false;

          if (this._hideTimer) {
            clearTimeout(this._hideTimer);
            this._hideTimer = null;
          }
          if (this._showTimer) {
            clearTimeout(this._showTimer);
            this._showTimer = null;
          }
          if (!this.state.visible) {
            this._showTimer = setTimeout(function () {
              _this3.handleVisibleChange(true, 'fromTrigger', e);
            }, this.props.delay);
          }
        };

        Popup.prototype.handleTriggerMouseLeave = function handleTriggerMouseLeave(e, type) {
          var _this4 = this;

          if (this._showTimer) {
            clearTimeout(this._showTimer);
            this._showTimer = null;
          }
          if (this.state.visible) {
            this._hideTimer = setTimeout(function () {
              _this4.handleVisibleChange(false, type || 'fromTrigger', e);
            }, this.props.delay);
          }
        };

        Popup.prototype.handleTriggerFocus = function handleTriggerFocus(e) {
          this.handleVisibleChange(true, 'fromTrigger', e);
        };

        Popup.prototype.handleTriggerBlur = function handleTriggerBlur(e) {
          if (!this._isForwardContent) {
            this.handleVisibleChange(false, 'fromTrigger', e);
          }
          this._isForwardContent = false;
        };

        Popup.prototype.handleContentMouseDown = function handleContentMouseDown() {
          this._isForwardContent = true;
        };

        Popup.prototype.handleContentMouseEnter = function handleContentMouseEnter() {
          clearTimeout(this._hideTimer);
        };

        Popup.prototype.handleContentMouseLeave = function handleContentMouseLeave(e) {
          this.handleTriggerMouseLeave(e, 'fromContent');
        };

        Popup.prototype.handleMaskMouseEnter = function handleMaskMouseEnter() {
          if (!this._mouseNotFirstOnMask) {
            clearTimeout(this._hideTimer);
            this._hideTimer = null;
            this._mouseNotFirstOnMask = false;
          }
        };

        Popup.prototype.handleMaskMouseLeave = function handleMaskMouseLeave() {
          this._mouseNotFirstOnMask = true;
        };

        Popup.prototype.handleRequestClose = function handleRequestClose(type, e) {
          this.handleVisibleChange(false, type, e);
        };

        Popup.prototype.renderTrigger = function renderTrigger() {
          var _this5 = this;

          var _props = this.props,
            trigger = _props.trigger,
            disabled = _props.disabled;

          var props = {
            key: 'trigger',
            'aria-haspopup': true,
            'aria-expanded': this.state.visible,
          };

          if (!this.state.visible) {
            props['aria-describedby'] = undefined;
          }

          if (!disabled) {
            var triggerType = this.props.triggerType;

            var triggerTypes = Array.isArray(triggerType) ? triggerType : [triggerType];

            var _ref = (trigger && trigger.props) || {},
              onClick = _ref.onClick,
              onKeyDown = _ref.onKeyDown,
              onMouseEnter = _ref.onMouseEnter,
              onMouseLeave = _ref.onMouseLeave,
              onFocus = _ref.onFocus,
              onBlur = _ref.onBlur;

            triggerTypes.forEach(function (triggerType) {
              switch (triggerType) {
                case 'click':
                  props.onClick = makeChain(_this5.handleTriggerClick, onClick);
                  props.onKeyDown = makeChain(_this5.handleTriggerKeyDown, onKeyDown);
                  break;
                case 'hover':
                  props.onMouseEnter = makeChain(_this5.handleTriggerMouseEnter, onMouseEnter);
                  props.onMouseLeave = makeChain(_this5.handleTriggerMouseLeave, onMouseLeave);
                  break;
                case 'focus':
                  props.onFocus = makeChain(_this5.handleTriggerFocus, onFocus);
                  props.onBlur = makeChain(_this5.handleTriggerBlur, onBlur);
                  break;
              }
            });
          }

          return trigger && React__default['default'].cloneElement(trigger, props);
        };

        Popup.prototype.renderContent = function renderContent() {
          var _this6 = this;

          var _props2 = this.props,
            children = _props2.children,
            triggerType = _props2.triggerType;

          var triggerTypes = Array.isArray(triggerType) ? triggerType : [triggerType];
          var content = React.Children.only(children);
          var _content$props = content.props,
            onMouseDown = _content$props.onMouseDown,
            onMouseEnter = _content$props.onMouseEnter,
            onMouseLeave = _content$props.onMouseLeave;

          var props = {
            key: 'portal',
          };

          triggerTypes.forEach(function (triggerType) {
            switch (triggerType) {
              case 'focus':
                props.onMouseDown = makeChain(_this6.handleContentMouseDown, onMouseDown);
                break;
              case 'hover':
                props.onMouseEnter = makeChain(_this6.handleContentMouseEnter, onMouseEnter);
                props.onMouseLeave = makeChain(_this6.handleContentMouseLeave, onMouseLeave);
                break;
            }
          });

          return React__default['default'].cloneElement(content, props);
        };

        Popup.prototype.renderPortal = function renderPortal() {
          var _this7 = this;

          var _props3 = this.props,
            target = _props3.target,
            safeNode = _props3.safeNode,
            followTrigger = _props3.followTrigger,
            triggerType = _props3.triggerType,
            hasMask = _props3.hasMask,
            wrapperStyle = _props3.wrapperStyle,
            others = _default$1(_props3, [
              'target',
              'safeNode',
              'followTrigger',
              'triggerType',
              'hasMask',
              'wrapperStyle',
            ]);

          var container = this.props.container;

          var findTriggerNode = function findTriggerNode() {
            return ReactDOM.findDOMNode(_this7);
          };
          var safeNodes = Array.isArray(safeNode) ? [].concat(safeNode) : [safeNode];
          safeNodes.unshift(findTriggerNode);

          var newWrapperStyle = wrapperStyle || {};

          if (followTrigger) {
            container = function container(trigger) {
              return (trigger && trigger.parentNode) || trigger;
            };
            newWrapperStyle.position = 'relative';
          }

          if (triggerType === 'hover' && hasMask) {
            others.onMaskMouseEnter = this.handleMaskMouseEnter;
            others.onMaskMouseLeave = this.handleMaskMouseLeave;
          }

          return React__default['default'].createElement(
            Overlay$2,
            _default$6({}, others, {
              key: 'overlay',
              ref: function ref(overlay) {
                return (_this7.overlay = overlay);
              },
              visible: this.state.visible,
              target: target || findTriggerNode,
              container: container,
              safeNode: safeNodes,
              wrapperStyle: newWrapperStyle,
              triggerType: triggerType,
              hasMask: hasMask,
              onRequestClose: this.handleRequestClose,
            }),
            this.props.children && this.renderContent(),
          );
        };

        Popup.prototype.render = function render() {
          return [this.renderTrigger(), this.renderPortal()];
        };

        return Popup;
      })(React.Component)),
    (_class$g.propTypes = {
      /**
       * 弹层内容
       */
      children: PropTypes$2.node,
      /**
       * 触发弹层显示或隐藏的元素
       */
      trigger: PropTypes$2.element,
      /**
       * 触发弹层显示或隐藏的操作类型，可以是 'click'，'hover'，'focus'，或者它们组成的数组，如 ['hover', 'focus']
       */
      triggerType: PropTypes$2.oneOfType([PropTypes$2.string, PropTypes$2.array]),
      /**
       * 当 triggerType 为 click 时才生效，可自定义触发弹层显示的键盘码
       */

      triggerClickKeycode: PropTypes$2.oneOfType([PropTypes$2.number, PropTypes$2.array]),
      /**
       * 弹层当前是否显示
       */
      visible: PropTypes$2.bool,
      /**
       * 弹层默认是否显示
       */
      defaultVisible: PropTypes$2.bool,
      /**
       * 弹层显示或隐藏时触发的回调函数
       * @param {Boolean} visible 弹层是否显示
       * @param {String} type 触发弹层显示或隐藏的来源 fromTrigger 表示由trigger的点击触发； docClick 表示由document的点击触发
       * @param {Object} e DOM事件
       */
      onVisibleChange: PropTypes$2.func,
      /**
       * 设置此属性，弹层无法显示或隐藏
       */
      disabled: PropTypes$2.bool,
      autoFit: PropTypes$2.bool,
      /**
       * 弹层显示或隐藏的延时时间（以毫秒为单位），在 triggerType 被设置为 hover 时生效
       */
      delay: PropTypes$2.number,
      /**
       * trigger 是否可以关闭弹层
       */
      canCloseByTrigger: PropTypes$2.bool,
      /**
       * 弹层定位的参照元素
       * @default target 属性，即触发元素
       */
      target: PropTypes$2.any,
      safeNode: PropTypes$2.any,
      /**
       * 是否跟随trigger滚动
       */
      followTrigger: PropTypes$2.bool,
      container: PropTypes$2.any,
      hasMask: PropTypes$2.bool,
      wrapperStyle: PropTypes$2.object,
      rtl: PropTypes$2.bool,
    }),
    (_class$g.defaultProps = {
      triggerType: 'hover',
      triggerClickKeycode: [KEYCODE.SPACE, KEYCODE.ENTER],
      defaultVisible: false,
      onVisibleChange: noop$4,
      disabled: false,
      autoFit: false,
      delay: 200,
      canCloseByTrigger: true,
      followTrigger: false,
      container: function container() {
        return document.body;
      },
      rtl: false,
    }),
    _temp$d);
  Popup$2.displayName = 'Popup';

  var Popup$3 = polyfill(Popup$2);

  Overlay$2.Gateway = Gateway$1;
  Overlay$2.Position = Position;
  Overlay$2.Popup = ConfigProvider$1.config(Popup$3, {
    exportNames: ['overlay'],
  });

  var Overlay = ConfigProvider$1.config(Overlay$2, {
    exportNames: ['getContent', 'getContentNode'],
  });

  var customCache = new Set();

  /** Icon.createFromIconfontCN
   *  @description 通过自定义 iconfont源来使用使用svg格式的图片
   *  @order 1
   */
  function createFromIconfontCN() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var scriptUrl = options.scriptUrl,
      _options$extraCommonP = options.extraCommonProps,
      extraCommonProps = _options$extraCommonP === undefined ? {} : _options$extraCommonP;

    var hasExist = customCache.has(scriptUrl);

    if (document.querySelector('script[data-namespace="' + scriptUrl + '"]')) {
      hasExist = true;
    }

    /**
     * DOM API required.
     * Make sure in browser environment.
     * The Custom Icon will create a <script/>
     * that loads SVG symbols and insert the SVG Element into the document body.
     */
    if (
      typeof document !== 'undefined' &&
      typeof window !== 'undefined' &&
      typeof document.createElement === 'function' &&
      typeof scriptUrl === 'string' &&
      scriptUrl.length &&
      !hasExist
    ) {
      var script = document.createElement('script');
      script.setAttribute('src', scriptUrl);
      script.setAttribute('data-namespace', scriptUrl);
      customCache.add(scriptUrl);
      document.body.appendChild(script);
    }

    var Iconfont = function Iconfont(props) {
      var _cx;

      var type = props.type,
        size = props.size,
        children = props.children,
        className = props.className,
        _props$prefix = props.prefix,
        prefix = _props$prefix === undefined ? 'next-' : _props$prefix,
        others = _default$1(props, ['type', 'size', 'children', 'className', 'prefix']);

      // component > children > type

      var content = null;
      if (props.type) {
        content = React__default['default'].createElement('use', { xlinkHref: '#' + type });
      }
      if (children) {
        content = children;
      }

      var classes = cls(((_cx = {}), (_cx[prefix + 'icon-remote'] = true), _cx), className);

      return React__default['default'].createElement(
        Icon$2,
        { size: size },
        React__default['default'].createElement(
          'svg',
          _default$6(
            {
              className: classes,
              focusable: false,
            },
            others,
            extraCommonProps,
          ),
          content,
        ),
      );
    };

    Iconfont.displayName = 'Iconfont';

    return ConfigProvider$1.config(Iconfont);
  }

  var _class$f, _temp$c;
  /**
   * Icon
   */
  var Icon$1 =
    ((_temp$c = _class$f =
      (function (_Component) {
        _default$2(Icon, _Component);

        function Icon() {
          _default$5(this, Icon);

          return _default$3(this, _Component.apply(this, arguments));
        }

        Icon.prototype.render = function render() {
          var _cx;

          /* eslint-disable no-unused-vars*/
          var _props = this.props,
            prefix = _props.prefix,
            type = _props.type,
            size = _props.size,
            className = _props.className,
            rtl = _props.rtl,
            style = _props.style,
            children = _props.children;

          var others = obj.pickOthers(_default$6({}, Icon.propTypes), this.props);

          var classes = cls(
            ((_cx = {}),
            (_cx[prefix + 'icon'] = true),
            (_cx[prefix + 'icon-' + type] = !!type),
            (_cx['' + prefix + size] = !!size && typeof size === 'string'),
            (_cx[className] = !!className),
            _cx),
          );

          if (
            rtl &&
            [
              'arrow-left',
              'arrow-right',
              'arrow-double-left',
              'arrow-double-right',
              'switch',
              'sorting',
              'descending',
              'ascending',
            ].indexOf(type) !== -1
          ) {
            others.dir = 'rtl';
          }

          var sizeStyle =
            typeof size === 'number'
              ? {
                  width: size,
                  height: size,
                  lineHeight: size + 'px',
                  fontSize: size,
                }
              : {};

          return React__default['default'].createElement(
            'i',
            _default$6({}, others, {
              style: _default$6({}, sizeStyle, style),
              className: classes,
            }),
            children,
          );
        };

        return Icon;
      })(React.Component)),
    (_class$f.propTypes = _default$6({}, ConfigProvider$1.propTypes, {
      /**
       * 指定显示哪种图标
       */
      type: PropTypes$2.string,
      children: PropTypes$2.node,
      /**
       * 指定图标大小
       * <br/>**可选值**<br/> xxs, xs, small, medium, large, xl, xxl, xxxl, inherit
       */
      size: PropTypes$2.oneOfType([
        PropTypes$2.oneOf(['xxs', 'xs', 'small', 'medium', 'large', 'xl', 'xxl', 'xxxl', 'inherit']),
        PropTypes$2.number,
      ]),
      className: PropTypes$2.string,
      style: PropTypes$2.object,
    })),
    (_class$f.defaultProps = {
      prefix: 'next-',
      size: 'medium',
    }),
    (_class$f._typeMark = 'icon'),
    _temp$c);
  Icon$1.displayName = 'Icon';

  Icon$1.createFromIconfontCN = createFromIconfontCN;
  var Icon$2 = ConfigProvider$1.config(Icon$1);

  /**
   * Created by xiachi on 17/1/17.
   */

  var normalMap = {
    t: {
      align: 'bc tc',
      rtlAlign: 'bc tc',
      arrow: 'bottom',
      trOrigin: 'bottom',
      rtlTrOrigin: 'bottom',
      offset: [0, -12],
    },
    r: {
      align: 'cl cr',
      rtlAlign: 'cr cl',
      arrow: 'left',
      trOrigin: 'left',
      rtlTrOrigin: 'right',
      offset: [12, 0],
    },
    b: {
      align: 'tc bc',
      rtlAlign: 'tc bc',
      arrow: 'top',
      trOrigin: 'top',
      rtlTrOrigin: 'top',
      offset: [0, 12],
    },
    l: {
      align: 'cr cl',
      rtlAlign: 'cl cr',
      arrow: 'right',
      trOrigin: 'right',
      rtlTrOrigin: 'left',
      offset: [-12, 0],
    },
    tl: {
      align: 'br tc',
      rtlAlign: 'bl tc',
      arrow: 'bottom-right',
      trOrigin: 'bottom right',
      rtlTrOrigin: 'bottom left',
      offset: [20, -12],
    },
    tr: {
      align: 'bl tc',
      rtlAlign: 'br tc',
      arrow: 'bottom-left',
      trOrigin: 'bottom left',
      rtlTrOrigin: 'bottom right',
      offset: [-20, -12],
    },
    rt: {
      align: 'bl cr',
      rtlAlign: 'br cl',
      arrow: 'left-bottom',
      trOrigin: 'bottom left',
      rtlTrOrigin: 'bottom right',
      offset: [12, 20],
    },
    rb: {
      align: 'tl cr',
      rtlAlign: 'tr cl',
      arrow: 'left-top',
      trOrigin: 'top left',
      rtlTrOrigin: 'top right',
      offset: [12, -20],
    },
    bl: {
      align: 'tr bc',
      rtlAlign: 'tl bc',
      arrow: 'top-right',
      trOrigin: 'top right',
      rtlTrOrigin: 'top left',
      offset: [20, 12],
    },
    br: {
      align: 'tl bc',
      rtlAlign: 'tr bc',
      arrow: 'top-left',
      trOrigin: 'top left',
      rtlTrOrigin: 'top right',
      offset: [-20, 12],
    },
    lt: {
      align: 'br cl',
      rtlAlign: 'bl cr',
      arrow: 'right-bottom',
      trOrigin: 'bottom right',
      rtlTrOrigin: 'bottom left',
      offset: [-12, 20],
    },
    lb: {
      align: 'tr cl',
      rtlAlign: 'tl cr',
      arrow: 'right-top',
      trOrigin: 'top right',
      rtlTrOrigin: 'top left',
      offset: [-12, -20],
    },
  };
  var edgeMap = {
    t: {
      align: 'bc tc',
      rtlAlign: 'bc tc',
      arrow: 'bottom',
      trOrigin: 'bottom',
      rtlTrOrigin: 'bottom',
      offset: [0, -12],
    },
    r: {
      align: 'cl cr',
      rtlAlign: 'cr cl',
      arrow: 'left',
      trOrigin: 'left',
      rtlTrOrigin: 'right',
      offset: [12, 0],
    },
    b: {
      align: 'tc bc',
      rtlAlign: 'tc bc',
      arrow: 'top',
      trOrigin: 'top',
      rtlTrOrigin: 'top',
      offset: [0, 12],
    },
    l: {
      align: 'cr cl',
      rtlAlign: 'cl cr',
      arrow: 'right',
      trOrigin: 'right',
      rtlTrOrigin: 'left',
      offset: [-12, 0],
    },
    tl: {
      align: 'bl tl',
      rtlAlign: 'br tr',
      arrow: 'bottom-left',
      trOrigin: 'bottom left',
      rtlTrOrigin: 'bottom right',
      offset: [0, -12],
    },
    tr: {
      align: 'br tr',
      rtlAlign: 'bl tl',
      arrow: 'bottom-right',
      trOrigin: 'bottom right',
      rtlTrOrigin: 'bottom left',
      offset: [0, -12],
    },
    rt: {
      align: 'tl tr',
      rtlAlign: 'tr tl',
      arrow: 'left-top',
      trOrigin: 'top left',
      rtlTrOrigin: 'top right',
      offset: [12, 0],
    },
    rb: {
      align: 'bl br',
      rtlAlign: 'br bl',
      arrow: 'left-bottom',
      trOrigin: 'bottom left',
      rtlTrOrigin: 'bottom right',
      offset: [12, 0],
    },
    bl: {
      align: 'tl bl',
      rtlAlign: 'tr br',
      arrow: 'top-left',
      trOrigin: 'top left',
      rtlTrOrigin: 'top right',
      offset: [0, 12],
    },
    br: {
      align: 'tr br',
      rtlAlign: 'tl bl',
      arrow: 'top-right',
      trOrigin: 'top right',
      rtlTrOrigin: 'top left',
      offset: [0, 12],
    },
    lt: {
      align: 'tr tl',
      rtlAlign: 'tl tr',
      arrow: 'right-top',
      trOrigin: 'top right',
      rtlTrOrigin: 'top left',
      offset: [-12, 0],
    },
    lb: {
      align: 'br bl',
      rtlAlign: 'bl br',
      arrow: 'right-bottom',
      trOrigin: 'bottom right',
      rtlTrOrigin: 'bottom left',
      offset: [-12, 0],
    },
  };

  var _class$e, _temp$b;

  /**
   * Created by xiachi on 17/2/10.
   */

  var noop$3 = func.noop;
  var BalloonInner =
    ((_temp$b = _class$e =
      (function (_React$Component) {
        _default$2(BalloonInner, _React$Component);

        function BalloonInner() {
          _default$5(this, BalloonInner);

          return _default$3(this, _React$Component.apply(this, arguments));
        }

        BalloonInner.prototype.render = function render() {
          var _classNames, _classNames2;

          var _props = this.props,
            prefix = _props.prefix,
            closable = _props.closable,
            className = _props.className,
            style = _props.style,
            isTooltip = _props.isTooltip,
            align = _props.align,
            title = _props.title,
            type = _props.type,
            onClose = _props.onClose,
            alignEdge = _props.alignEdge,
            children = _props.children,
            rtl = _props.rtl,
            locale = _props.locale,
            others = _default$1(_props, [
              'prefix',
              'closable',
              'className',
              'style',
              'isTooltip',
              'align',
              'title',
              'type',
              'onClose',
              'alignEdge',
              'children',
              'rtl',
              'locale',
            ]);

          var alignMap = alignEdge ? edgeMap : normalMap;
          var _prefix = prefix;

          if (isTooltip) {
            _prefix = _prefix + 'balloon-tooltip';
          } else {
            _prefix = _prefix + 'balloon';
          }

          var closableInTitle = closable && title !== undefined;
          var closableInContent = closable && title === undefined;

          var classes = cls(
            ((_classNames = {}),
            (_classNames['' + _prefix] = true),
            (_classNames[_prefix + '-' + type] = type),
            (_classNames[_prefix + '-medium'] = true),
            (_classNames[_prefix + '-' + alignMap[align].arrow] = alignMap[align]),
            (_classNames[_prefix + '-closable'] = closableInContent),
            (_classNames[className] = className),
            _classNames),
          );

          var titleCls = cls(
            ((_classNames2 = {}),
            (_classNames2[prefix + 'balloon-title'] = true),
            (_classNames2[_prefix + '-closable'] = closableInTitle),
            _classNames2),
          );

          var closeIcon = React__default['default'].createElement(
            'a',
            {
              role: 'button',
              'aria-label': locale.close,
              tabIndex: '0',
              className: _prefix + '-close',
              onClick: onClose,
            },
            React__default['default'].createElement(Icon$2, { type: 'close', size: 'small' }),
          );

          return React__default['default'].createElement(
            'div',
            _default$6(
              {
                role: 'tooltip',
                'aria-live': 'polite',
                dir: rtl ? 'rtl' : undefined,
                className: classes,
                style: style,
              },
              obj.pickOthers(Object.keys(BalloonInner.propTypes), others),
            ),
            React__default['default'].createElement(
              'div',
              { className: prefix + 'balloon-arrow' },
              React__default['default'].createElement('div', { className: prefix + 'balloon-arrow-content' }),
            ),
            title &&
              React__default['default'].createElement(
                'div',
                { className: titleCls },
                title,
                closableInTitle && closeIcon,
              ),
            React__default['default'].createElement('div', { className: prefix + 'balloon-content' }, children),
            closableInContent && closeIcon,
          );
        };

        return BalloonInner;
      })(React__default['default'].Component)),
    (_class$e.contextTypes = {
      prefix: PropTypes$2.string,
    }),
    (_class$e.propTypes = {
      prefix: PropTypes$2.string,
      rtl: PropTypes$2.bool,
      closable: PropTypes$2.bool,
      children: PropTypes$2.any,
      title: PropTypes$2.node,
      className: PropTypes$2.string,
      alignEdge: PropTypes$2.bool,
      onClose: PropTypes$2.func,
      style: PropTypes$2.any,
      align: PropTypes$2.string,
      type: PropTypes$2.string,
      isTooltip: PropTypes$2.bool,
      locale: PropTypes$2.object,
      pure: PropTypes$2.bool,
    }),
    (_class$e.defaultProps = {
      prefix: 'next-',
      closable: true,
      onClose: noop$3,
      locale: defaultLocale.Balloon,
      align: 'b',
      type: 'normal',
      alignEdge: false,
      pure: false,
    }),
    _temp$b);
  BalloonInner.displayName = 'BalloonInner';

  var Inner = BalloonInner;

  function getDisabledCompatibleTrigger(element) {
    if (element.type.displayName === 'Config(Button)' && element.props.disabled) {
      var displayStyle =
        element.props.style && element.props.style.display ? element.props.style.display : 'inline-block';
      var child = React__default['default'].cloneElement(element, {
        style: _default$6({}, element.props.style, {
          pointerEvents: 'none',
        }),
      });
      return (
        // eslint-disable-next-line
        React__default['default'].createElement(
          'span',
          { style: { display: displayStyle, cursor: 'not-allowed' } },
          child,
        )
      );
    }
    return element;
  }

  var _class$d, _temp$a;

  var noop$2 = func.noop;
  var Popup$1 = Overlay.Popup;

  var alignList = ['t', 'r', 'b', 'l', 'tl', 'tr', 'bl', 'br', 'lt', 'lb', 'rt', 'rb'];

  var alignMap$1 = normalMap;

  /** Balloon */
  var Balloon$1 =
    ((_temp$a = _class$d =
      (function (_React$Component) {
        _default$2(Balloon, _React$Component);

        function Balloon(props, context) {
          _default$5(this, Balloon);

          var _this = _default$3(this, _React$Component.call(this, props, context));

          _this.state = {
            align: alignList.includes(props.align) ? props.align : 'b',
            visible: 'visible' in props ? props.visible : props.defaultVisible,
          };
          _this._onClose = _this._onClose.bind(_this);
          _this._onPosition = _this._onPosition.bind(_this);
          _this._onVisibleChange = _this._onVisibleChange.bind(_this);
          return _this;
        }

        Balloon.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {
          var nextState = {};
          if ('visible' in nextProps) {
            nextState.visible = nextProps.visible;
          }

          if (!prevState.innerAlign && 'align' in nextProps && alignList.includes(nextProps.align)) {
            nextState.align = nextProps.align;
            nextState.innerAlign = false;
          }

          return nextState;
        };

        Balloon.prototype._onVisibleChange = function _onVisibleChange(visible, trigger) {
          // Not Controlled
          if (!('visible' in this.props)) {
            this.setState({
              visible: visible,
            });
          }

          this.props.onVisibleChange(visible, trigger);

          if (!visible) {
            this.props.onClose();
          }
        };

        Balloon.prototype._onClose = function _onClose(e) {
          this._onVisibleChange(false, 'closeClick');

          //必须加上preventDefault,否则单测IE下报错,出现full page reload 异常
          e.preventDefault();
        };

        Balloon.prototype._onPosition = function _onPosition(res) {
          var rtl = this.props.rtl;

          alignMap$1 = this.props.alignEdge ? edgeMap : normalMap;
          var newAlign = res.align.join(' ');
          var resAlign = void 0;

          var alignKey = 'align';
          if (rtl) {
            alignKey = 'rtlAlign';
          }

          for (var key in alignMap$1) {
            if (alignMap$1[key][alignKey] === newAlign) {
              resAlign = key;

              break;
            }
          }

          resAlign = resAlign || this.state.align;
          if (resAlign !== this.state.align) {
            this.setState({
              align: resAlign,
              innerAlign: true,
            });
          }
        };

        Balloon.prototype.render = function render() {
          var _props = this.props,
            id = _props.id,
            type = _props.type,
            prefix = _props.prefix,
            className = _props.className,
            title = _props.title,
            alignEdge = _props.alignEdge,
            trigger = _props.trigger,
            triggerType = _props.triggerType,
            children = _props.children,
            closable = _props.closable,
            shouldUpdatePosition = _props.shouldUpdatePosition,
            delay = _props.delay,
            needAdjust = _props.needAdjust,
            safeId = _props.safeId,
            autoFocus = _props.autoFocus,
            safeNode = _props.safeNode,
            onClick = _props.onClick,
            onHover = _props.onHover,
            animation = _props.animation,
            offset = _props.offset,
            style = _props.style,
            container = _props.container,
            popupContainer = _props.popupContainer,
            cache = _props.cache,
            popupStyle = _props.popupStyle,
            popupClassName = _props.popupClassName,
            popupProps = _props.popupProps,
            followTrigger = _props.followTrigger,
            rtl = _props.rtl,
            others = _default$1(_props, [
              'id',
              'type',
              'prefix',
              'className',
              'title',
              'alignEdge',
              'trigger',
              'triggerType',
              'children',
              'closable',
              'shouldUpdatePosition',
              'delay',
              'needAdjust',
              'safeId',
              'autoFocus',
              'safeNode',
              'onClick',
              'onHover',
              'animation',
              'offset',
              'style',
              'container',
              'popupContainer',
              'cache',
              'popupStyle',
              'popupClassName',
              'popupProps',
              'followTrigger',
              'rtl',
            ]);

          if (container) {
            log.deprecated('container', 'popupContainer', 'Balloon');
          }

          var align = this.state.align;

          alignMap$1 = alignEdge ? edgeMap : normalMap;
          var _prefix = this.context.prefix || prefix;

          var trOrigin = 'trOrigin';
          if (rtl) {
            trOrigin = 'rtlTrOrigin';
          }

          var _offset = [alignMap$1[align].offset[0] + offset[0], alignMap$1[align].offset[1] + offset[1]];
          var transformOrigin = alignMap$1[align][trOrigin];
          var _style = _default$6({ transformOrigin: transformOrigin }, style);

          var content = React__default['default'].createElement(
            Inner,
            _default$6({}, obj.pickOthers(Object.keys(Balloon.propTypes), others), {
              id: id,
              title: title,
              prefix: _prefix,
              closable: closable,
              onClose: this._onClose,
              className: className,
              style: _style,
              align: align,
              type: type,
              rtl: rtl,
              alignEdge: alignEdge,
            }),
            children,
          );

          var triggerProps = {};
          triggerProps['aria-describedby'] = id;
          triggerProps.tabIndex = '0';

          var ariaTrigger = id ? React__default['default'].cloneElement(trigger, triggerProps) : trigger;

          var newTrigger = getDisabledCompatibleTrigger(
            React__default['default'].isValidElement(ariaTrigger)
              ? ariaTrigger
              : React__default['default'].createElement('span', null, ariaTrigger),
          );

          return React__default['default'].createElement(
            Popup$1,
            _default$6({}, popupProps, {
              followTrigger: followTrigger,
              trigger: newTrigger,
              cache: cache,
              safeId: safeId,
              triggerType: triggerType,
              align: alignMap$1[align].align,
              offset: _offset,
              visible: this.state.visible,
              onPosition: this._onPosition,
              onClick: onClick,
              onHover: onHover,
              afterClose: this.props.afterClose,
              onVisibleChange: this._onVisibleChange,
              shouldUpdatePosition: shouldUpdatePosition,
              needAdjust: needAdjust,
              animation: animation,
              delay: delay,
              autoFocus: triggerType === 'focus' ? false : autoFocus,
              safeNode: safeNode,
              container: popupContainer || container,
              className: popupClassName,
              style: popupStyle,
              rtl: rtl,
            }),
            content,
          );
        };

        return Balloon;
      })(React__default['default'].Component)),
    (_class$d.contextTypes = {
      prefix: PropTypes$2.string,
    }),
    (_class$d.propTypes = {
      prefix: PropTypes$2.string,
      pure: PropTypes$2.bool,
      rtl: PropTypes$2.bool,
      /**
       * 自定义类名
       */
      className: PropTypes$2.string,
      /**
       * 自定义内敛样式
       */
      style: PropTypes$2.object,
      /**
       * 浮层的内容
       */
      children: PropTypes$2.any,
      size: PropTypes$2.string,
      /**
       * 样式类型
       */
      type: PropTypes$2.oneOf(['normal', 'primary']),
      /**
       * 标题
       * @version 1.23
       */
      title: PropTypes$2.node,
      /**
       * 弹层当前显示的状态
       */
      visible: PropTypes$2.bool,
      /**
       * 弹层默认显示的状态
       */
      defaultVisible: PropTypes$2.bool,
      /**
       * 弹层在显示和隐藏触发的事件
       * @param {Boolean} visible 弹层是否隐藏和显示
       * @param {String} type 触发弹层显示或隐藏的来源， closeClick 表示由自带的关闭按钮触发； fromTrigger 表示由trigger的点击触发； docClick 表示由document的点击触发
       */
      onVisibleChange: PropTypes$2.func,
      /**
       * 弹出层对齐方式, 是否为边缘对齐
       */
      alignEdge: PropTypes$2.bool,
      /**
       * 是否显示关闭按钮
       */
      closable: PropTypes$2.bool,
      /**
       * 弹出层位置
       * @enumdesc 上, 右, 下, 左, 上左, 上右, 下左, 下右, 左上, 左下, 右上, 右下
       */
      align: PropTypes$2.oneOf(alignList),
      /**
       * 弹层相对于trigger的定位的微调, 接收数组[hoz, ver], 表示弹层在 left / top 上的增量
       * e.g. [100, 100] 表示往右(RTL 模式下是往左) 、下分布偏移100px
       */
      offset: PropTypes$2.array,
      /**
       * 触发元素
       */
      trigger: PropTypes$2.any,
      /**
       * 触发行为
       * 鼠标悬浮, 鼠标点击('hover','click')或者它们组成的数组，如 ['hover', 'click'], 强烈不建议使用'focus'，若弹窗内容有复杂交互请使用click
       */
      triggerType: PropTypes$2.oneOfType([PropTypes$2.string, PropTypes$2.array]),

      onClick: PropTypes$2.func,
      /**
       * 任何visible为false时会触发的事件
       */
      onClose: PropTypes$2.func,
      onHover: PropTypes$2.func,
      /**
       * 是否进行自动位置调整
       */
      needAdjust: PropTypes$2.bool,
      /**
       * 弹层在触发以后的延时显示, 单位毫秒 ms
       */
      delay: PropTypes$2.number,
      /**
       * 浮层关闭后触发的事件, 如果有动画，则在动画结束后触发
       */
      afterClose: PropTypes$2.func,
      /**
       * 强制更新定位信息，在气泡内容宽、高发生变化后重新定位，推荐开启
       */
      shouldUpdatePosition: PropTypes$2.bool,
      /**
       * 弹层出现后是否自动focus到内部第一个元素
       */
      autoFocus: PropTypes$2.bool,
      /**
       * 安全节点:对于triggetType为click的浮层,会在点击除了浮层外的其它区域时关闭浮层.safeNode用于添加不触发关闭的节点, 值可以是dom节点的id或者是节点的dom对象
       */
      safeNode: PropTypes$2.string,
      /**
       * 用来指定safeNode节点的id，和safeNode配合使用
       */
      safeId: PropTypes$2.string,
      /**
       * 配置动画的播放方式，格式是{in: '', out: ''}， 常用的动画class请查看Animate组件文档
       * @param {String} in 进场动画
       * @param {String} out 出场动画
       */
      animation: PropTypes$2.oneOfType([PropTypes$2.object, PropTypes$2.bool]),

      /**
       * 弹层的dom节点关闭时是否删除
       */
      cache: PropTypes$2.bool,
      /**
       * 指定浮层渲染的父节点, 可以为节点id的字符串，也可以返回节点的函数。
       */
      popupContainer: PropTypes$2.any,
      container: PropTypes$2.any,
      /**
       * 弹层组件style，透传给Popup
       */
      popupStyle: PropTypes$2.object,
      /**
       * 弹层组件className，透传给Popup
       */
      popupClassName: PropTypes$2.string,
      /**
       * 弹层组件属性，透传给Popup
       */
      popupProps: PropTypes$2.object,
      /**
       * 是否跟随滚动
       */
      followTrigger: PropTypes$2.bool,
      /**
       * 弹层id, 传入值才会支持无障碍
       */
      id: PropTypes$2.string,
    }),
    (_class$d.defaultProps = {
      prefix: 'next-',
      pure: false,
      type: 'normal',
      closable: true,
      defaultVisible: false,
      size: 'medium',
      alignEdge: false,
      align: 'b',
      offset: [0, 0],
      trigger: React__default['default'].createElement('span', null),
      onClose: noop$2,
      afterClose: noop$2,
      onVisibleChange: noop$2,
      needAdjust: false,
      triggerType: 'hover',
      safeNode: undefined,
      safeId: null,
      autoFocus: true,
      animation: {
        in: 'zoomIn zoomInBig',
        out: 'zoomOut zoomOutBig',
      },
      cache: false,
      popupStyle: {},
      popupClassName: '',
      popupProps: {},
    }),
    _temp$a);
  Balloon$1.displayName = 'Balloon';

  var Balloon$2 = polyfill(Balloon$1);

  var _class$c, _temp$9;

  var Popup = Overlay.Popup;

  var alignMap = normalMap;
  /** Balloon.Tooltip */
  var Tooltip =
    ((_temp$9 = _class$c =
      (function (_React$Component) {
        _default$2(Tooltip, _React$Component);

        function Tooltip() {
          _default$5(this, Tooltip);

          return _default$3(this, _React$Component.apply(this, arguments));
        }

        Tooltip.prototype.render = function render() {
          var _props = this.props,
            id = _props.id,
            className = _props.className,
            align = _props.align,
            style = _props.style,
            prefix = _props.prefix,
            trigger = _props.trigger,
            children = _props.children,
            popupContainer = _props.popupContainer,
            popupProps = _props.popupProps,
            popupClassName = _props.popupClassName,
            popupStyle = _props.popupStyle,
            followTrigger = _props.followTrigger,
            triggerType = _props.triggerType,
            autoFocus = _props.autoFocus,
            alignEdge = _props.alignEdge,
            rtl = _props.rtl,
            delay = _props.delay,
            others = _default$1(_props, [
              'id',
              'className',
              'align',
              'style',
              'prefix',
              'trigger',
              'children',
              'popupContainer',
              'popupProps',
              'popupClassName',
              'popupStyle',
              'followTrigger',
              'triggerType',
              'autoFocus',
              'alignEdge',
              'rtl',
              'delay',
            ]);

          var trOrigin = 'trOrigin';
          if (rtl) {
            others.rtl = true;
            trOrigin = 'rtlTrOrigin';
          }

          alignMap = alignEdge ? edgeMap : normalMap;

          var transformOrigin = alignMap[align][trOrigin];
          var _offset = alignMap[align].offset;
          var _style = _default$6({ transformOrigin: transformOrigin }, style);

          var content = React__default['default'].createElement(
            Inner,
            _default$6({}, others, {
              id: id,
              prefix: prefix,
              closable: false,
              isTooltip: true,
              className: className,
              style: _style,
              align: align,
              rtl: rtl,
              alignEdge: alignEdge,
            }),
            children,
          );

          var triggerProps = {};
          triggerProps['aria-describedby'] = id;
          triggerProps.tabIndex = '0';

          var newTriggerType = triggerType;

          if (triggerType === 'hover' && id) {
            newTriggerType = ['focus', 'hover'];
          }

          var ariaTrigger = id ? React__default['default'].cloneElement(trigger, triggerProps) : trigger;

          var newTrigger = getDisabledCompatibleTrigger(
            React__default['default'].isValidElement(ariaTrigger)
              ? ariaTrigger
              : React__default['default'].createElement('span', null, ariaTrigger),
          );

          return React__default['default'].createElement(
            Popup,
            _default$6(
              {
                role: 'tooltip',
                container: popupContainer,
                followTrigger: followTrigger,
                trigger: newTrigger,
                triggerType: newTriggerType,
                align: alignMap[align].align,
                offset: _offset,
                delay: delay,
                className: popupClassName,
                style: popupStyle,
                rtl: rtl,
                autoFocus: triggerType === 'focus' ? false : autoFocus,
                shouldUpdatePosition: true,
                needAdjust: false,
                animation: {
                  in: 'zoomIn',
                  out: 'zoomOut',
                },
              },
              popupProps,
            ),
            content,
          );
        };

        return Tooltip;
      })(React__default['default'].Component)),
    (_class$c.propTypes = {
      /**
       * 样式类名的品牌前缀
       */
      prefix: PropTypes$2.string,
      /**
       * 自定义类名
       */
      className: PropTypes$2.string,
      /**
       * 自定义内联样式
       */
      style: PropTypes$2.object,
      /**
       * tooltip的内容
       */
      children: PropTypes$2.any,
      /**
       * 弹出层位置
       * @enumdesc 上, 右, 下, 左, 上左, 上右, 下左, 下右, 左上, 左下, 右上, 右下
       */
      align: PropTypes$2.oneOf(['t', 'r', 'b', 'l', 'tl', 'tr', 'bl', 'br', 'lt', 'lb', 'rt', 'rb']),
      /**
       * 触发元素
       */
      trigger: PropTypes$2.any,
      /**
       * 触发行为
       * 鼠标悬浮,  鼠标点击('hover', 'click')或者它们组成的数组，如 ['hover', 'click'], 强烈不建议使用'focus'，若有复杂交互，推荐使用triggerType为click的Balloon组件
       */
      triggerType: PropTypes$2.oneOfType([PropTypes$2.string, PropTypes$2.array]),
      /**
       * 弹层组件style，透传给Popup
       */
      popupStyle: PropTypes$2.object,
      /**
       * 弹层组件className，透传给Popup
       */
      popupClassName: PropTypes$2.string,
      /**
       * 弹层组件属性，透传给Popup
       */
      popupProps: PropTypes$2.object,
      /**
       * 是否pure render
       */
      pure: PropTypes$2.bool,
      /**
       * 指定浮层渲染的父节点, 可以为节点id的字符串，也可以返回节点的函数。
       */
      popupContainer: PropTypes$2.any,
      /**
       * 是否跟随滚动
       */
      followTrigger: PropTypes$2.bool,
      /**
       * 弹层id, 传入值才会支持无障碍
       */
      id: PropTypes$2.string,
      /**
       * 如果需要让 Tooltip 内容可被点击，可以设置这个参数，例如 100
       */
      delay: PropTypes$2.number,
    }),
    (_class$c.defaultProps = {
      triggerType: 'hover',
      prefix: 'next-',
      align: 'b',
      delay: 0,
      trigger: React__default['default'].createElement('span', null),
    }),
    _temp$9);
  Tooltip.displayName = 'Tooltip';

  Balloon$2.Tooltip = ConfigProvider$1.config(Tooltip, {
    transform: /* istanbul ignore next */ function transform(props, deprecated) {
      if ('text' in props) {
        deprecated('text', 'children', 'Tooltip');

        var _props = props,
          text = _props.text,
          others = _default$1(_props, ['text']);

        props = _default$6({ children: text }, others);
      }

      return props;
    },
  });
  Balloon$2.Inner = Inner;

  var Balloon = ConfigProvider$1.config(Balloon$2, {
    transform: /* istanbul ignore next */ function transform(props, deprecated) {
      if (props.alignment) {
        deprecated('alignment', 'alignEdge', 'Balloon');

        var _props2 = props,
          alignment = _props2.alignment,
          others = _default$1(_props2, ['alignment']);

        props = _default$6({ alignEdge: alignment === 'edge' }, others);
      }
      if (props.onCloseClick) {
        deprecated('onCloseClick', 'onVisibleChange(visible, [type = "closeClick"])', 'Balloon');

        var _props3 = props,
          onCloseClick = _props3.onCloseClick,
          onVisibleChange = _props3.onVisibleChange,
          _others = _default$1(_props3, ['onCloseClick', 'onVisibleChange']);

        var newOnVisibleChange = function newOnVisibleChange(visible, type) {
          if (type === 'closeClick') {
            onCloseClick();
          }
          if (onVisibleChange) {
            onVisibleChange(visible, type);
          }
        };
        props = _default$6({ onVisibleChange: newOnVisibleChange }, _others);
      }

      return props;
    },
  });

  var _class$b, _temp2$2;

  function mapIconSize(size) {
    return {
      large: 'small',
      medium: 'xs',
      small: 'xs',
    }[size];
  }

  /** Button */
  var Button$1 =
    ((_temp2$2 = _class$b =
      (function (_Component) {
        _default$2(Button, _Component);

        function Button() {
          var _temp, _this, _ret;

          _default$5(this, Button);

          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          return (
            (_ret =
              ((_temp = ((_this = _default$3(this, _Component.call.apply(_Component, [this].concat(args)))), _this)),
              (_this.onMouseUp = function (e) {
                _this.button.blur();

                if (_this.props.onMouseUp) {
                  _this.props.onMouseUp(e);
                }
              }),
              (_this.buttonRefHandler = function (button) {
                _this.button = button;
              }),
              _temp)),
            _default$3(_this, _ret)
          );
        }

        Button.prototype.render = function render() {
          var _btnClsObj;

          var _props = this.props,
            prefix = _props.prefix,
            className = _props.className,
            type = _props.type,
            size = _props.size,
            htmlType = _props.htmlType,
            loading = _props.loading,
            text = _props.text,
            warning = _props.warning,
            ghost = _props.ghost,
            component = _props.component,
            iconSize = _props.iconSize,
            icons = _props.icons,
            disabled = _props.disabled,
            onClick = _props.onClick,
            children = _props.children,
            rtl = _props.rtl,
            others = _default$1(_props, [
              'prefix',
              'className',
              'type',
              'size',
              'htmlType',
              'loading',
              'text',
              'warning',
              'ghost',
              'component',
              'iconSize',
              'icons',
              'disabled',
              'onClick',
              'children',
              'rtl',
            ]);

          var ghostType = ['light', 'dark'].indexOf(ghost) >= 0 ? ghost : 'dark';

          var btnClsObj =
            ((_btnClsObj = {}),
            (_btnClsObj[prefix + 'btn'] = true),
            (_btnClsObj['' + prefix + size] = size),
            (_btnClsObj[prefix + 'btn-' + type] = type && !ghost),
            (_btnClsObj[prefix + 'btn-text'] = text),
            (_btnClsObj[prefix + 'btn-warning'] = warning),
            (_btnClsObj[prefix + 'btn-loading'] = loading),
            (_btnClsObj[prefix + 'btn-ghost'] = ghost),
            (_btnClsObj[prefix + 'btn-' + ghostType] = ghost),
            (_btnClsObj[className] = className),
            _btnClsObj);

          var loadingIcon = null;

          // 如果传入了 loading 的 icons，使用该节点来渲染
          if (icons && icons.loading && React.isValidElement(icons.loading)) {
            var _classNames;

            if (loading) {
              delete btnClsObj[prefix + 'btn-loading'];
              btnClsObj[prefix + 'btn-custom-loading'] = true;
            }

            var loadingSize = iconSize || mapIconSize(size);
            loadingIcon = React__default['default'].cloneElement(icons.loading, {
              className: cls(
                ((_classNames = {}),
                (_classNames[prefix + 'btn-custom-loading-icon'] = true),
                (_classNames.show = loading),
                _classNames),
              ),
              size: loadingSize,
            });
          }

          var count = React.Children.count(children);
          var clonedChildren = React.Children.map(children, function (child, index) {
            if (
              child &&
              ['function', 'object'].indexOf(_default$4(child.type)) > -1 &&
              child.type._typeMark === 'icon'
            ) {
              var _classNames2;

              var iconCls = cls(
                ((_classNames2 = {}),
                (_classNames2[prefix + 'btn-icon'] = !iconSize),
                (_classNames2[prefix + 'icon-first'] = count > 1 && index === 0),
                (_classNames2[prefix + 'icon-last'] = count > 1 && index === count - 1),
                (_classNames2[prefix + 'icon-alone'] = count === 1),
                (_classNames2[child.props.className] = !!child.props.className),
                _classNames2),
              );

              if ('size' in child.props) {
                log.warning(
                  'The size of Icon will not take effect, when Icon is the [direct child element] of Button(<Button><Icon size="' +
                    child.props.size +
                    '" /></Button>), use <Button iconSize="' +
                    child.props.size +
                    '"> or <Button><div><Icon size="' +
                    child.props.size +
                    '" /></div></Button> instead of.',
                );
              }
              return React__default['default'].cloneElement(child, {
                className: iconCls,
                size: iconSize || mapIconSize(size),
              });
            }

            if (!React.isValidElement(child)) {
              return React__default['default'].createElement('span', { className: prefix + 'btn-helper' }, child);
            }

            return child;
          });

          var TagName = component;
          var tagAttrs = _default$6({}, obj.pickOthers(Object.keys(Button.propTypes), others), {
            type: htmlType,
            disabled: disabled,
            onClick: onClick,
            className: cls(btnClsObj),
          });

          if (TagName !== 'button') {
            delete tagAttrs.type;

            if (tagAttrs.disabled) {
              delete tagAttrs.onClick; // a 标签的 onClick 浏览器默认不会禁用
              tagAttrs.href && delete tagAttrs.href; // a 标签在禁用状态下无跳转
            }
          }

          return React__default['default'].createElement(
            TagName,
            _default$6({}, tagAttrs, {
              dir: rtl ? 'rtl' : undefined,
              onMouseUp: this.onMouseUp,
              ref: this.buttonRefHandler,
            }),
            loadingIcon,
            clonedChildren,
          );
        };

        return Button;
      })(React.Component)),
    (_class$b.propTypes = _default$6({}, ConfigProvider$1.propTypes, {
      prefix: PropTypes$2.string,
      rtl: PropTypes$2.bool,
      /**
       * 按钮的类型
       */
      type: PropTypes$2.oneOf(['primary', 'secondary', 'normal']),
      /**
       * 按钮的尺寸
       */
      size: PropTypes$2.oneOf(['small', 'medium', 'large']),
      /**
       * 按钮中可配置的 Icon，格式为 { loading: <Icon type="loading" /> }
       */
      icons: PropTypes$2.shape({
        loading: PropTypes$2.node,
      }),
      /**
       * 按钮中 Icon 的尺寸，用于替代 Icon 的默认大小
       */
      iconSize: PropTypes$2.oneOfType([
        PropTypes$2.oneOf(['xxs', 'xs', 'small', 'medium', 'large', 'xl', 'xxl', 'xxxl', 'inherit']),
        PropTypes$2.number,
      ]),
      /**
       * 当 component = 'button' 时，设置 button 标签的 type 值
       */
      htmlType: PropTypes$2.oneOf(['submit', 'reset', 'button']),
      /**
       * 设置标签类型
       */
      component: PropTypes$2.oneOf(['button', 'a', 'div', 'span']),
      /**
       * 设置按钮的载入状态
       */
      loading: PropTypes$2.bool,
      /**
       * 是否为幽灵按钮
       */
      ghost: PropTypes$2.oneOf([true, false, 'light', 'dark']),
      /**
       * 是否为文本按钮
       */
      text: PropTypes$2.bool,
      /**
       * 是否为警告按钮
       */
      warning: PropTypes$2.bool,
      /**
       * 是否禁用
       */
      disabled: PropTypes$2.bool,
      /**
       * 点击按钮的回调
       * @param {Object} e Event Object
       */
      onClick: PropTypes$2.func,
      className: PropTypes$2.string,
      onMouseUp: PropTypes$2.func,
      children: PropTypes$2.node,
    })),
    (_class$b.defaultProps = {
      prefix: 'next-',
      type: 'normal',
      size: 'medium',
      icons: {},
      htmlType: 'button',
      component: 'button',
      loading: false,
      ghost: false,
      text: false,
      warning: false,
      disabled: false,
      onClick: function onClick() {},
    }),
    _temp2$2);
  Button$1.displayName = 'Button';

  var _class$a, _temp$8;

  /**
   * Button.Group
   */
  var ButtonGroup =
    ((_temp$8 = _class$a =
      (function (_Component) {
        _default$2(ButtonGroup, _Component);

        function ButtonGroup() {
          _default$5(this, ButtonGroup);

          return _default$3(this, _Component.apply(this, arguments));
        }

        ButtonGroup.prototype.render = function render() {
          var _classNames;

          var _props = this.props,
            prefix = _props.prefix,
            className = _props.className,
            size = _props.size,
            children = _props.children,
            rtl = _props.rtl,
            others = _default$1(_props, ['prefix', 'className', 'size', 'children', 'rtl']);

          var groupCls = cls(
            ((_classNames = {}),
            (_classNames[prefix + 'btn-group'] = true),
            (_classNames[className] = className),
            _classNames),
          );

          var cloneChildren = React.Children.map(children, function (child) {
            if (child) {
              return React__default['default'].cloneElement(child, {
                size: size,
              });
            }
          });

          if (rtl) {
            others.dir = 'rtl';
          }

          return React__default['default'].createElement(
            'div',
            _default$6({}, others, { className: groupCls }),
            cloneChildren,
          );
        };

        return ButtonGroup;
      })(React.Component)),
    (_class$a.propTypes = _default$6({}, ConfigProvider$1.propTypes, {
      rtl: PropTypes$2.bool,
      prefix: PropTypes$2.string,
      /**
       * 统一设置 Button 组件的按钮大小
       */
      size: PropTypes$2.string,
      className: PropTypes$2.string,
      children: PropTypes$2.node,
    })),
    (_class$a.defaultProps = {
      prefix: 'next-',
      size: 'medium',
    }),
    _temp$8);
  ButtonGroup.displayName = 'ButtonGroup';

  var ButtonGroup$1 = ConfigProvider$1.config(ButtonGroup);

  Button$1.Group = ButtonGroup$1;

  var Button = ConfigProvider$1.config(Button$1, {
    transform: /* istanbul ignore next */ function transform(props, deprecated) {
      if ('shape' in props) {
        deprecated('shape', 'text | warning | ghost', 'Button');

        var _props = props,
          shape = _props.shape,
          type = _props.type,
          others = _default$1(_props, ['shape', 'type']);

        var newType = type;
        if (type === 'light' || type === 'dark' || (type === 'secondary' && shape === 'warning')) {
          newType = 'normal';
        }

        var ghost = void 0;
        if (shape === 'ghost') {
          ghost = {
            primary: 'dark',
            secondary: 'dark',
            normal: 'light',
            dark: 'dark',
            light: 'light',
          }[type || Button$1.defaultProps.type];
        }

        var text = shape === 'text';
        var warning = shape === 'warning';

        props = _default$6({ type: newType, ghost: ghost, text: text, warning: warning }, others);
      }

      return props;
    },
  });

  var moment = { exports: {} };

  (function (module, exports) {
    (function (global, factory) {
      module.exports = factory();
    })(commonjsGlobal, function () {
      var hookCallback;

      function hooks() {
        return hookCallback.apply(null, arguments);
      }

      // This is done to register the method called with moment()
      // without creating circular dependencies.
      function setHookCallback(callback) {
        hookCallback = callback;
      }

      function isArray(input) {
        return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
      }

      function isObject(input) {
        // IE8 will treat undefined and null as object if it wasn't for
        // input != null
        return input != null && Object.prototype.toString.call(input) === '[object Object]';
      }

      function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
      }

      function isObjectEmpty(obj) {
        if (Object.getOwnPropertyNames) {
          return Object.getOwnPropertyNames(obj).length === 0;
        } else {
          var k;
          for (k in obj) {
            if (hasOwnProp(obj, k)) {
              return false;
            }
          }
          return true;
        }
      }

      function isUndefined(input) {
        return input === void 0;
      }

      function isNumber(input) {
        return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
      }

      function isDate(input) {
        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
      }

      function map(arr, fn) {
        var res = [],
          i;
        for (i = 0; i < arr.length; ++i) {
          res.push(fn(arr[i], i));
        }
        return res;
      }

      function extend(a, b) {
        for (var i in b) {
          if (hasOwnProp(b, i)) {
            a[i] = b[i];
          }
        }

        if (hasOwnProp(b, 'toString')) {
          a.toString = b.toString;
        }

        if (hasOwnProp(b, 'valueOf')) {
          a.valueOf = b.valueOf;
        }

        return a;
      }

      function createUTC(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, true).utc();
      }

      function defaultParsingFlags() {
        // We need to deep clone this object.
        return {
          empty: false,
          unusedTokens: [],
          unusedInput: [],
          overflow: -2,
          charsLeftOver: 0,
          nullInput: false,
          invalidEra: null,
          invalidMonth: null,
          invalidFormat: false,
          userInvalidated: false,
          iso: false,
          parsedDateParts: [],
          era: null,
          meridiem: null,
          rfc2822: false,
          weekdayMismatch: false,
        };
      }

      function getParsingFlags(m) {
        if (m._pf == null) {
          m._pf = defaultParsingFlags();
        }
        return m._pf;
      }

      var some;
      if (Array.prototype.some) {
        some = Array.prototype.some;
      } else {
        some = function (fun) {
          var t = Object(this),
            len = t.length >>> 0,
            i;

          for (i = 0; i < len; i++) {
            if (i in t && fun.call(this, t[i], i, t)) {
              return true;
            }
          }

          return false;
        };
      }

      function isValid(m) {
        if (m._isValid == null) {
          var flags = getParsingFlags(m),
            parsedParts = some.call(flags.parsedDateParts, function (i) {
              return i != null;
            }),
            isNowValid =
              !isNaN(m._d.getTime()) &&
              flags.overflow < 0 &&
              !flags.empty &&
              !flags.invalidEra &&
              !flags.invalidMonth &&
              !flags.invalidWeekday &&
              !flags.weekdayMismatch &&
              !flags.nullInput &&
              !flags.invalidFormat &&
              !flags.userInvalidated &&
              (!flags.meridiem || (flags.meridiem && parsedParts));

          if (m._strict) {
            isNowValid =
              isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === undefined;
          }

          if (Object.isFrozen == null || !Object.isFrozen(m)) {
            m._isValid = isNowValid;
          } else {
            return isNowValid;
          }
        }
        return m._isValid;
      }

      function createInvalid(flags) {
        var m = createUTC(NaN);
        if (flags != null) {
          extend(getParsingFlags(m), flags);
        } else {
          getParsingFlags(m).userInvalidated = true;
        }

        return m;
      }

      // Plugins that add properties should also add the key here (null value),
      // so we can properly clone ourselves.
      var momentProperties = (hooks.momentProperties = []),
        updateInProgress = false;

      function copyConfig(to, from) {
        var i, prop, val;

        if (!isUndefined(from._isAMomentObject)) {
          to._isAMomentObject = from._isAMomentObject;
        }
        if (!isUndefined(from._i)) {
          to._i = from._i;
        }
        if (!isUndefined(from._f)) {
          to._f = from._f;
        }
        if (!isUndefined(from._l)) {
          to._l = from._l;
        }
        if (!isUndefined(from._strict)) {
          to._strict = from._strict;
        }
        if (!isUndefined(from._tzm)) {
          to._tzm = from._tzm;
        }
        if (!isUndefined(from._isUTC)) {
          to._isUTC = from._isUTC;
        }
        if (!isUndefined(from._offset)) {
          to._offset = from._offset;
        }
        if (!isUndefined(from._pf)) {
          to._pf = getParsingFlags(from);
        }
        if (!isUndefined(from._locale)) {
          to._locale = from._locale;
        }

        if (momentProperties.length > 0) {
          for (i = 0; i < momentProperties.length; i++) {
            prop = momentProperties[i];
            val = from[prop];
            if (!isUndefined(val)) {
              to[prop] = val;
            }
          }
        }

        return to;
      }

      // Moment prototype object
      function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        if (!this.isValid()) {
          this._d = new Date(NaN);
        }
        // Prevent infinite loop in case updateOffset creates new moment
        // objects.
        if (updateInProgress === false) {
          updateInProgress = true;
          hooks.updateOffset(this);
          updateInProgress = false;
        }
      }

      function isMoment(obj) {
        return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
      }

      function warn(msg) {
        if (hooks.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) {
          console.warn('Deprecation warning: ' + msg);
        }
      }

      function deprecate(msg, fn) {
        var firstTime = true;

        return extend(function () {
          if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(null, msg);
          }
          if (firstTime) {
            var args = [],
              arg,
              i,
              key;
            for (i = 0; i < arguments.length; i++) {
              arg = '';
              if (typeof arguments[i] === 'object') {
                arg += '\n[' + i + '] ';
                for (key in arguments[0]) {
                  if (hasOwnProp(arguments[0], key)) {
                    arg += key + ': ' + arguments[0][key] + ', ';
                  }
                }
                arg = arg.slice(0, -2); // Remove trailing comma and space
              } else {
                arg = arguments[i];
              }
              args.push(arg);
            }
            warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + new Error().stack);
            firstTime = false;
          }
          return fn.apply(this, arguments);
        }, fn);
      }

      var deprecations = {};

      function deprecateSimple(name, msg) {
        if (hooks.deprecationHandler != null) {
          hooks.deprecationHandler(name, msg);
        }
        if (!deprecations[name]) {
          warn(msg);
          deprecations[name] = true;
        }
      }

      hooks.suppressDeprecationWarnings = false;
      hooks.deprecationHandler = null;

      function isFunction(input) {
        return (
          (typeof Function !== 'undefined' && input instanceof Function) ||
          Object.prototype.toString.call(input) === '[object Function]'
        );
      }

      function set(config) {
        var prop, i;
        for (i in config) {
          if (hasOwnProp(config, i)) {
            prop = config[i];
            if (isFunction(prop)) {
              this[i] = prop;
            } else {
              this['_' + i] = prop;
            }
          }
        }
        this._config = config;
        // Lenient ordinal parsing accepts just a number in addition to
        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
        // TODO: Remove "ordinalParse" fallback in next major release.
        this._dayOfMonthOrdinalParseLenient = new RegExp(
          (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + '|' + /\d{1,2}/.source,
        );
      }

      function mergeConfigs(parentConfig, childConfig) {
        var res = extend({}, parentConfig),
          prop;
        for (prop in childConfig) {
          if (hasOwnProp(childConfig, prop)) {
            if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
              res[prop] = {};
              extend(res[prop], parentConfig[prop]);
              extend(res[prop], childConfig[prop]);
            } else if (childConfig[prop] != null) {
              res[prop] = childConfig[prop];
            } else {
              delete res[prop];
            }
          }
        }
        for (prop in parentConfig) {
          if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject(parentConfig[prop])) {
            // make sure changes to properties don't modify parent config
            res[prop] = extend({}, res[prop]);
          }
        }
        return res;
      }

      function Locale(config) {
        if (config != null) {
          this.set(config);
        }
      }

      var keys;

      if (Object.keys) {
        keys = Object.keys;
      } else {
        keys = function (obj) {
          var i,
            res = [];
          for (i in obj) {
            if (hasOwnProp(obj, i)) {
              res.push(i);
            }
          }
          return res;
        };
      }

      var defaultCalendar = {
        sameDay: '[Today at] LT',
        nextDay: '[Tomorrow at] LT',
        nextWeek: 'dddd [at] LT',
        lastDay: '[Yesterday at] LT',
        lastWeek: '[Last] dddd [at] LT',
        sameElse: 'L',
      };

      function calendar(key, mom, now) {
        var output = this._calendar[key] || this._calendar['sameElse'];
        return isFunction(output) ? output.call(mom, now) : output;
      }

      function zeroFill(number, targetLength, forceSign) {
        var absNumber = '' + Math.abs(number),
          zerosToFill = targetLength - absNumber.length,
          sign = number >= 0;
        return (
          (sign ? (forceSign ? '+' : '') : '-') +
          Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) +
          absNumber
        );
      }

      var formattingTokens =
          /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
        localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,
        formatFunctions = {},
        formatTokenFunctions = {};

      // token:    'M'
      // padded:   ['MM', 2]
      // ordinal:  'Mo'
      // callback: function () { this.month() + 1 }
      function addFormatToken(token, padded, ordinal, callback) {
        var func = callback;
        if (typeof callback === 'string') {
          func = function () {
            return this[callback]();
          };
        }
        if (token) {
          formatTokenFunctions[token] = func;
        }
        if (padded) {
          formatTokenFunctions[padded[0]] = function () {
            return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
          };
        }
        if (ordinal) {
          formatTokenFunctions[ordinal] = function () {
            return this.localeData().ordinal(func.apply(this, arguments), token);
          };
        }
      }

      function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
          return input.replace(/^\[|\]$/g, '');
        }
        return input.replace(/\\/g, '');
      }

      function makeFormatFunction(format) {
        var array = format.match(formattingTokens),
          i,
          length;

        for (i = 0, length = array.length; i < length; i++) {
          if (formatTokenFunctions[array[i]]) {
            array[i] = formatTokenFunctions[array[i]];
          } else {
            array[i] = removeFormattingTokens(array[i]);
          }
        }

        return function (mom) {
          var output = '',
            i;
          for (i = 0; i < length; i++) {
            output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
          }
          return output;
        };
      }

      // format date using native date object
      function formatMoment(m, format) {
        if (!m.isValid()) {
          return m.localeData().invalidDate();
        }

        format = expandFormat(format, m.localeData());
        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

        return formatFunctions[format](m);
      }

      function expandFormat(format, locale) {
        var i = 5;

        function replaceLongDateFormatTokens(input) {
          return locale.longDateFormat(input) || input;
        }

        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
          format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
          localFormattingTokens.lastIndex = 0;
          i -= 1;
        }

        return format;
      }

      var defaultLongDateFormat = {
        LTS: 'h:mm:ss A',
        LT: 'h:mm A',
        L: 'MM/DD/YYYY',
        LL: 'MMMM D, YYYY',
        LLL: 'MMMM D, YYYY h:mm A',
        LLLL: 'dddd, MMMM D, YYYY h:mm A',
      };

      function longDateFormat(key) {
        var format = this._longDateFormat[key],
          formatUpper = this._longDateFormat[key.toUpperCase()];

        if (format || !formatUpper) {
          return format;
        }

        this._longDateFormat[key] = formatUpper
          .match(formattingTokens)
          .map(function (tok) {
            if (tok === 'MMMM' || tok === 'MM' || tok === 'DD' || tok === 'dddd') {
              return tok.slice(1);
            }
            return tok;
          })
          .join('');

        return this._longDateFormat[key];
      }

      var defaultInvalidDate = 'Invalid date';

      function invalidDate() {
        return this._invalidDate;
      }

      var defaultOrdinal = '%d',
        defaultDayOfMonthOrdinalParse = /\d{1,2}/;

      function ordinal(number) {
        return this._ordinal.replace('%d', number);
      }

      var defaultRelativeTime = {
        future: 'in %s',
        past: '%s ago',
        s: 'a few seconds',
        ss: '%d seconds',
        m: 'a minute',
        mm: '%d minutes',
        h: 'an hour',
        hh: '%d hours',
        d: 'a day',
        dd: '%d days',
        w: 'a week',
        ww: '%d weeks',
        M: 'a month',
        MM: '%d months',
        y: 'a year',
        yy: '%d years',
      };

      function relativeTime(number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
      }

      function pastFuture(diff, output) {
        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
      }

      var aliases = {};

      function addUnitAlias(unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
      }

      function normalizeUnits(units) {
        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
      }

      function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
          normalizedProp,
          prop;

        for (prop in inputObject) {
          if (hasOwnProp(inputObject, prop)) {
            normalizedProp = normalizeUnits(prop);
            if (normalizedProp) {
              normalizedInput[normalizedProp] = inputObject[prop];
            }
          }
        }

        return normalizedInput;
      }

      var priorities = {};

      function addUnitPriority(unit, priority) {
        priorities[unit] = priority;
      }

      function getPrioritizedUnits(unitsObj) {
        var units = [],
          u;
        for (u in unitsObj) {
          if (hasOwnProp(unitsObj, u)) {
            units.push({ unit: u, priority: priorities[u] });
          }
        }
        units.sort(function (a, b) {
          return a.priority - b.priority;
        });
        return units;
      }

      function isLeapYear(year) {
        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
      }

      function absFloor(number) {
        if (number < 0) {
          // -0 -> 0
          return Math.ceil(number) || 0;
        } else {
          return Math.floor(number);
        }
      }

      function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
          value = 0;

        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
          value = absFloor(coercedNumber);
        }

        return value;
      }

      function makeGetSet(unit, keepTime) {
        return function (value) {
          if (value != null) {
            set$1(this, unit, value);
            hooks.updateOffset(this, keepTime);
            return this;
          } else {
            return get(this, unit);
          }
        };
      }

      function get(mom, unit) {
        return mom.isValid() ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
      }

      function set$1(mom, unit, value) {
        if (mom.isValid() && !isNaN(value)) {
          if (unit === 'FullYear' && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
            value = toInt(value);
            mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value, mom.month(), daysInMonth(value, mom.month()));
          } else {
            mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
          }
        }
      }

      // MOMENTS

      function stringGet(units) {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
          return this[units]();
        }
        return this;
      }

      function stringSet(units, value) {
        if (typeof units === 'object') {
          units = normalizeObjectUnits(units);
          var prioritized = getPrioritizedUnits(units),
            i;
          for (i = 0; i < prioritized.length; i++) {
            this[prioritized[i].unit](units[prioritized[i].unit]);
          }
        } else {
          units = normalizeUnits(units);
          if (isFunction(this[units])) {
            return this[units](value);
          }
        }
        return this;
      }

      var match1 = /\d/, //       0 - 9
        match2 = /\d\d/, //      00 - 99
        match3 = /\d{3}/, //     000 - 999
        match4 = /\d{4}/, //    0000 - 9999
        match6 = /[+-]?\d{6}/, // -999999 - 999999
        match1to2 = /\d\d?/, //       0 - 99
        match3to4 = /\d\d\d\d?/, //     999 - 9999
        match5to6 = /\d\d\d\d\d\d?/, //   99999 - 999999
        match1to3 = /\d{1,3}/, //       0 - 999
        match1to4 = /\d{1,4}/, //       0 - 9999
        match1to6 = /[+-]?\d{1,6}/, // -999999 - 999999
        matchUnsigned = /\d+/, //       0 - inf
        matchSigned = /[+-]?\d+/, //    -inf - inf
        matchOffset = /Z|[+-]\d\d:?\d\d/gi, // +00:00 -00:00 +0000 -0000 or Z
        matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, // +00 -00 +00:00 -00:00 +0000 -0000 or Z
        matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, // 123456789 123456789.123
        // any word (or two) characters or numbers including two/three word month in arabic.
        // includes scottish gaelic two word and hyphenated months
        matchWord =
          /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,
        regexes;

      regexes = {};

      function addRegexToken(token, regex, strictRegex) {
        regexes[token] = isFunction(regex)
          ? regex
          : function (isStrict, localeData) {
              return isStrict && strictRegex ? strictRegex : regex;
            };
      }

      function getParseRegexForToken(token, config) {
        if (!hasOwnProp(regexes, token)) {
          return new RegExp(unescapeFormat(token));
        }

        return regexes[token](config._strict, config._locale);
      }

      // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
      function unescapeFormat(s) {
        return regexEscape(
          s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;
          }),
        );
      }

      function regexEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
      }

      var tokens = {};

      function addParseToken(token, callback) {
        var i,
          func = callback;
        if (typeof token === 'string') {
          token = [token];
        }
        if (isNumber(callback)) {
          func = function (input, array) {
            array[callback] = toInt(input);
          };
        }
        for (i = 0; i < token.length; i++) {
          tokens[token[i]] = func;
        }
      }

      function addWeekParseToken(token, callback) {
        addParseToken(token, function (input, array, config, token) {
          config._w = config._w || {};
          callback(input, config._w, config, token);
        });
      }

      function addTimeToArrayFromToken(token, input, config) {
        if (input != null && hasOwnProp(tokens, token)) {
          tokens[token](input, config._a, config, token);
        }
      }

      var YEAR = 0,
        MONTH = 1,
        DATE = 2,
        HOUR = 3,
        MINUTE = 4,
        SECOND = 5,
        MILLISECOND = 6,
        WEEK = 7,
        WEEKDAY = 8;

      function mod(n, x) {
        return ((n % x) + x) % x;
      }

      var indexOf;

      if (Array.prototype.indexOf) {
        indexOf = Array.prototype.indexOf;
      } else {
        indexOf = function (o) {
          // I know
          var i;
          for (i = 0; i < this.length; ++i) {
            if (this[i] === o) {
              return i;
            }
          }
          return -1;
        };
      }

      function daysInMonth(year, month) {
        if (isNaN(year) || isNaN(month)) {
          return NaN;
        }
        var modMonth = mod(month, 12);
        year += (month - modMonth) / 12;
        return modMonth === 1 ? (isLeapYear(year) ? 29 : 28) : 31 - ((modMonth % 7) % 2);
      }

      // FORMATTING

      addFormatToken('M', ['MM', 2], 'Mo', function () {
        return this.month() + 1;
      });

      addFormatToken('MMM', 0, 0, function (format) {
        return this.localeData().monthsShort(this, format);
      });

      addFormatToken('MMMM', 0, 0, function (format) {
        return this.localeData().months(this, format);
      });

      // ALIASES

      addUnitAlias('month', 'M');

      // PRIORITY

      addUnitPriority('month', 8);

      // PARSING

      addRegexToken('M', match1to2);
      addRegexToken('MM', match1to2, match2);
      addRegexToken('MMM', function (isStrict, locale) {
        return locale.monthsShortRegex(isStrict);
      });
      addRegexToken('MMMM', function (isStrict, locale) {
        return locale.monthsRegex(isStrict);
      });

      addParseToken(['M', 'MM'], function (input, array) {
        array[MONTH] = toInt(input) - 1;
      });

      addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
        var month = config._locale.monthsParse(input, token, config._strict);
        // if we didn't find a month name, mark the date as invalid.
        if (month != null) {
          array[MONTH] = month;
        } else {
          getParsingFlags(config).invalidMonth = input;
        }
      });

      // LOCALES

      var defaultLocaleMonths =
          'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
        defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,
        defaultMonthsShortRegex = matchWord,
        defaultMonthsRegex = matchWord;

      function localeMonths(m, format) {
        if (!m) {
          return isArray(this._months) ? this._months : this._months['standalone'];
        }
        return isArray(this._months)
          ? this._months[m.month()]
          : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
      }

      function localeMonthsShort(m, format) {
        if (!m) {
          return isArray(this._monthsShort) ? this._monthsShort : this._monthsShort['standalone'];
        }
        return isArray(this._monthsShort)
          ? this._monthsShort[m.month()]
          : this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
      }

      function handleStrictParse(monthName, format, strict) {
        var i,
          ii,
          mom,
          llc = monthName.toLocaleLowerCase();
        if (!this._monthsParse) {
          // this is not used
          this._monthsParse = [];
          this._longMonthsParse = [];
          this._shortMonthsParse = [];
          for (i = 0; i < 12; ++i) {
            mom = createUTC([2000, i]);
            this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
            this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
          }
        }

        if (strict) {
          if (format === 'MMM') {
            ii = indexOf.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
          }
        } else {
          if (format === 'MMM') {
            ii = indexOf.call(this._shortMonthsParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._longMonthsParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
          }
        }
      }

      function localeMonthsParse(monthName, format, strict) {
        var i, mom, regex;

        if (this._monthsParseExact) {
          return handleStrictParse.call(this, monthName, format, strict);
        }

        if (!this._monthsParse) {
          this._monthsParse = [];
          this._longMonthsParse = [];
          this._shortMonthsParse = [];
        }

        // TODO: add sorting
        // Sorting makes sure if one month (or abbr) is a prefix of another
        // see sorting in computeMonthsParse
        for (i = 0; i < 12; i++) {
          // make the regex if we don't have it already
          mom = createUTC([2000, i]);
          if (strict && !this._longMonthsParse[i]) {
            this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
            this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
          }
          if (!strict && !this._monthsParse[i]) {
            regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
            this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
          }
          // test the regex
          if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
            return i;
          } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
            return i;
          } else if (!strict && this._monthsParse[i].test(monthName)) {
            return i;
          }
        }
      }

      // MOMENTS

      function setMonth(mom, value) {
        var dayOfMonth;

        if (!mom.isValid()) {
          // No op
          return mom;
        }

        if (typeof value === 'string') {
          if (/^\d+$/.test(value)) {
            value = toInt(value);
          } else {
            value = mom.localeData().monthsParse(value);
            // TODO: Another silent failure?
            if (!isNumber(value)) {
              return mom;
            }
          }
        }

        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom;
      }

      function getSetMonth(value) {
        if (value != null) {
          setMonth(this, value);
          hooks.updateOffset(this, true);
          return this;
        } else {
          return get(this, 'Month');
        }
      }

      function getDaysInMonth() {
        return daysInMonth(this.year(), this.month());
      }

      function monthsShortRegex(isStrict) {
        if (this._monthsParseExact) {
          if (!hasOwnProp(this, '_monthsRegex')) {
            computeMonthsParse.call(this);
          }
          if (isStrict) {
            return this._monthsShortStrictRegex;
          } else {
            return this._monthsShortRegex;
          }
        } else {
          if (!hasOwnProp(this, '_monthsShortRegex')) {
            this._monthsShortRegex = defaultMonthsShortRegex;
          }
          return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
        }
      }

      function monthsRegex(isStrict) {
        if (this._monthsParseExact) {
          if (!hasOwnProp(this, '_monthsRegex')) {
            computeMonthsParse.call(this);
          }
          if (isStrict) {
            return this._monthsStrictRegex;
          } else {
            return this._monthsRegex;
          }
        } else {
          if (!hasOwnProp(this, '_monthsRegex')) {
            this._monthsRegex = defaultMonthsRegex;
          }
          return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
        }
      }

      function computeMonthsParse() {
        function cmpLenRev(a, b) {
          return b.length - a.length;
        }

        var shortPieces = [],
          longPieces = [],
          mixedPieces = [],
          i,
          mom;
        for (i = 0; i < 12; i++) {
          // make the regex if we don't have it already
          mom = createUTC([2000, i]);
          shortPieces.push(this.monthsShort(mom, ''));
          longPieces.push(this.months(mom, ''));
          mixedPieces.push(this.months(mom, ''));
          mixedPieces.push(this.monthsShort(mom, ''));
        }
        // Sorting makes sure if one month (or abbr) is a prefix of another it
        // will match the longer piece.
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 12; i++) {
          shortPieces[i] = regexEscape(shortPieces[i]);
          longPieces[i] = regexEscape(longPieces[i]);
        }
        for (i = 0; i < 24; i++) {
          mixedPieces[i] = regexEscape(mixedPieces[i]);
        }

        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
      }

      // FORMATTING

      addFormatToken('Y', 0, 0, function () {
        var y = this.year();
        return y <= 9999 ? zeroFill(y, 4) : '+' + y;
      });

      addFormatToken(0, ['YY', 2], 0, function () {
        return this.year() % 100;
      });

      addFormatToken(0, ['YYYY', 4], 0, 'year');
      addFormatToken(0, ['YYYYY', 5], 0, 'year');
      addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

      // ALIASES

      addUnitAlias('year', 'y');

      // PRIORITIES

      addUnitPriority('year', 1);

      // PARSING

      addRegexToken('Y', matchSigned);
      addRegexToken('YY', match1to2, match2);
      addRegexToken('YYYY', match1to4, match4);
      addRegexToken('YYYYY', match1to6, match6);
      addRegexToken('YYYYYY', match1to6, match6);

      addParseToken(['YYYYY', 'YYYYYY'], YEAR);
      addParseToken('YYYY', function (input, array) {
        array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
      });
      addParseToken('YY', function (input, array) {
        array[YEAR] = hooks.parseTwoDigitYear(input);
      });
      addParseToken('Y', function (input, array) {
        array[YEAR] = parseInt(input, 10);
      });

      // HELPERS

      function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
      }

      // HOOKS

      hooks.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
      };

      // MOMENTS

      var getSetYear = makeGetSet('FullYear', true);

      function getIsLeapYear() {
        return isLeapYear(this.year());
      }

      function createDate(y, m, d, h, M, s, ms) {
        // can't just apply() to create a date:
        // https://stackoverflow.com/q/181348
        var date;
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
          // preserve leap years using a full 400 year cycle, then reset
          date = new Date(y + 400, m, d, h, M, s, ms);
          if (isFinite(date.getFullYear())) {
            date.setFullYear(y);
          }
        } else {
          date = new Date(y, m, d, h, M, s, ms);
        }

        return date;
      }

      function createUTCDate(y) {
        var date, args;
        // the Date.UTC function remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
          args = Array.prototype.slice.call(arguments);
          // preserve leap years using a full 400 year cycle, then reset
          args[0] = y + 400;
          date = new Date(Date.UTC.apply(null, args));
          if (isFinite(date.getUTCFullYear())) {
            date.setUTCFullYear(y);
          }
        } else {
          date = new Date(Date.UTC.apply(null, arguments));
        }

        return date;
      }

      // start-of-first-week - start-of-year
      function firstWeekOffset(year, dow, doy) {
        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
          fwd = 7 + dow - doy,
          // first-week day local weekday -- which local weekday is fwd
          fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

        return -fwdlw + fwd - 1;
      }

      // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
      function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7,
          weekOffset = firstWeekOffset(year, dow, doy),
          dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
          resYear,
          resDayOfYear;

        if (dayOfYear <= 0) {
          resYear = year - 1;
          resDayOfYear = daysInYear(resYear) + dayOfYear;
        } else if (dayOfYear > daysInYear(year)) {
          resYear = year + 1;
          resDayOfYear = dayOfYear - daysInYear(year);
        } else {
          resYear = year;
          resDayOfYear = dayOfYear;
        }

        return {
          year: resYear,
          dayOfYear: resDayOfYear,
        };
      }

      function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy),
          week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
          resWeek,
          resYear;

        if (week < 1) {
          resYear = mom.year() - 1;
          resWeek = week + weeksInYear(resYear, dow, doy);
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
          resWeek = week - weeksInYear(mom.year(), dow, doy);
          resYear = mom.year() + 1;
        } else {
          resYear = mom.year();
          resWeek = week;
        }

        return {
          week: resWeek,
          year: resYear,
        };
      }

      function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy),
          weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
      }

      // FORMATTING

      addFormatToken('w', ['ww', 2], 'wo', 'week');
      addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

      // ALIASES

      addUnitAlias('week', 'w');
      addUnitAlias('isoWeek', 'W');

      // PRIORITIES

      addUnitPriority('week', 5);
      addUnitPriority('isoWeek', 5);

      // PARSING

      addRegexToken('w', match1to2);
      addRegexToken('ww', match1to2, match2);
      addRegexToken('W', match1to2);
      addRegexToken('WW', match1to2, match2);

      addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
        week[token.substr(0, 1)] = toInt(input);
      });

      // HELPERS

      // LOCALES

      function localeWeek(mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
      }

      var defaultLocaleWeek = {
        dow: 0, // Sunday is the first day of the week.
        doy: 6, // The week that contains Jan 6th is the first week of the year.
      };

      function localeFirstDayOfWeek() {
        return this._week.dow;
      }

      function localeFirstDayOfYear() {
        return this._week.doy;
      }

      // MOMENTS

      function getSetWeek(input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, 'd');
      }

      function getSetISOWeek(input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, 'd');
      }

      // FORMATTING

      addFormatToken('d', 0, 'do', 'day');

      addFormatToken('dd', 0, 0, function (format) {
        return this.localeData().weekdaysMin(this, format);
      });

      addFormatToken('ddd', 0, 0, function (format) {
        return this.localeData().weekdaysShort(this, format);
      });

      addFormatToken('dddd', 0, 0, function (format) {
        return this.localeData().weekdays(this, format);
      });

      addFormatToken('e', 0, 0, 'weekday');
      addFormatToken('E', 0, 0, 'isoWeekday');

      // ALIASES

      addUnitAlias('day', 'd');
      addUnitAlias('weekday', 'e');
      addUnitAlias('isoWeekday', 'E');

      // PRIORITY
      addUnitPriority('day', 11);
      addUnitPriority('weekday', 11);
      addUnitPriority('isoWeekday', 11);

      // PARSING

      addRegexToken('d', match1to2);
      addRegexToken('e', match1to2);
      addRegexToken('E', match1to2);
      addRegexToken('dd', function (isStrict, locale) {
        return locale.weekdaysMinRegex(isStrict);
      });
      addRegexToken('ddd', function (isStrict, locale) {
        return locale.weekdaysShortRegex(isStrict);
      });
      addRegexToken('dddd', function (isStrict, locale) {
        return locale.weekdaysRegex(isStrict);
      });

      addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
        var weekday = config._locale.weekdaysParse(input, token, config._strict);
        // if we didn't get a weekday name, mark the date as invalid
        if (weekday != null) {
          week.d = weekday;
        } else {
          getParsingFlags(config).invalidWeekday = input;
        }
      });

      addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
        week[token] = toInt(input);
      });

      // HELPERS

      function parseWeekday(input, locale) {
        if (typeof input !== 'string') {
          return input;
        }

        if (!isNaN(input)) {
          return parseInt(input, 10);
        }

        input = locale.weekdaysParse(input);
        if (typeof input === 'number') {
          return input;
        }

        return null;
      }

      function parseIsoWeekday(input, locale) {
        if (typeof input === 'string') {
          return locale.weekdaysParse(input) % 7 || 7;
        }
        return isNaN(input) ? null : input;
      }

      // LOCALES
      function shiftWeekdays(ws, n) {
        return ws.slice(n, 7).concat(ws.slice(0, n));
      }

      var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        defaultWeekdaysRegex = matchWord,
        defaultWeekdaysShortRegex = matchWord,
        defaultWeekdaysMinRegex = matchWord;

      function localeWeekdays(m, format) {
        var weekdays = isArray(this._weekdays)
          ? this._weekdays
          : this._weekdays[m && m !== true && this._weekdays.isFormat.test(format) ? 'format' : 'standalone'];
        return m === true ? shiftWeekdays(weekdays, this._week.dow) : m ? weekdays[m.day()] : weekdays;
      }

      function localeWeekdaysShort(m) {
        return m === true
          ? shiftWeekdays(this._weekdaysShort, this._week.dow)
          : m
          ? this._weekdaysShort[m.day()]
          : this._weekdaysShort;
      }

      function localeWeekdaysMin(m) {
        return m === true
          ? shiftWeekdays(this._weekdaysMin, this._week.dow)
          : m
          ? this._weekdaysMin[m.day()]
          : this._weekdaysMin;
      }

      function handleStrictParse$1(weekdayName, format, strict) {
        var i,
          ii,
          mom,
          llc = weekdayName.toLocaleLowerCase();
        if (!this._weekdaysParse) {
          this._weekdaysParse = [];
          this._shortWeekdaysParse = [];
          this._minWeekdaysParse = [];

          for (i = 0; i < 7; ++i) {
            mom = createUTC([2000, 1]).day(i);
            this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
            this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
            this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
          }
        }

        if (strict) {
          if (format === 'dddd') {
            ii = indexOf.call(this._weekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else if (format === 'ddd') {
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          }
        } else {
          if (format === 'dddd') {
            ii = indexOf.call(this._weekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else if (format === 'ddd') {
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._weekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._minWeekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._weekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          }
        }
      }

      function localeWeekdaysParse(weekdayName, format, strict) {
        var i, mom, regex;

        if (this._weekdaysParseExact) {
          return handleStrictParse$1.call(this, weekdayName, format, strict);
        }

        if (!this._weekdaysParse) {
          this._weekdaysParse = [];
          this._minWeekdaysParse = [];
          this._shortWeekdaysParse = [];
          this._fullWeekdaysParse = [];
        }

        for (i = 0; i < 7; i++) {
          // make the regex if we don't have it already

          mom = createUTC([2000, 1]).day(i);
          if (strict && !this._fullWeekdaysParse[i]) {
            this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\.?') + '$', 'i');
            this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$', 'i');
            this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$', 'i');
          }
          if (!this._weekdaysParse[i]) {
            regex =
              '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
            this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
          }
          // test the regex
          if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
            return i;
          } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
            return i;
          } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
            return i;
          } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
            return i;
          }
        }
      }

      // MOMENTS

      function getSetDayOfWeek(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
          input = parseWeekday(input, this.localeData());
          return this.add(input - day, 'd');
        } else {
          return day;
        }
      }

      function getSetLocaleDayOfWeek(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, 'd');
      }

      function getSetISODayOfWeek(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }

        // behaves the same as moment#day except
        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
        // as a setter, sunday should belong to the previous week.

        if (input != null) {
          var weekday = parseIsoWeekday(input, this.localeData());
          return this.day(this.day() % 7 ? weekday : weekday - 7);
        } else {
          return this.day() || 7;
        }
      }

      function weekdaysRegex(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this);
          }
          if (isStrict) {
            return this._weekdaysStrictRegex;
          } else {
            return this._weekdaysRegex;
          }
        } else {
          if (!hasOwnProp(this, '_weekdaysRegex')) {
            this._weekdaysRegex = defaultWeekdaysRegex;
          }
          return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
        }
      }

      function weekdaysShortRegex(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this);
          }
          if (isStrict) {
            return this._weekdaysShortStrictRegex;
          } else {
            return this._weekdaysShortRegex;
          }
        } else {
          if (!hasOwnProp(this, '_weekdaysShortRegex')) {
            this._weekdaysShortRegex = defaultWeekdaysShortRegex;
          }
          return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
        }
      }

      function weekdaysMinRegex(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this);
          }
          if (isStrict) {
            return this._weekdaysMinStrictRegex;
          } else {
            return this._weekdaysMinRegex;
          }
        } else {
          if (!hasOwnProp(this, '_weekdaysMinRegex')) {
            this._weekdaysMinRegex = defaultWeekdaysMinRegex;
          }
          return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
        }
      }

      function computeWeekdaysParse() {
        function cmpLenRev(a, b) {
          return b.length - a.length;
        }

        var minPieces = [],
          shortPieces = [],
          longPieces = [],
          mixedPieces = [],
          i,
          mom,
          minp,
          shortp,
          longp;
        for (i = 0; i < 7; i++) {
          // make the regex if we don't have it already
          mom = createUTC([2000, 1]).day(i);
          minp = regexEscape(this.weekdaysMin(mom, ''));
          shortp = regexEscape(this.weekdaysShort(mom, ''));
          longp = regexEscape(this.weekdays(mom, ''));
          minPieces.push(minp);
          shortPieces.push(shortp);
          longPieces.push(longp);
          mixedPieces.push(minp);
          mixedPieces.push(shortp);
          mixedPieces.push(longp);
        }
        // Sorting makes sure if one weekday (or abbr) is a prefix of another it
        // will match the longer piece.
        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);

        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;

        this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
        this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
      }

      // FORMATTING

      function hFormat() {
        return this.hours() % 12 || 12;
      }

      function kFormat() {
        return this.hours() || 24;
      }

      addFormatToken('H', ['HH', 2], 0, 'hour');
      addFormatToken('h', ['hh', 2], 0, hFormat);
      addFormatToken('k', ['kk', 2], 0, kFormat);

      addFormatToken('hmm', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
      });

      addFormatToken('hmmss', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
      });

      addFormatToken('Hmm', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2);
      });

      addFormatToken('Hmmss', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
      });

      function meridiem(token, lowercase) {
        addFormatToken(token, 0, 0, function () {
          return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
        });
      }

      meridiem('a', true);
      meridiem('A', false);

      // ALIASES

      addUnitAlias('hour', 'h');

      // PRIORITY
      addUnitPriority('hour', 13);

      // PARSING

      function matchMeridiem(isStrict, locale) {
        return locale._meridiemParse;
      }

      addRegexToken('a', matchMeridiem);
      addRegexToken('A', matchMeridiem);
      addRegexToken('H', match1to2);
      addRegexToken('h', match1to2);
      addRegexToken('k', match1to2);
      addRegexToken('HH', match1to2, match2);
      addRegexToken('hh', match1to2, match2);
      addRegexToken('kk', match1to2, match2);

      addRegexToken('hmm', match3to4);
      addRegexToken('hmmss', match5to6);
      addRegexToken('Hmm', match3to4);
      addRegexToken('Hmmss', match5to6);

      addParseToken(['H', 'HH'], HOUR);
      addParseToken(['k', 'kk'], function (input, array, config) {
        var kInput = toInt(input);
        array[HOUR] = kInput === 24 ? 0 : kInput;
      });
      addParseToken(['a', 'A'], function (input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
      });
      addParseToken(['h', 'hh'], function (input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
      });
      addParseToken('hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true;
      });
      addParseToken('hmmss', function (input, array, config) {
        var pos1 = input.length - 4,
          pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true;
      });
      addParseToken('Hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
      });
      addParseToken('Hmmss', function (input, array, config) {
        var pos1 = input.length - 4,
          pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
      });

      // LOCALES

      function localeIsPM(input) {
        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
        // Using charAt should be more compatible.
        return (input + '').toLowerCase().charAt(0) === 'p';
      }

      var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i,
        // Setting the hour should keep the time, because the user explicitly
        // specified which hour they want. So trying to maintain the same hour (in
        // a new timezone) makes sense. Adding/subtracting hours does not follow
        // this rule.
        getSetHour = makeGetSet('Hours', true);

      function localeMeridiem(hours, minutes, isLower) {
        if (hours > 11) {
          return isLower ? 'pm' : 'PM';
        } else {
          return isLower ? 'am' : 'AM';
        }
      }

      var baseConfig = {
        calendar: defaultCalendar,
        longDateFormat: defaultLongDateFormat,
        invalidDate: defaultInvalidDate,
        ordinal: defaultOrdinal,
        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
        relativeTime: defaultRelativeTime,

        months: defaultLocaleMonths,
        monthsShort: defaultLocaleMonthsShort,

        week: defaultLocaleWeek,

        weekdays: defaultLocaleWeekdays,
        weekdaysMin: defaultLocaleWeekdaysMin,
        weekdaysShort: defaultLocaleWeekdaysShort,

        meridiemParse: defaultLocaleMeridiemParse,
      };

      // internal storage for locale config files
      var locales = {},
        localeFamilies = {},
        globalLocale;

      function commonPrefix(arr1, arr2) {
        var i,
          minl = Math.min(arr1.length, arr2.length);
        for (i = 0; i < minl; i += 1) {
          if (arr1[i] !== arr2[i]) {
            return i;
          }
        }
        return minl;
      }

      function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
      }

      // pick the locale from the array
      // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
      // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
      function chooseLocale(names) {
        var i = 0,
          j,
          next,
          locale,
          split;

        while (i < names.length) {
          split = normalizeLocale(names[i]).split('-');
          j = split.length;
          next = normalizeLocale(names[i + 1]);
          next = next ? next.split('-') : null;
          while (j > 0) {
            locale = loadLocale(split.slice(0, j).join('-'));
            if (locale) {
              return locale;
            }
            if (next && next.length >= j && commonPrefix(split, next) >= j - 1) {
              //the next array item is better than a shallower substring of this one
              break;
            }
            j--;
          }
          i++;
        }
        return globalLocale;
      }

      function loadLocale(name) {
        var oldLocale = null,
          aliasedRequire;
        // TODO: Find a better way to register and load all the locales in Node
        if (locales[name] === undefined && 'object' !== 'undefined' && module && module.exports) {
          try {
            oldLocale = globalLocale._abbr;
            aliasedRequire = commonjsRequire;
            aliasedRequire('./locale/' + name);
            getSetGlobalLocale(oldLocale);
          } catch (e) {
            // mark as not found to avoid repeating expensive file require call causing high CPU
            // when trying to find en-US, en_US, en-us for every format call
            locales[name] = null; // null means not found
          }
        }
        return locales[name];
      }

      // This function will load locale and then set the global locale.  If
      // no arguments are passed in, it will simply return the current global
      // locale key.
      function getSetGlobalLocale(key, values) {
        var data;
        if (key) {
          if (isUndefined(values)) {
            data = getLocale(key);
          } else {
            data = defineLocale(key, values);
          }

          if (data) {
            // moment.duration._locale = moment._locale = data;
            globalLocale = data;
          } else {
            if (typeof console !== 'undefined' && console.warn) {
              //warn user if arguments are passed but the locale could not be set
              console.warn('Locale ' + key + ' not found. Did you forget to load it?');
            }
          }
        }

        return globalLocale._abbr;
      }

      function defineLocale(name, config) {
        if (config !== null) {
          var locale,
            parentConfig = baseConfig;
          config.abbr = name;
          if (locales[name] != null) {
            deprecateSimple(
              'defineLocaleOverride',
              'use moment.updateLocale(localeName, config) to change ' +
                'an existing locale. moment.defineLocale(localeName, ' +
                'config) should only be used for creating a new locale ' +
                'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.',
            );
            parentConfig = locales[name]._config;
          } else if (config.parentLocale != null) {
            if (locales[config.parentLocale] != null) {
              parentConfig = locales[config.parentLocale]._config;
            } else {
              locale = loadLocale(config.parentLocale);
              if (locale != null) {
                parentConfig = locale._config;
              } else {
                if (!localeFamilies[config.parentLocale]) {
                  localeFamilies[config.parentLocale] = [];
                }
                localeFamilies[config.parentLocale].push({
                  name: name,
                  config: config,
                });
                return null;
              }
            }
          }
          locales[name] = new Locale(mergeConfigs(parentConfig, config));

          if (localeFamilies[name]) {
            localeFamilies[name].forEach(function (x) {
              defineLocale(x.name, x.config);
            });
          }

          // backwards compat for now: also set the locale
          // make sure we set the locale AFTER all child locales have been
          // created, so we won't end up with the child locale set.
          getSetGlobalLocale(name);

          return locales[name];
        } else {
          // useful for testing
          delete locales[name];
          return null;
        }
      }

      function updateLocale(name, config) {
        if (config != null) {
          var locale,
            tmpLocale,
            parentConfig = baseConfig;

          if (locales[name] != null && locales[name].parentLocale != null) {
            // Update existing child locale in-place to avoid memory-leaks
            locales[name].set(mergeConfigs(locales[name]._config, config));
          } else {
            // MERGE
            tmpLocale = loadLocale(name);
            if (tmpLocale != null) {
              parentConfig = tmpLocale._config;
            }
            config = mergeConfigs(parentConfig, config);
            if (tmpLocale == null) {
              // updateLocale is called for creating a new locale
              // Set abbr so it will have a name (getters return
              // undefined otherwise).
              config.abbr = name;
            }
            locale = new Locale(config);
            locale.parentLocale = locales[name];
            locales[name] = locale;
          }

          // backwards compat for now: also set the locale
          getSetGlobalLocale(name);
        } else {
          // pass null for config to unupdate, useful for tests
          if (locales[name] != null) {
            if (locales[name].parentLocale != null) {
              locales[name] = locales[name].parentLocale;
              if (name === getSetGlobalLocale()) {
                getSetGlobalLocale(name);
              }
            } else if (locales[name] != null) {
              delete locales[name];
            }
          }
        }
        return locales[name];
      }

      // returns locale data
      function getLocale(key) {
        var locale;

        if (key && key._locale && key._locale._abbr) {
          key = key._locale._abbr;
        }

        if (!key) {
          return globalLocale;
        }

        if (!isArray(key)) {
          //short-circuit everything else
          locale = loadLocale(key);
          if (locale) {
            return locale;
          }
          key = [key];
        }

        return chooseLocale(key);
      }

      function listLocales() {
        return keys(locales);
      }

      function checkOverflow(m) {
        var overflow,
          a = m._a;

        if (a && getParsingFlags(m).overflow === -2) {
          overflow =
            a[MONTH] < 0 || a[MONTH] > 11
              ? MONTH
              : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH])
              ? DATE
              : a[HOUR] < 0 ||
                a[HOUR] > 24 ||
                (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0))
              ? HOUR
              : a[MINUTE] < 0 || a[MINUTE] > 59
              ? MINUTE
              : a[SECOND] < 0 || a[SECOND] > 59
              ? SECOND
              : a[MILLISECOND] < 0 || a[MILLISECOND] > 999
              ? MILLISECOND
              : -1;

          if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
            overflow = DATE;
          }
          if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
            overflow = WEEK;
          }
          if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
            overflow = WEEKDAY;
          }

          getParsingFlags(m).overflow = overflow;
        }

        return m;
      }

      // iso 8601 regex
      // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
      var extendedIsoRegex =
          /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
        basicIsoRegex =
          /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
        tzRegex = /Z|[+-]\d\d(?::?\d\d)?/,
        isoDates = [
          ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
          ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
          ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
          ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
          ['YYYY-DDD', /\d{4}-\d{3}/],
          ['YYYY-MM', /\d{4}-\d\d/, false],
          ['YYYYYYMMDD', /[+-]\d{10}/],
          ['YYYYMMDD', /\d{8}/],
          ['GGGG[W]WWE', /\d{4}W\d{3}/],
          ['GGGG[W]WW', /\d{4}W\d{2}/, false],
          ['YYYYDDD', /\d{7}/],
          ['YYYYMM', /\d{6}/, false],
          ['YYYY', /\d{4}/, false],
        ],
        // iso time formats and regexes
        isoTimes = [
          ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
          ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
          ['HH:mm:ss', /\d\d:\d\d:\d\d/],
          ['HH:mm', /\d\d:\d\d/],
          ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
          ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
          ['HHmmss', /\d\d\d\d\d\d/],
          ['HHmm', /\d\d\d\d/],
          ['HH', /\d\d/],
        ],
        aspNetJsonRegex = /^\/?Date\((-?\d+)/i,
        // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
        rfc2822 =
          /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,
        obsOffsets = {
          UT: 0,
          GMT: 0,
          EDT: -4 * 60,
          EST: -5 * 60,
          CDT: -5 * 60,
          CST: -6 * 60,
          MDT: -6 * 60,
          MST: -7 * 60,
          PDT: -7 * 60,
          PST: -8 * 60,
        };

      // date from iso format
      function configFromISO(config) {
        var i,
          l,
          string = config._i,
          match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
          allowTime,
          dateFormat,
          timeFormat,
          tzFormat;

        if (match) {
          getParsingFlags(config).iso = true;

          for (i = 0, l = isoDates.length; i < l; i++) {
            if (isoDates[i][1].exec(match[1])) {
              dateFormat = isoDates[i][0];
              allowTime = isoDates[i][2] !== false;
              break;
            }
          }
          if (dateFormat == null) {
            config._isValid = false;
            return;
          }
          if (match[3]) {
            for (i = 0, l = isoTimes.length; i < l; i++) {
              if (isoTimes[i][1].exec(match[3])) {
                // match[2] should be 'T' or space
                timeFormat = (match[2] || ' ') + isoTimes[i][0];
                break;
              }
            }
            if (timeFormat == null) {
              config._isValid = false;
              return;
            }
          }
          if (!allowTime && timeFormat != null) {
            config._isValid = false;
            return;
          }
          if (match[4]) {
            if (tzRegex.exec(match[4])) {
              tzFormat = 'Z';
            } else {
              config._isValid = false;
              return;
            }
          }
          config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
          configFromStringAndFormat(config);
        } else {
          config._isValid = false;
        }
      }

      function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
        var result = [
          untruncateYear(yearStr),
          defaultLocaleMonthsShort.indexOf(monthStr),
          parseInt(dayStr, 10),
          parseInt(hourStr, 10),
          parseInt(minuteStr, 10),
        ];

        if (secondStr) {
          result.push(parseInt(secondStr, 10));
        }

        return result;
      }

      function untruncateYear(yearStr) {
        var year = parseInt(yearStr, 10);
        if (year <= 49) {
          return 2000 + year;
        } else if (year <= 999) {
          return 1900 + year;
        }
        return year;
      }

      function preprocessRFC2822(s) {
        // Remove comments and folding whitespace and replace multiple-spaces with a single space
        return s
          .replace(/\([^)]*\)|[\n\t]/g, ' ')
          .replace(/(\s\s+)/g, ' ')
          .replace(/^\s\s*/, '')
          .replace(/\s\s*$/, '');
      }

      function checkWeekday(weekdayStr, parsedInput, config) {
        if (weekdayStr) {
          // TODO: Replace the vanilla JS Date object with an independent day-of-week check.
          var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
            weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();
          if (weekdayProvided !== weekdayActual) {
            getParsingFlags(config).weekdayMismatch = true;
            config._isValid = false;
            return false;
          }
        }
        return true;
      }

      function calculateOffset(obsOffset, militaryOffset, numOffset) {
        if (obsOffset) {
          return obsOffsets[obsOffset];
        } else if (militaryOffset) {
          // the only allowed military tz is Z
          return 0;
        } else {
          var hm = parseInt(numOffset, 10),
            m = hm % 100,
            h = (hm - m) / 100;
          return h * 60 + m;
        }
      }

      // date and time from ref 2822 format
      function configFromRFC2822(config) {
        var match = rfc2822.exec(preprocessRFC2822(config._i)),
          parsedArray;
        if (match) {
          parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);
          if (!checkWeekday(match[1], parsedArray, config)) {
            return;
          }

          config._a = parsedArray;
          config._tzm = calculateOffset(match[8], match[9], match[10]);

          config._d = createUTCDate.apply(null, config._a);
          config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

          getParsingFlags(config).rfc2822 = true;
        } else {
          config._isValid = false;
        }
      }

      // date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict
      function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);
        if (matched !== null) {
          config._d = new Date(+matched[1]);
          return;
        }

        configFromISO(config);
        if (config._isValid === false) {
          delete config._isValid;
        } else {
          return;
        }

        configFromRFC2822(config);
        if (config._isValid === false) {
          delete config._isValid;
        } else {
          return;
        }

        if (config._strict) {
          config._isValid = false;
        } else {
          // Final attempt, use Input Fallback
          hooks.createFromInputFallback(config);
        }
      }

      hooks.createFromInputFallback = deprecate(
        'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
          'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
          'discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.',
        function (config) {
          config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
        },
      );

      // Pick the first defined of two or three arguments.
      function defaults(a, b, c) {
        if (a != null) {
          return a;
        }
        if (b != null) {
          return b;
        }
        return c;
      }

      function currentDateArray(config) {
        // hooks is actually the exported moment object
        var nowValue = new Date(hooks.now());
        if (config._useUTC) {
          return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
        }
        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
      }

      // convert an array to a date.
      // the array should mirror the parameters below
      // note: all values past the year are optional and will default to the lowest possible value.
      // [year, month, day , hour, minute, second, millisecond]
      function configFromArray(config) {
        var i,
          date,
          input = [],
          currentDate,
          expectedWeekday,
          yearToUse;

        if (config._d) {
          return;
        }

        currentDate = currentDateArray(config);

        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
          dayOfYearFromWeekInfo(config);
        }

        //if the day of the year is set, figure out what it is
        if (config._dayOfYear != null) {
          yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

          if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
            getParsingFlags(config)._overflowDayOfYear = true;
          }

          date = createUTCDate(yearToUse, 0, config._dayOfYear);
          config._a[MONTH] = date.getUTCMonth();
          config._a[DATE] = date.getUTCDate();
        }

        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
          config._a[i] = input[i] = currentDate[i];
        }

        // Zero out whatever was not defaulted, including time
        for (; i < 7; i++) {
          config._a[i] = input[i] = config._a[i] == null ? (i === 2 ? 1 : 0) : config._a[i];
        }

        // Check for 24:00:00.000
        if (
          config._a[HOUR] === 24 &&
          config._a[MINUTE] === 0 &&
          config._a[SECOND] === 0 &&
          config._a[MILLISECOND] === 0
        ) {
          config._nextDay = true;
          config._a[HOUR] = 0;
        }

        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
        expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();

        // Apply timezone offset from input. The actual utcOffset can be changed
        // with parseZone.
        if (config._tzm != null) {
          config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }

        if (config._nextDay) {
          config._a[HOUR] = 24;
        }

        // check for mismatching day of week
        if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {
          getParsingFlags(config).weekdayMismatch = true;
        }
      }

      function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;

        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
          dow = 1;
          doy = 4;

          // TODO: We need to take the current isoWeekYear, but that depends on
          // how we interpret now (local, utc, fixed offset). So create
          // a now version of current config (take local/utc/offset flags, and
          // create now).
          weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
          week = defaults(w.W, 1);
          weekday = defaults(w.E, 1);
          if (weekday < 1 || weekday > 7) {
            weekdayOverflow = true;
          }
        } else {
          dow = config._locale._week.dow;
          doy = config._locale._week.doy;

          curWeek = weekOfYear(createLocal(), dow, doy);

          weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

          // Default to current week.
          week = defaults(w.w, curWeek.week);

          if (w.d != null) {
            // weekday -- low day numbers are considered next week
            weekday = w.d;
            if (weekday < 0 || weekday > 6) {
              weekdayOverflow = true;
            }
          } else if (w.e != null) {
            // local weekday -- counting starts from beginning of week
            weekday = w.e + dow;
            if (w.e < 0 || w.e > 6) {
              weekdayOverflow = true;
            }
          } else {
            // default to beginning of week
            weekday = dow;
          }
        }
        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
          getParsingFlags(config)._overflowWeeks = true;
        } else if (weekdayOverflow != null) {
          getParsingFlags(config)._overflowWeekday = true;
        } else {
          temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
          config._a[YEAR] = temp.year;
          config._dayOfYear = temp.dayOfYear;
        }
      }

      // constant that refers to the ISO standard
      hooks.ISO_8601 = function () {};

      // constant that refers to the RFC 2822 form
      hooks.RFC_2822 = function () {};

      // date from string and format string
      function configFromStringAndFormat(config) {
        // TODO: Move this to another part of the creation flow to prevent circular deps
        if (config._f === hooks.ISO_8601) {
          configFromISO(config);
          return;
        }
        if (config._f === hooks.RFC_2822) {
          configFromRFC2822(config);
          return;
        }
        config._a = [];
        getParsingFlags(config).empty = true;

        // This array is used to make a Date, either with `new Date` or `Date.UTC`
        var string = '' + config._i,
          i,
          parsedInput,
          tokens,
          token,
          skipped,
          stringLength = string.length,
          totalParsedInputLength = 0,
          era;

        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

        for (i = 0; i < tokens.length; i++) {
          token = tokens[i];
          parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
          if (parsedInput) {
            skipped = string.substr(0, string.indexOf(parsedInput));
            if (skipped.length > 0) {
              getParsingFlags(config).unusedInput.push(skipped);
            }
            string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
            totalParsedInputLength += parsedInput.length;
          }
          // don't parse if it's not a known token
          if (formatTokenFunctions[token]) {
            if (parsedInput) {
              getParsingFlags(config).empty = false;
            } else {
              getParsingFlags(config).unusedTokens.push(token);
            }
            addTimeToArrayFromToken(token, parsedInput, config);
          } else if (config._strict && !parsedInput) {
            getParsingFlags(config).unusedTokens.push(token);
          }
        }

        // add remaining unparsed input length to the string
        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
          getParsingFlags(config).unusedInput.push(string);
        }

        // clear _12h flag if hour is <= 12
        if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) {
          getParsingFlags(config).bigHour = undefined;
        }

        getParsingFlags(config).parsedDateParts = config._a.slice(0);
        getParsingFlags(config).meridiem = config._meridiem;
        // handle meridiem
        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

        // handle era
        era = getParsingFlags(config).era;
        if (era !== null) {
          config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
        }

        configFromArray(config);
        checkOverflow(config);
      }

      function meridiemFixWrap(locale, hour, meridiem) {
        var isPm;

        if (meridiem == null) {
          // nothing to do
          return hour;
        }
        if (locale.meridiemHour != null) {
          return locale.meridiemHour(hour, meridiem);
        } else if (locale.isPM != null) {
          // Fallback
          isPm = locale.isPM(meridiem);
          if (isPm && hour < 12) {
            hour += 12;
          }
          if (!isPm && hour === 12) {
            hour = 0;
          }
          return hour;
        } else {
          // this is not supposed to happen
          return hour;
        }
      }

      // date from string and array of format strings
      function configFromStringAndArray(config) {
        var tempConfig,
          bestMoment,
          scoreToBeat,
          i,
          currentScore,
          validFormatFound,
          bestFormatIsValid = false;

        if (config._f.length === 0) {
          getParsingFlags(config).invalidFormat = true;
          config._d = new Date(NaN);
          return;
        }

        for (i = 0; i < config._f.length; i++) {
          currentScore = 0;
          validFormatFound = false;
          tempConfig = copyConfig({}, config);
          if (config._useUTC != null) {
            tempConfig._useUTC = config._useUTC;
          }
          tempConfig._f = config._f[i];
          configFromStringAndFormat(tempConfig);

          if (isValid(tempConfig)) {
            validFormatFound = true;
          }

          // if there is any input that was not parsed add a penalty for that format
          currentScore += getParsingFlags(tempConfig).charsLeftOver;

          //or tokens
          currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

          getParsingFlags(tempConfig).score = currentScore;

          if (!bestFormatIsValid) {
            if (scoreToBeat == null || currentScore < scoreToBeat || validFormatFound) {
              scoreToBeat = currentScore;
              bestMoment = tempConfig;
              if (validFormatFound) {
                bestFormatIsValid = true;
              }
            }
          } else {
            if (currentScore < scoreToBeat) {
              scoreToBeat = currentScore;
              bestMoment = tempConfig;
            }
          }
        }

        extend(config, bestMoment || tempConfig);
      }

      function configFromObject(config) {
        if (config._d) {
          return;
        }

        var i = normalizeObjectUnits(config._i),
          dayOrDate = i.day === undefined ? i.date : i.day;
        config._a = map([i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond], function (obj) {
          return obj && parseInt(obj, 10);
        });

        configFromArray(config);
      }

      function createFromConfig(config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
          // Adding is smart enough around DST
          res.add(1, 'd');
          res._nextDay = undefined;
        }

        return res;
      }

      function prepareConfig(config) {
        var input = config._i,
          format = config._f;

        config._locale = config._locale || getLocale(config._l);

        if (input === null || (format === undefined && input === '')) {
          return createInvalid({ nullInput: true });
        }

        if (typeof input === 'string') {
          config._i = input = config._locale.preparse(input);
        }

        if (isMoment(input)) {
          return new Moment(checkOverflow(input));
        } else if (isDate(input)) {
          config._d = input;
        } else if (isArray(format)) {
          configFromStringAndArray(config);
        } else if (format) {
          configFromStringAndFormat(config);
        } else {
          configFromInput(config);
        }

        if (!isValid(config)) {
          config._d = null;
        }

        return config;
      }

      function configFromInput(config) {
        var input = config._i;
        if (isUndefined(input)) {
          config._d = new Date(hooks.now());
        } else if (isDate(input)) {
          config._d = new Date(input.valueOf());
        } else if (typeof input === 'string') {
          configFromString(config);
        } else if (isArray(input)) {
          config._a = map(input.slice(0), function (obj) {
            return parseInt(obj, 10);
          });
          configFromArray(config);
        } else if (isObject(input)) {
          configFromObject(config);
        } else if (isNumber(input)) {
          // from milliseconds
          config._d = new Date(input);
        } else {
          hooks.createFromInputFallback(config);
        }
      }

      function createLocalOrUTC(input, format, locale, strict, isUTC) {
        var c = {};

        if (format === true || format === false) {
          strict = format;
          format = undefined;
        }

        if (locale === true || locale === false) {
          strict = locale;
          locale = undefined;
        }

        if ((isObject(input) && isObjectEmpty(input)) || (isArray(input) && input.length === 0)) {
          input = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;

        return createFromConfig(c);
      }

      function createLocal(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, false);
      }

      var prototypeMin = deprecate(
          'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
          function () {
            var other = createLocal.apply(null, arguments);
            if (this.isValid() && other.isValid()) {
              return other < this ? this : other;
            } else {
              return createInvalid();
            }
          },
        ),
        prototypeMax = deprecate(
          'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
          function () {
            var other = createLocal.apply(null, arguments);
            if (this.isValid() && other.isValid()) {
              return other > this ? this : other;
            } else {
              return createInvalid();
            }
          },
        );

      // Pick a moment m from moments so that m[fn](other) is true for all
      // other. This relies on the function fn to be transitive.
      //
      // moments should either be an array of moment objects or an array, whose
      // first element is an array of moment objects.
      function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
          moments = moments[0];
        }
        if (!moments.length) {
          return createLocal();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
          if (!moments[i].isValid() || moments[i][fn](res)) {
            res = moments[i];
          }
        }
        return res;
      }

      // TODO: Use [].sort instead?
      function min() {
        var args = [].slice.call(arguments, 0);

        return pickBy('isBefore', args);
      }

      function max() {
        var args = [].slice.call(arguments, 0);

        return pickBy('isAfter', args);
      }

      var now = function () {
        return Date.now ? Date.now() : +new Date();
      };

      var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];

      function isDurationValid(m) {
        var key,
          unitHasDecimal = false,
          i;
        for (key in m) {
          if (hasOwnProp(m, key) && !(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
            return false;
          }
        }

        for (i = 0; i < ordering.length; ++i) {
          if (m[ordering[i]]) {
            if (unitHasDecimal) {
              return false; // only allow non-integers for smallest unit
            }
            if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
              unitHasDecimal = true;
            }
          }
        }

        return true;
      }

      function isValid$1() {
        return this._isValid;
      }

      function createInvalid$1() {
        return createDuration(NaN);
      }

      function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration),
          years = normalizedInput.year || 0,
          quarters = normalizedInput.quarter || 0,
          months = normalizedInput.month || 0,
          weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
          days = normalizedInput.day || 0,
          hours = normalizedInput.hour || 0,
          minutes = normalizedInput.minute || 0,
          seconds = normalizedInput.second || 0,
          milliseconds = normalizedInput.millisecond || 0;

        this._isValid = isDurationValid(normalizedInput);

        // representation for dateAddRemove
        this._milliseconds =
          +milliseconds +
          seconds * 1e3 + // 1000
          minutes * 6e4 + // 1000 * 60
          hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = +days + weeks * 7;
        // It is impossible to translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = +months + quarters * 3 + years * 12;

        this._data = {};

        this._locale = getLocale();

        this._bubble();
      }

      function isDuration(obj) {
        return obj instanceof Duration;
      }

      function absRound(number) {
        if (number < 0) {
          return Math.round(-1 * number) * -1;
        } else {
          return Math.round(number);
        }
      }

      // compare two arrays, return the number of differences
      function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
          lengthDiff = Math.abs(array1.length - array2.length),
          diffs = 0,
          i;
        for (i = 0; i < len; i++) {
          if ((dontConvert && array1[i] !== array2[i]) || (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
            diffs++;
          }
        }
        return diffs + lengthDiff;
      }

      // FORMATTING

      function offset(token, separator) {
        addFormatToken(token, 0, 0, function () {
          var offset = this.utcOffset(),
            sign = '+';
          if (offset < 0) {
            offset = -offset;
            sign = '-';
          }
          return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~offset % 60, 2);
        });
      }

      offset('Z', ':');
      offset('ZZ', '');

      // PARSING

      addRegexToken('Z', matchShortOffset);
      addRegexToken('ZZ', matchShortOffset);
      addParseToken(['Z', 'ZZ'], function (input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(matchShortOffset, input);
      });

      // HELPERS

      // timezone chunker
      // '+10:00' > ['10',  '00']
      // '-1530'  > ['-15', '30']
      var chunkOffset = /([\+\-]|\d\d)/gi;

      function offsetFromString(matcher, string) {
        var matches = (string || '').match(matcher),
          chunk,
          parts,
          minutes;

        if (matches === null) {
          return null;
        }

        chunk = matches[matches.length - 1] || [];
        parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
        minutes = +(parts[1] * 60) + toInt(parts[2]);

        return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
      }

      // Return a moment from input, that is local/utc/zone equivalent to model.
      function cloneWithOffset(input, model) {
        var res, diff;
        if (model._isUTC) {
          res = model.clone();
          diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
          // Use low-level api, because this fn is low-level api.
          res._d.setTime(res._d.valueOf() + diff);
          hooks.updateOffset(res, false);
          return res;
        } else {
          return createLocal(input).local();
        }
      }

      function getDateOffset(m) {
        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
        // https://github.com/moment/moment/pull/1871
        return -Math.round(m._d.getTimezoneOffset());
      }

      // HOOKS

      // This function will be called whenever a moment is mutated.
      // It is intended to keep the offset in sync with the timezone.
      hooks.updateOffset = function () {};

      // MOMENTS

      // keepLocalTime = true means only change the timezone, without
      // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
      // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
      // +0200, so we adjust the time as needed, to be valid.
      //
      // Keeping the time actually adds/subtracts (one hour)
      // from the actual represented time. That is why we call updateOffset
      // a second time. In case it wants us to change the offset again
      // _changeInProgress == true case, then we have to adjust, because
      // there is no such time in the given timezone.
      function getSetOffset(input, keepLocalTime, keepMinutes) {
        var offset = this._offset || 0,
          localAdjust;
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }
        if (input != null) {
          if (typeof input === 'string') {
            input = offsetFromString(matchShortOffset, input);
            if (input === null) {
              return this;
            }
          } else if (Math.abs(input) < 16 && !keepMinutes) {
            input = input * 60;
          }
          if (!this._isUTC && keepLocalTime) {
            localAdjust = getDateOffset(this);
          }
          this._offset = input;
          this._isUTC = true;
          if (localAdjust != null) {
            this.add(localAdjust, 'm');
          }
          if (offset !== input) {
            if (!keepLocalTime || this._changeInProgress) {
              addSubtract(this, createDuration(input - offset, 'm'), 1, false);
            } else if (!this._changeInProgress) {
              this._changeInProgress = true;
              hooks.updateOffset(this, true);
              this._changeInProgress = null;
            }
          }
          return this;
        } else {
          return this._isUTC ? offset : getDateOffset(this);
        }
      }

      function getSetZone(input, keepLocalTime) {
        if (input != null) {
          if (typeof input !== 'string') {
            input = -input;
          }

          this.utcOffset(input, keepLocalTime);

          return this;
        } else {
          return -this.utcOffset();
        }
      }

      function setOffsetToUTC(keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
      }

      function setOffsetToLocal(keepLocalTime) {
        if (this._isUTC) {
          this.utcOffset(0, keepLocalTime);
          this._isUTC = false;

          if (keepLocalTime) {
            this.subtract(getDateOffset(this), 'm');
          }
        }
        return this;
      }

      function setOffsetToParsedOffset() {
        if (this._tzm != null) {
          this.utcOffset(this._tzm, false, true);
        } else if (typeof this._i === 'string') {
          var tZone = offsetFromString(matchOffset, this._i);
          if (tZone != null) {
            this.utcOffset(tZone);
          } else {
            this.utcOffset(0, true);
          }
        }
        return this;
      }

      function hasAlignedHourOffset(input) {
        if (!this.isValid()) {
          return false;
        }
        input = input ? createLocal(input).utcOffset() : 0;

        return (this.utcOffset() - input) % 60 === 0;
      }

      function isDaylightSavingTime() {
        return (
          this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset()
        );
      }

      function isDaylightSavingTimeShifted() {
        if (!isUndefined(this._isDSTShifted)) {
          return this._isDSTShifted;
        }

        var c = {},
          other;

        copyConfig(c, this);
        c = prepareConfig(c);

        if (c._a) {
          other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
          this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
        } else {
          this._isDSTShifted = false;
        }

        return this._isDSTShifted;
      }

      function isLocal() {
        return this.isValid() ? !this._isUTC : false;
      }

      function isUtcOffset() {
        return this.isValid() ? this._isUTC : false;
      }

      function isUtc() {
        return this.isValid() ? this._isUTC && this._offset === 0 : false;
      }

      // ASP.NET json date format regex
      var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,
        // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
        // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
        // and further modified to allow for strings containing both week and day
        isoRegex =
          /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

      function createDuration(input, key) {
        var duration = input,
          // matching against regexp is expensive, do it on demand
          match = null,
          sign,
          ret,
          diffRes;

        if (isDuration(input)) {
          duration = {
            ms: input._milliseconds,
            d: input._days,
            M: input._months,
          };
        } else if (isNumber(input) || !isNaN(+input)) {
          duration = {};
          if (key) {
            duration[key] = +input;
          } else {
            duration.milliseconds = +input;
          }
        } else if ((match = aspNetRegex.exec(input))) {
          sign = match[1] === '-' ? -1 : 1;
          duration = {
            y: 0,
            d: toInt(match[DATE]) * sign,
            h: toInt(match[HOUR]) * sign,
            m: toInt(match[MINUTE]) * sign,
            s: toInt(match[SECOND]) * sign,
            ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign, // the millisecond decimal point is included in the match
          };
        } else if ((match = isoRegex.exec(input))) {
          sign = match[1] === '-' ? -1 : 1;
          duration = {
            y: parseIso(match[2], sign),
            M: parseIso(match[3], sign),
            w: parseIso(match[4], sign),
            d: parseIso(match[5], sign),
            h: parseIso(match[6], sign),
            m: parseIso(match[7], sign),
            s: parseIso(match[8], sign),
          };
        } else if (duration == null) {
          // checks for null or undefined
          duration = {};
        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
          diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));

          duration = {};
          duration.ms = diffRes.milliseconds;
          duration.M = diffRes.months;
        }

        ret = new Duration(duration);

        if (isDuration(input) && hasOwnProp(input, '_locale')) {
          ret._locale = input._locale;
        }

        if (isDuration(input) && hasOwnProp(input, '_isValid')) {
          ret._isValid = input._isValid;
        }

        return ret;
      }

      createDuration.fn = Duration.prototype;
      createDuration.invalid = createInvalid$1;

      function parseIso(inp, sign) {
        // We'd normally use ~~inp for this, but unfortunately it also
        // converts floats to ints.
        // inp may be undefined, so careful calling replace on it.
        var res = inp && parseFloat(inp.replace(',', '.'));
        // apply sign while we're at it
        return (isNaN(res) ? 0 : res) * sign;
      }

      function positiveMomentsDifference(base, other) {
        var res = {};

        res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
          --res.months;
        }

        res.milliseconds = +other - +base.clone().add(res.months, 'M');

        return res;
      }

      function momentsDifference(base, other) {
        var res;
        if (!(base.isValid() && other.isValid())) {
          return { milliseconds: 0, months: 0 };
        }

        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
          res = positiveMomentsDifference(base, other);
        } else {
          res = positiveMomentsDifference(other, base);
          res.milliseconds = -res.milliseconds;
          res.months = -res.months;
        }

        return res;
      }

      // TODO: remove 'name' arg after deprecation is removed
      function createAdder(direction, name) {
        return function (val, period) {
          var dur, tmp;
          //invert the arguments, but complain about it
          if (period !== null && !isNaN(+period)) {
            deprecateSimple(
              name,
              'moment().' +
                name +
                '(period, number) is deprecated. Please use moment().' +
                name +
                '(number, period). ' +
                'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.',
            );
            tmp = val;
            val = period;
            period = tmp;
          }

          dur = createDuration(val, period);
          addSubtract(this, dur, direction);
          return this;
        };
      }

      function addSubtract(mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds,
          days = absRound(duration._days),
          months = absRound(duration._months);

        if (!mom.isValid()) {
          // No op
          return;
        }

        updateOffset = updateOffset == null ? true : updateOffset;

        if (months) {
          setMonth(mom, get(mom, 'Month') + months * isAdding);
        }
        if (days) {
          set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
        }
        if (milliseconds) {
          mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
        }
        if (updateOffset) {
          hooks.updateOffset(mom, days || months);
        }
      }

      var add = createAdder(1, 'add'),
        subtract = createAdder(-1, 'subtract');

      function isString(input) {
        return typeof input === 'string' || input instanceof String;
      }

      // type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined
      function isMomentInput(input) {
        return (
          isMoment(input) ||
          isDate(input) ||
          isString(input) ||
          isNumber(input) ||
          isNumberOrStringArray(input) ||
          isMomentInputObject(input) ||
          input === null ||
          input === undefined
        );
      }

      function isMomentInputObject(input) {
        var objectTest = isObject(input) && !isObjectEmpty(input),
          propertyTest = false,
          properties = [
            'years',
            'year',
            'y',
            'months',
            'month',
            'M',
            'days',
            'day',
            'd',
            'dates',
            'date',
            'D',
            'hours',
            'hour',
            'h',
            'minutes',
            'minute',
            'm',
            'seconds',
            'second',
            's',
            'milliseconds',
            'millisecond',
            'ms',
          ],
          i,
          property;

        for (i = 0; i < properties.length; i += 1) {
          property = properties[i];
          propertyTest = propertyTest || hasOwnProp(input, property);
        }

        return objectTest && propertyTest;
      }

      function isNumberOrStringArray(input) {
        var arrayTest = isArray(input),
          dataTypeTest = false;
        if (arrayTest) {
          dataTypeTest =
            input.filter(function (item) {
              return !isNumber(item) && isString(input);
            }).length === 0;
        }
        return arrayTest && dataTypeTest;
      }

      function isCalendarSpec(input) {
        var objectTest = isObject(input) && !isObjectEmpty(input),
          propertyTest = false,
          properties = ['sameDay', 'nextDay', 'lastDay', 'nextWeek', 'lastWeek', 'sameElse'],
          i,
          property;

        for (i = 0; i < properties.length; i += 1) {
          property = properties[i];
          propertyTest = propertyTest || hasOwnProp(input, property);
        }

        return objectTest && propertyTest;
      }

      function getCalendarFormat(myMoment, now) {
        var diff = myMoment.diff(now, 'days', true);
        return diff < -6
          ? 'sameElse'
          : diff < -1
          ? 'lastWeek'
          : diff < 0
          ? 'lastDay'
          : diff < 1
          ? 'sameDay'
          : diff < 2
          ? 'nextDay'
          : diff < 7
          ? 'nextWeek'
          : 'sameElse';
      }

      function calendar$1(time, formats) {
        // Support for single parameter, formats only overload to the calendar function
        if (arguments.length === 1) {
          if (!arguments[0]) {
            time = undefined;
            formats = undefined;
          } else if (isMomentInput(arguments[0])) {
            time = arguments[0];
            formats = undefined;
          } else if (isCalendarSpec(arguments[0])) {
            formats = arguments[0];
            time = undefined;
          }
        }
        // We want to compare the start of today, vs this.
        // Getting start-of-today depends on whether we're local/utc/offset or not.
        var now = time || createLocal(),
          sod = cloneWithOffset(now, this).startOf('day'),
          format = hooks.calendarFormat(this, sod) || 'sameElse',
          output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);

        return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
      }

      function clone() {
        return new Moment(this);
      }

      function isAfter(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
          return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
          return this.valueOf() > localInput.valueOf();
        } else {
          return localInput.valueOf() < this.clone().startOf(units).valueOf();
        }
      }

      function isBefore(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
          return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
          return this.valueOf() < localInput.valueOf();
        } else {
          return this.clone().endOf(units).valueOf() < localInput.valueOf();
        }
      }

      function isBetween(from, to, units, inclusivity) {
        var localFrom = isMoment(from) ? from : createLocal(from),
          localTo = isMoment(to) ? to : createLocal(to);
        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
          return false;
        }
        inclusivity = inclusivity || '()';
        return (
          (inclusivity[0] === '(' ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) &&
          (inclusivity[1] === ')' ? this.isBefore(localTo, units) : !this.isAfter(localTo, units))
        );
      }

      function isSame(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input),
          inputMs;
        if (!(this.isValid() && localInput.isValid())) {
          return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
          return this.valueOf() === localInput.valueOf();
        } else {
          inputMs = localInput.valueOf();
          return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
        }
      }

      function isSameOrAfter(input, units) {
        return this.isSame(input, units) || this.isAfter(input, units);
      }

      function isSameOrBefore(input, units) {
        return this.isSame(input, units) || this.isBefore(input, units);
      }

      function diff(input, units, asFloat) {
        var that, zoneDelta, output;

        if (!this.isValid()) {
          return NaN;
        }

        that = cloneWithOffset(input, this);

        if (!that.isValid()) {
          return NaN;
        }

        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

        units = normalizeUnits(units);

        switch (units) {
          case 'year':
            output = monthDiff(this, that) / 12;
            break;
          case 'month':
            output = monthDiff(this, that);
            break;
          case 'quarter':
            output = monthDiff(this, that) / 3;
            break;
          case 'second':
            output = (this - that) / 1e3;
            break; // 1000
          case 'minute':
            output = (this - that) / 6e4;
            break; // 1000 * 60
          case 'hour':
            output = (this - that) / 36e5;
            break; // 1000 * 60 * 60
          case 'day':
            output = (this - that - zoneDelta) / 864e5;
            break; // 1000 * 60 * 60 * 24, negate dst
          case 'week':
            output = (this - that - zoneDelta) / 6048e5;
            break; // 1000 * 60 * 60 * 24 * 7, negate dst
          default:
            output = this - that;
        }

        return asFloat ? output : absFloor(output);
      }

      function monthDiff(a, b) {
        if (a.date() < b.date()) {
          // end-of-month calculations work correct when the start month has more
          // days than the end month.
          return -monthDiff(b, a);
        }
        // difference in months
        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),
          // b is in (anchor - 1 month, anchor + 1 month)
          anchor = a.clone().add(wholeMonthDiff, 'months'),
          anchor2,
          adjust;

        if (b - anchor < 0) {
          anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
          // linear across the month
          adjust = (b - anchor) / (anchor - anchor2);
        } else {
          anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
          // linear across the month
          adjust = (b - anchor) / (anchor2 - anchor);
        }

        //check for negative zero, return zero if negative zero
        return -(wholeMonthDiff + adjust) || 0;
      }

      hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
      hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

      function toString() {
        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
      }

      function toISOString(keepOffset) {
        if (!this.isValid()) {
          return null;
        }
        var utc = keepOffset !== true,
          m = utc ? this.clone().utc() : this;
        if (m.year() < 0 || m.year() > 9999) {
          return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');
        }
        if (isFunction(Date.prototype.toISOString)) {
          // native implementation is ~50x faster, use it when we can
          if (utc) {
            return this.toDate().toISOString();
          } else {
            return new Date(this.valueOf() + this.utcOffset() * 60 * 1000)
              .toISOString()
              .replace('Z', formatMoment(m, 'Z'));
          }
        }
        return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');
      }

      /**
       * Return a human readable representation of a moment that can
       * also be evaluated to get a new moment which is the same
       *
       * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
       */
      function inspect() {
        if (!this.isValid()) {
          return 'moment.invalid(/* ' + this._i + ' */)';
        }
        var func = 'moment',
          zone = '',
          prefix,
          year,
          datetime,
          suffix;
        if (!this.isLocal()) {
          func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
          zone = 'Z';
        }
        prefix = '[' + func + '("]';
        year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
        datetime = '-MM-DD[T]HH:mm:ss.SSS';
        suffix = zone + '[")]';

        return this.format(prefix + year + datetime + suffix);
      }

      function format(inputString) {
        if (!inputString) {
          inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
        }
        var output = formatMoment(this, inputString);
        return this.localeData().postformat(output);
      }

      function from(time, withoutSuffix) {
        if (this.isValid() && ((isMoment(time) && time.isValid()) || createLocal(time).isValid())) {
          return createDuration({ to: this, from: time }).locale(this.locale()).humanize(!withoutSuffix);
        } else {
          return this.localeData().invalidDate();
        }
      }

      function fromNow(withoutSuffix) {
        return this.from(createLocal(), withoutSuffix);
      }

      function to(time, withoutSuffix) {
        if (this.isValid() && ((isMoment(time) && time.isValid()) || createLocal(time).isValid())) {
          return createDuration({ from: this, to: time }).locale(this.locale()).humanize(!withoutSuffix);
        } else {
          return this.localeData().invalidDate();
        }
      }

      function toNow(withoutSuffix) {
        return this.to(createLocal(), withoutSuffix);
      }

      // If passed a locale key, it will set the locale for this
      // instance.  Otherwise, it will return the locale configuration
      // variables for this instance.
      function locale(key) {
        var newLocaleData;

        if (key === undefined) {
          return this._locale._abbr;
        } else {
          newLocaleData = getLocale(key);
          if (newLocaleData != null) {
            this._locale = newLocaleData;
          }
          return this;
        }
      }

      var lang = deprecate(
        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
        function (key) {
          if (key === undefined) {
            return this.localeData();
          } else {
            return this.locale(key);
          }
        },
      );

      function localeData() {
        return this._locale;
      }

      var MS_PER_SECOND = 1000,
        MS_PER_MINUTE = 60 * MS_PER_SECOND,
        MS_PER_HOUR = 60 * MS_PER_MINUTE,
        MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;

      // actual modulo - handles negative numbers (for dates before 1970):
      function mod$1(dividend, divisor) {
        return ((dividend % divisor) + divisor) % divisor;
      }

      function localStartOfDate(y, m, d) {
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
          // preserve leap years using a full 400 year cycle, then reset
          return new Date(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
          return new Date(y, m, d).valueOf();
        }
      }

      function utcStartOfDate(y, m, d) {
        // Date.UTC remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
          // preserve leap years using a full 400 year cycle, then reset
          return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
          return Date.UTC(y, m, d);
        }
      }

      function startOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond' || !this.isValid()) {
          return this;
        }

        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

        switch (units) {
          case 'year':
            time = startOfDate(this.year(), 0, 1);
            break;
          case 'quarter':
            time = startOfDate(this.year(), this.month() - (this.month() % 3), 1);
            break;
          case 'month':
            time = startOfDate(this.year(), this.month(), 1);
            break;
          case 'week':
            time = startOfDate(this.year(), this.month(), this.date() - this.weekday());
            break;
          case 'isoWeek':
            time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));
            break;
          case 'day':
          case 'date':
            time = startOfDate(this.year(), this.month(), this.date());
            break;
          case 'hour':
            time = this._d.valueOf();
            time -= mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR);
            break;
          case 'minute':
            time = this._d.valueOf();
            time -= mod$1(time, MS_PER_MINUTE);
            break;
          case 'second':
            time = this._d.valueOf();
            time -= mod$1(time, MS_PER_SECOND);
            break;
        }

        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
      }

      function endOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond' || !this.isValid()) {
          return this;
        }

        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

        switch (units) {
          case 'year':
            time = startOfDate(this.year() + 1, 0, 1) - 1;
            break;
          case 'quarter':
            time = startOfDate(this.year(), this.month() - (this.month() % 3) + 3, 1) - 1;
            break;
          case 'month':
            time = startOfDate(this.year(), this.month() + 1, 1) - 1;
            break;
          case 'week':
            time = startOfDate(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;
            break;
          case 'isoWeek':
            time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;
            break;
          case 'day':
          case 'date':
            time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
            break;
          case 'hour':
            time = this._d.valueOf();
            time += MS_PER_HOUR - mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR) - 1;
            break;
          case 'minute':
            time = this._d.valueOf();
            time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
            break;
          case 'second':
            time = this._d.valueOf();
            time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
            break;
        }

        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
      }

      function valueOf() {
        return this._d.valueOf() - (this._offset || 0) * 60000;
      }

      function unix() {
        return Math.floor(this.valueOf() / 1000);
      }

      function toDate() {
        return new Date(this.valueOf());
      }

      function toArray() {
        var m = this;
        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
      }

      function toObject() {
        var m = this;
        return {
          years: m.year(),
          months: m.month(),
          date: m.date(),
          hours: m.hours(),
          minutes: m.minutes(),
          seconds: m.seconds(),
          milliseconds: m.milliseconds(),
        };
      }

      function toJSON() {
        // new Date(NaN).toJSON() === null
        return this.isValid() ? this.toISOString() : null;
      }

      function isValid$2() {
        return isValid(this);
      }

      function parsingFlags() {
        return extend({}, getParsingFlags(this));
      }

      function invalidAt() {
        return getParsingFlags(this).overflow;
      }

      function creationData() {
        return {
          input: this._i,
          format: this._f,
          locale: this._locale,
          isUTC: this._isUTC,
          strict: this._strict,
        };
      }

      addFormatToken('N', 0, 0, 'eraAbbr');
      addFormatToken('NN', 0, 0, 'eraAbbr');
      addFormatToken('NNN', 0, 0, 'eraAbbr');
      addFormatToken('NNNN', 0, 0, 'eraName');
      addFormatToken('NNNNN', 0, 0, 'eraNarrow');

      addFormatToken('y', ['y', 1], 'yo', 'eraYear');
      addFormatToken('y', ['yy', 2], 0, 'eraYear');
      addFormatToken('y', ['yyy', 3], 0, 'eraYear');
      addFormatToken('y', ['yyyy', 4], 0, 'eraYear');

      addRegexToken('N', matchEraAbbr);
      addRegexToken('NN', matchEraAbbr);
      addRegexToken('NNN', matchEraAbbr);
      addRegexToken('NNNN', matchEraName);
      addRegexToken('NNNNN', matchEraNarrow);

      addParseToken(['N', 'NN', 'NNN', 'NNNN', 'NNNNN'], function (input, array, config, token) {
        var era = config._locale.erasParse(input, token, config._strict);
        if (era) {
          getParsingFlags(config).era = era;
        } else {
          getParsingFlags(config).invalidEra = input;
        }
      });

      addRegexToken('y', matchUnsigned);
      addRegexToken('yy', matchUnsigned);
      addRegexToken('yyy', matchUnsigned);
      addRegexToken('yyyy', matchUnsigned);
      addRegexToken('yo', matchEraYearOrdinal);

      addParseToken(['y', 'yy', 'yyy', 'yyyy'], YEAR);
      addParseToken(['yo'], function (input, array, config, token) {
        var match;
        if (config._locale._eraYearOrdinalRegex) {
          match = input.match(config._locale._eraYearOrdinalRegex);
        }

        if (config._locale.eraYearOrdinalParse) {
          array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
        } else {
          array[YEAR] = parseInt(input, 10);
        }
      });

      function localeEras(m, format) {
        var i,
          l,
          date,
          eras = this._eras || getLocale('en')._eras;
        for (i = 0, l = eras.length; i < l; ++i) {
          switch (typeof eras[i].since) {
            case 'string':
              // truncate time
              date = hooks(eras[i].since).startOf('day');
              eras[i].since = date.valueOf();
              break;
          }

          switch (typeof eras[i].until) {
            case 'undefined':
              eras[i].until = +Infinity;
              break;
            case 'string':
              // truncate time
              date = hooks(eras[i].until).startOf('day').valueOf();
              eras[i].until = date.valueOf();
              break;
          }
        }
        return eras;
      }

      function localeErasParse(eraName, format, strict) {
        var i,
          l,
          eras = this.eras(),
          name,
          abbr,
          narrow;
        eraName = eraName.toUpperCase();

        for (i = 0, l = eras.length; i < l; ++i) {
          name = eras[i].name.toUpperCase();
          abbr = eras[i].abbr.toUpperCase();
          narrow = eras[i].narrow.toUpperCase();

          if (strict) {
            switch (format) {
              case 'N':
              case 'NN':
              case 'NNN':
                if (abbr === eraName) {
                  return eras[i];
                }
                break;

              case 'NNNN':
                if (name === eraName) {
                  return eras[i];
                }
                break;

              case 'NNNNN':
                if (narrow === eraName) {
                  return eras[i];
                }
                break;
            }
          } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
            return eras[i];
          }
        }
      }

      function localeErasConvertYear(era, year) {
        var dir = era.since <= era.until ? +1 : -1;
        if (year === undefined) {
          return hooks(era.since).year();
        } else {
          return hooks(era.since).year() + (year - era.offset) * dir;
        }
      }

      function getEraName() {
        var i,
          l,
          val,
          eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          // truncate time
          val = this.clone().startOf('day').valueOf();

          if (eras[i].since <= val && val <= eras[i].until) {
            return eras[i].name;
          }
          if (eras[i].until <= val && val <= eras[i].since) {
            return eras[i].name;
          }
        }

        return '';
      }

      function getEraNarrow() {
        var i,
          l,
          val,
          eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          // truncate time
          val = this.clone().startOf('day').valueOf();

          if (eras[i].since <= val && val <= eras[i].until) {
            return eras[i].narrow;
          }
          if (eras[i].until <= val && val <= eras[i].since) {
            return eras[i].narrow;
          }
        }

        return '';
      }

      function getEraAbbr() {
        var i,
          l,
          val,
          eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          // truncate time
          val = this.clone().startOf('day').valueOf();

          if (eras[i].since <= val && val <= eras[i].until) {
            return eras[i].abbr;
          }
          if (eras[i].until <= val && val <= eras[i].since) {
            return eras[i].abbr;
          }
        }

        return '';
      }

      function getEraYear() {
        var i,
          l,
          dir,
          val,
          eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          dir = eras[i].since <= eras[i].until ? +1 : -1;

          // truncate time
          val = this.clone().startOf('day').valueOf();

          if ((eras[i].since <= val && val <= eras[i].until) || (eras[i].until <= val && val <= eras[i].since)) {
            return (this.year() - hooks(eras[i].since).year()) * dir + eras[i].offset;
          }
        }

        return this.year();
      }

      function erasNameRegex(isStrict) {
        if (!hasOwnProp(this, '_erasNameRegex')) {
          computeErasParse.call(this);
        }
        return isStrict ? this._erasNameRegex : this._erasRegex;
      }

      function erasAbbrRegex(isStrict) {
        if (!hasOwnProp(this, '_erasAbbrRegex')) {
          computeErasParse.call(this);
        }
        return isStrict ? this._erasAbbrRegex : this._erasRegex;
      }

      function erasNarrowRegex(isStrict) {
        if (!hasOwnProp(this, '_erasNarrowRegex')) {
          computeErasParse.call(this);
        }
        return isStrict ? this._erasNarrowRegex : this._erasRegex;
      }

      function matchEraAbbr(isStrict, locale) {
        return locale.erasAbbrRegex(isStrict);
      }

      function matchEraName(isStrict, locale) {
        return locale.erasNameRegex(isStrict);
      }

      function matchEraNarrow(isStrict, locale) {
        return locale.erasNarrowRegex(isStrict);
      }

      function matchEraYearOrdinal(isStrict, locale) {
        return locale._eraYearOrdinalRegex || matchUnsigned;
      }

      function computeErasParse() {
        var abbrPieces = [],
          namePieces = [],
          narrowPieces = [],
          mixedPieces = [],
          i,
          l,
          eras = this.eras();

        for (i = 0, l = eras.length; i < l; ++i) {
          namePieces.push(regexEscape(eras[i].name));
          abbrPieces.push(regexEscape(eras[i].abbr));
          narrowPieces.push(regexEscape(eras[i].narrow));

          mixedPieces.push(regexEscape(eras[i].name));
          mixedPieces.push(regexEscape(eras[i].abbr));
          mixedPieces.push(regexEscape(eras[i].narrow));
        }

        this._erasRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._erasNameRegex = new RegExp('^(' + namePieces.join('|') + ')', 'i');
        this._erasAbbrRegex = new RegExp('^(' + abbrPieces.join('|') + ')', 'i');
        this._erasNarrowRegex = new RegExp('^(' + narrowPieces.join('|') + ')', 'i');
      }

      // FORMATTING

      addFormatToken(0, ['gg', 2], 0, function () {
        return this.weekYear() % 100;
      });

      addFormatToken(0, ['GG', 2], 0, function () {
        return this.isoWeekYear() % 100;
      });

      function addWeekYearFormatToken(token, getter) {
        addFormatToken(0, [token, token.length], 0, getter);
      }

      addWeekYearFormatToken('gggg', 'weekYear');
      addWeekYearFormatToken('ggggg', 'weekYear');
      addWeekYearFormatToken('GGGG', 'isoWeekYear');
      addWeekYearFormatToken('GGGGG', 'isoWeekYear');

      // ALIASES

      addUnitAlias('weekYear', 'gg');
      addUnitAlias('isoWeekYear', 'GG');

      // PRIORITY

      addUnitPriority('weekYear', 1);
      addUnitPriority('isoWeekYear', 1);

      // PARSING

      addRegexToken('G', matchSigned);
      addRegexToken('g', matchSigned);
      addRegexToken('GG', match1to2, match2);
      addRegexToken('gg', match1to2, match2);
      addRegexToken('GGGG', match1to4, match4);
      addRegexToken('gggg', match1to4, match4);
      addRegexToken('GGGGG', match1to6, match6);
      addRegexToken('ggggg', match1to6, match6);

      addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
        week[token.substr(0, 2)] = toInt(input);
      });

      addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
        week[token] = hooks.parseTwoDigitYear(input);
      });

      // MOMENTS

      function getSetWeekYear(input) {
        return getSetWeekYearHelper.call(
          this,
          input,
          this.week(),
          this.weekday(),
          this.localeData()._week.dow,
          this.localeData()._week.doy,
        );
      }

      function getSetISOWeekYear(input) {
        return getSetWeekYearHelper.call(this, input, this.isoWeek(), this.isoWeekday(), 1, 4);
      }

      function getISOWeeksInYear() {
        return weeksInYear(this.year(), 1, 4);
      }

      function getISOWeeksInISOWeekYear() {
        return weeksInYear(this.isoWeekYear(), 1, 4);
      }

      function getWeeksInYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
      }

      function getWeeksInWeekYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
      }

      function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;
        if (input == null) {
          return weekOfYear(this, dow, doy).year;
        } else {
          weeksTarget = weeksInYear(input, dow, doy);
          if (week > weeksTarget) {
            week = weeksTarget;
          }
          return setWeekAll.call(this, input, week, weekday, dow, doy);
        }
      }

      function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
          date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this;
      }

      // FORMATTING

      addFormatToken('Q', 0, 'Qo', 'quarter');

      // ALIASES

      addUnitAlias('quarter', 'Q');

      // PRIORITY

      addUnitPriority('quarter', 7);

      // PARSING

      addRegexToken('Q', match1);
      addParseToken('Q', function (input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
      });

      // MOMENTS

      function getSetQuarter(input) {
        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + (this.month() % 3));
      }

      // FORMATTING

      addFormatToken('D', ['DD', 2], 'Do', 'date');

      // ALIASES

      addUnitAlias('date', 'D');

      // PRIORITY
      addUnitPriority('date', 9);

      // PARSING

      addRegexToken('D', match1to2);
      addRegexToken('DD', match1to2, match2);
      addRegexToken('Do', function (isStrict, locale) {
        // TODO: Remove "ordinalParse" fallback in next major release.
        return isStrict
          ? locale._dayOfMonthOrdinalParse || locale._ordinalParse
          : locale._dayOfMonthOrdinalParseLenient;
      });

      addParseToken(['D', 'DD'], DATE);
      addParseToken('Do', function (input, array) {
        array[DATE] = toInt(input.match(match1to2)[0]);
      });

      // MOMENTS

      var getSetDayOfMonth = makeGetSet('Date', true);

      // FORMATTING

      addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

      // ALIASES

      addUnitAlias('dayOfYear', 'DDD');

      // PRIORITY
      addUnitPriority('dayOfYear', 4);

      // PARSING

      addRegexToken('DDD', match1to3);
      addRegexToken('DDDD', match3);
      addParseToken(['DDD', 'DDDD'], function (input, array, config) {
        config._dayOfYear = toInt(input);
      });

      // HELPERS

      // MOMENTS

      function getSetDayOfYear(input) {
        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
        return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
      }

      // FORMATTING

      addFormatToken('m', ['mm', 2], 0, 'minute');

      // ALIASES

      addUnitAlias('minute', 'm');

      // PRIORITY

      addUnitPriority('minute', 14);

      // PARSING

      addRegexToken('m', match1to2);
      addRegexToken('mm', match1to2, match2);
      addParseToken(['m', 'mm'], MINUTE);

      // MOMENTS

      var getSetMinute = makeGetSet('Minutes', false);

      // FORMATTING

      addFormatToken('s', ['ss', 2], 0, 'second');

      // ALIASES

      addUnitAlias('second', 's');

      // PRIORITY

      addUnitPriority('second', 15);

      // PARSING

      addRegexToken('s', match1to2);
      addRegexToken('ss', match1to2, match2);
      addParseToken(['s', 'ss'], SECOND);

      // MOMENTS

      var getSetSecond = makeGetSet('Seconds', false);

      // FORMATTING

      addFormatToken('S', 0, 0, function () {
        return ~~(this.millisecond() / 100);
      });

      addFormatToken(0, ['SS', 2], 0, function () {
        return ~~(this.millisecond() / 10);
      });

      addFormatToken(0, ['SSS', 3], 0, 'millisecond');
      addFormatToken(0, ['SSSS', 4], 0, function () {
        return this.millisecond() * 10;
      });
      addFormatToken(0, ['SSSSS', 5], 0, function () {
        return this.millisecond() * 100;
      });
      addFormatToken(0, ['SSSSSS', 6], 0, function () {
        return this.millisecond() * 1000;
      });
      addFormatToken(0, ['SSSSSSS', 7], 0, function () {
        return this.millisecond() * 10000;
      });
      addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
        return this.millisecond() * 100000;
      });
      addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
        return this.millisecond() * 1000000;
      });

      // ALIASES

      addUnitAlias('millisecond', 'ms');

      // PRIORITY

      addUnitPriority('millisecond', 16);

      // PARSING

      addRegexToken('S', match1to3, match1);
      addRegexToken('SS', match1to3, match2);
      addRegexToken('SSS', match1to3, match3);

      var token, getSetMillisecond;
      for (token = 'SSSS'; token.length <= 9; token += 'S') {
        addRegexToken(token, matchUnsigned);
      }

      function parseMs(input, array) {
        array[MILLISECOND] = toInt(('0.' + input) * 1000);
      }

      for (token = 'S'; token.length <= 9; token += 'S') {
        addParseToken(token, parseMs);
      }

      getSetMillisecond = makeGetSet('Milliseconds', false);

      // FORMATTING

      addFormatToken('z', 0, 0, 'zoneAbbr');
      addFormatToken('zz', 0, 0, 'zoneName');

      // MOMENTS

      function getZoneAbbr() {
        return this._isUTC ? 'UTC' : '';
      }

      function getZoneName() {
        return this._isUTC ? 'Coordinated Universal Time' : '';
      }

      var proto = Moment.prototype;

      proto.add = add;
      proto.calendar = calendar$1;
      proto.clone = clone;
      proto.diff = diff;
      proto.endOf = endOf;
      proto.format = format;
      proto.from = from;
      proto.fromNow = fromNow;
      proto.to = to;
      proto.toNow = toNow;
      proto.get = stringGet;
      proto.invalidAt = invalidAt;
      proto.isAfter = isAfter;
      proto.isBefore = isBefore;
      proto.isBetween = isBetween;
      proto.isSame = isSame;
      proto.isSameOrAfter = isSameOrAfter;
      proto.isSameOrBefore = isSameOrBefore;
      proto.isValid = isValid$2;
      proto.lang = lang;
      proto.locale = locale;
      proto.localeData = localeData;
      proto.max = prototypeMax;
      proto.min = prototypeMin;
      proto.parsingFlags = parsingFlags;
      proto.set = stringSet;
      proto.startOf = startOf;
      proto.subtract = subtract;
      proto.toArray = toArray;
      proto.toObject = toObject;
      proto.toDate = toDate;
      proto.toISOString = toISOString;
      proto.inspect = inspect;
      if (typeof Symbol !== 'undefined' && Symbol.for != null) {
        proto[Symbol.for('nodejs.util.inspect.custom')] = function () {
          return 'Moment<' + this.format() + '>';
        };
      }
      proto.toJSON = toJSON;
      proto.toString = toString;
      proto.unix = unix;
      proto.valueOf = valueOf;
      proto.creationData = creationData;
      proto.eraName = getEraName;
      proto.eraNarrow = getEraNarrow;
      proto.eraAbbr = getEraAbbr;
      proto.eraYear = getEraYear;
      proto.year = getSetYear;
      proto.isLeapYear = getIsLeapYear;
      proto.weekYear = getSetWeekYear;
      proto.isoWeekYear = getSetISOWeekYear;
      proto.quarter = proto.quarters = getSetQuarter;
      proto.month = getSetMonth;
      proto.daysInMonth = getDaysInMonth;
      proto.week = proto.weeks = getSetWeek;
      proto.isoWeek = proto.isoWeeks = getSetISOWeek;
      proto.weeksInYear = getWeeksInYear;
      proto.weeksInWeekYear = getWeeksInWeekYear;
      proto.isoWeeksInYear = getISOWeeksInYear;
      proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
      proto.date = getSetDayOfMonth;
      proto.day = proto.days = getSetDayOfWeek;
      proto.weekday = getSetLocaleDayOfWeek;
      proto.isoWeekday = getSetISODayOfWeek;
      proto.dayOfYear = getSetDayOfYear;
      proto.hour = proto.hours = getSetHour;
      proto.minute = proto.minutes = getSetMinute;
      proto.second = proto.seconds = getSetSecond;
      proto.millisecond = proto.milliseconds = getSetMillisecond;
      proto.utcOffset = getSetOffset;
      proto.utc = setOffsetToUTC;
      proto.local = setOffsetToLocal;
      proto.parseZone = setOffsetToParsedOffset;
      proto.hasAlignedHourOffset = hasAlignedHourOffset;
      proto.isDST = isDaylightSavingTime;
      proto.isLocal = isLocal;
      proto.isUtcOffset = isUtcOffset;
      proto.isUtc = isUtc;
      proto.isUTC = isUtc;
      proto.zoneAbbr = getZoneAbbr;
      proto.zoneName = getZoneName;
      proto.dates = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
      proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
      proto.years = deprecate('years accessor is deprecated. Use year instead', getSetYear);
      proto.zone = deprecate(
        'moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/',
        getSetZone,
      );
      proto.isDSTShifted = deprecate(
        'isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information',
        isDaylightSavingTimeShifted,
      );

      function createUnix(input) {
        return createLocal(input * 1000);
      }

      function createInZone() {
        return createLocal.apply(null, arguments).parseZone();
      }

      function preParsePostFormat(string) {
        return string;
      }

      var proto$1 = Locale.prototype;

      proto$1.calendar = calendar;
      proto$1.longDateFormat = longDateFormat;
      proto$1.invalidDate = invalidDate;
      proto$1.ordinal = ordinal;
      proto$1.preparse = preParsePostFormat;
      proto$1.postformat = preParsePostFormat;
      proto$1.relativeTime = relativeTime;
      proto$1.pastFuture = pastFuture;
      proto$1.set = set;
      proto$1.eras = localeEras;
      proto$1.erasParse = localeErasParse;
      proto$1.erasConvertYear = localeErasConvertYear;
      proto$1.erasAbbrRegex = erasAbbrRegex;
      proto$1.erasNameRegex = erasNameRegex;
      proto$1.erasNarrowRegex = erasNarrowRegex;

      proto$1.months = localeMonths;
      proto$1.monthsShort = localeMonthsShort;
      proto$1.monthsParse = localeMonthsParse;
      proto$1.monthsRegex = monthsRegex;
      proto$1.monthsShortRegex = monthsShortRegex;
      proto$1.week = localeWeek;
      proto$1.firstDayOfYear = localeFirstDayOfYear;
      proto$1.firstDayOfWeek = localeFirstDayOfWeek;

      proto$1.weekdays = localeWeekdays;
      proto$1.weekdaysMin = localeWeekdaysMin;
      proto$1.weekdaysShort = localeWeekdaysShort;
      proto$1.weekdaysParse = localeWeekdaysParse;

      proto$1.weekdaysRegex = weekdaysRegex;
      proto$1.weekdaysShortRegex = weekdaysShortRegex;
      proto$1.weekdaysMinRegex = weekdaysMinRegex;

      proto$1.isPM = localeIsPM;
      proto$1.meridiem = localeMeridiem;

      function get$1(format, index, field, setter) {
        var locale = getLocale(),
          utc = createUTC().set(setter, index);
        return locale[field](utc, format);
      }

      function listMonthsImpl(format, index, field) {
        if (isNumber(format)) {
          index = format;
          format = undefined;
        }

        format = format || '';

        if (index != null) {
          return get$1(format, index, field, 'month');
        }

        var i,
          out = [];
        for (i = 0; i < 12; i++) {
          out[i] = get$1(format, i, field, 'month');
        }
        return out;
      }

      // ()
      // (5)
      // (fmt, 5)
      // (fmt)
      // (true)
      // (true, 5)
      // (true, fmt, 5)
      // (true, fmt)
      function listWeekdaysImpl(localeSorted, format, index, field) {
        if (typeof localeSorted === 'boolean') {
          if (isNumber(format)) {
            index = format;
            format = undefined;
          }

          format = format || '';
        } else {
          format = localeSorted;
          index = format;
          localeSorted = false;

          if (isNumber(format)) {
            index = format;
            format = undefined;
          }

          format = format || '';
        }

        var locale = getLocale(),
          shift = localeSorted ? locale._week.dow : 0,
          i,
          out = [];

        if (index != null) {
          return get$1(format, (index + shift) % 7, field, 'day');
        }

        for (i = 0; i < 7; i++) {
          out[i] = get$1(format, (i + shift) % 7, field, 'day');
        }
        return out;
      }

      function listMonths(format, index) {
        return listMonthsImpl(format, index, 'months');
      }

      function listMonthsShort(format, index) {
        return listMonthsImpl(format, index, 'monthsShort');
      }

      function listWeekdays(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
      }

      function listWeekdaysShort(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
      }

      function listWeekdaysMin(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
      }

      getSetGlobalLocale('en', {
        eras: [
          {
            since: '0001-01-01',
            until: +Infinity,
            offset: 1,
            name: 'Anno Domini',
            narrow: 'AD',
            abbr: 'AD',
          },
          {
            since: '0000-12-31',
            until: -Infinity,
            offset: 1,
            name: 'Before Christ',
            narrow: 'BC',
            abbr: 'BC',
          },
        ],
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal: function (number) {
          var b = number % 10,
            output = toInt((number % 100) / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
          return number + output;
        },
      });

      // Side effect imports

      hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
      hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);

      var mathAbs = Math.abs;

      function abs() {
        var data = this._data;

        this._milliseconds = mathAbs(this._milliseconds);
        this._days = mathAbs(this._days);
        this._months = mathAbs(this._months);

        data.milliseconds = mathAbs(data.milliseconds);
        data.seconds = mathAbs(data.seconds);
        data.minutes = mathAbs(data.minutes);
        data.hours = mathAbs(data.hours);
        data.months = mathAbs(data.months);
        data.years = mathAbs(data.years);

        return this;
      }

      function addSubtract$1(duration, input, value, direction) {
        var other = createDuration(input, value);

        duration._milliseconds += direction * other._milliseconds;
        duration._days += direction * other._days;
        duration._months += direction * other._months;

        return duration._bubble();
      }

      // supports only 2.0-style add(1, 's') or add(duration)
      function add$1(input, value) {
        return addSubtract$1(this, input, value, 1);
      }

      // supports only 2.0-style subtract(1, 's') or subtract(duration)
      function subtract$1(input, value) {
        return addSubtract$1(this, input, value, -1);
      }

      function absCeil(number) {
        if (number < 0) {
          return Math.floor(number);
        } else {
          return Math.ceil(number);
        }
      }

      function bubble() {
        var milliseconds = this._milliseconds,
          days = this._days,
          months = this._months,
          data = this._data,
          seconds,
          minutes,
          hours,
          years,
          monthsFromDays;

        // if we have a mix of positive and negative values, bubble down first
        // check: https://github.com/moment/moment/issues/2166
        if (!((milliseconds >= 0 && days >= 0 && months >= 0) || (milliseconds <= 0 && days <= 0 && months <= 0))) {
          milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
          days = 0;
          months = 0;
        }

        // The following code bubbles up values, see the tests for
        // examples of what that means.
        data.milliseconds = milliseconds % 1000;

        seconds = absFloor(milliseconds / 1000);
        data.seconds = seconds % 60;

        minutes = absFloor(seconds / 60);
        data.minutes = minutes % 60;

        hours = absFloor(minutes / 60);
        data.hours = hours % 24;

        days += absFloor(hours / 24);

        // convert days to months
        monthsFromDays = absFloor(daysToMonths(days));
        months += monthsFromDays;
        days -= absCeil(monthsToDays(monthsFromDays));

        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;

        data.days = days;
        data.months = months;
        data.years = years;

        return this;
      }

      function daysToMonths(days) {
        // 400 years have 146097 days (taking into account leap year rules)
        // 400 years have 12 months === 4800
        return (days * 4800) / 146097;
      }

      function monthsToDays(months) {
        // the reverse of daysToMonths
        return (months * 146097) / 4800;
      }

      function as(units) {
        if (!this.isValid()) {
          return NaN;
        }
        var days,
          months,
          milliseconds = this._milliseconds;

        units = normalizeUnits(units);

        if (units === 'month' || units === 'quarter' || units === 'year') {
          days = this._days + milliseconds / 864e5;
          months = this._months + daysToMonths(days);
          switch (units) {
            case 'month':
              return months;
            case 'quarter':
              return months / 3;
            case 'year':
              return months / 12;
          }
        } else {
          // handle milliseconds separately because of floating point math errors (issue #1867)
          days = this._days + Math.round(monthsToDays(this._months));
          switch (units) {
            case 'week':
              return days / 7 + milliseconds / 6048e5;
            case 'day':
              return days + milliseconds / 864e5;
            case 'hour':
              return days * 24 + milliseconds / 36e5;
            case 'minute':
              return days * 1440 + milliseconds / 6e4;
            case 'second':
              return days * 86400 + milliseconds / 1000;
            // Math.floor prevents floating point math errors here
            case 'millisecond':
              return Math.floor(days * 864e5) + milliseconds;
            default:
              throw new Error('Unknown unit ' + units);
          }
        }
      }

      // TODO: Use this.as('ms')?
      function valueOf$1() {
        if (!this.isValid()) {
          return NaN;
        }
        return (
          this._milliseconds + this._days * 864e5 + (this._months % 12) * 2592e6 + toInt(this._months / 12) * 31536e6
        );
      }

      function makeAs(alias) {
        return function () {
          return this.as(alias);
        };
      }

      var asMilliseconds = makeAs('ms'),
        asSeconds = makeAs('s'),
        asMinutes = makeAs('m'),
        asHours = makeAs('h'),
        asDays = makeAs('d'),
        asWeeks = makeAs('w'),
        asMonths = makeAs('M'),
        asQuarters = makeAs('Q'),
        asYears = makeAs('y');

      function clone$1() {
        return createDuration(this);
      }

      function get$2(units) {
        units = normalizeUnits(units);
        return this.isValid() ? this[units + 's']() : NaN;
      }

      function makeGetter(name) {
        return function () {
          return this.isValid() ? this._data[name] : NaN;
        };
      }

      var milliseconds = makeGetter('milliseconds'),
        seconds = makeGetter('seconds'),
        minutes = makeGetter('minutes'),
        hours = makeGetter('hours'),
        days = makeGetter('days'),
        months = makeGetter('months'),
        years = makeGetter('years');

      function weeks() {
        return absFloor(this.days() / 7);
      }

      var round = Math.round,
        thresholds = {
          ss: 44, // a few seconds to seconds
          s: 45, // seconds to minute
          m: 45, // minutes to hour
          h: 22, // hours to day
          d: 26, // days to month/week
          w: null, // weeks to month
          M: 11, // months to year
        };

      // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
      function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
      }

      function relativeTime$1(posNegDuration, withoutSuffix, thresholds, locale) {
        var duration = createDuration(posNegDuration).abs(),
          seconds = round(duration.as('s')),
          minutes = round(duration.as('m')),
          hours = round(duration.as('h')),
          days = round(duration.as('d')),
          months = round(duration.as('M')),
          weeks = round(duration.as('w')),
          years = round(duration.as('y')),
          a =
            (seconds <= thresholds.ss && ['s', seconds]) ||
            (seconds < thresholds.s && ['ss', seconds]) ||
            (minutes <= 1 && ['m']) ||
            (minutes < thresholds.m && ['mm', minutes]) ||
            (hours <= 1 && ['h']) ||
            (hours < thresholds.h && ['hh', hours]) ||
            (days <= 1 && ['d']) ||
            (days < thresholds.d && ['dd', days]);

        if (thresholds.w != null) {
          a = a || (weeks <= 1 && ['w']) || (weeks < thresholds.w && ['ww', weeks]);
        }
        a = a ||
          (months <= 1 && ['M']) ||
          (months < thresholds.M && ['MM', months]) ||
          (years <= 1 && ['y']) || ['yy', years];

        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale;
        return substituteTimeAgo.apply(null, a);
      }

      // This function allows you to set the rounding function for relative time strings
      function getSetRelativeTimeRounding(roundingFunction) {
        if (roundingFunction === undefined) {
          return round;
        }
        if (typeof roundingFunction === 'function') {
          round = roundingFunction;
          return true;
        }
        return false;
      }

      // This function allows you to set a threshold for relative time strings
      function getSetRelativeTimeThreshold(threshold, limit) {
        if (thresholds[threshold] === undefined) {
          return false;
        }
        if (limit === undefined) {
          return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        if (threshold === 's') {
          thresholds.ss = limit - 1;
        }
        return true;
      }

      function humanize(argWithSuffix, argThresholds) {
        if (!this.isValid()) {
          return this.localeData().invalidDate();
        }

        var withSuffix = false,
          th = thresholds,
          locale,
          output;

        if (typeof argWithSuffix === 'object') {
          argThresholds = argWithSuffix;
          argWithSuffix = false;
        }
        if (typeof argWithSuffix === 'boolean') {
          withSuffix = argWithSuffix;
        }
        if (typeof argThresholds === 'object') {
          th = Object.assign({}, thresholds, argThresholds);
          if (argThresholds.s != null && argThresholds.ss == null) {
            th.ss = argThresholds.s - 1;
          }
        }

        locale = this.localeData();
        output = relativeTime$1(this, !withSuffix, th, locale);

        if (withSuffix) {
          output = locale.pastFuture(+this, output);
        }

        return locale.postformat(output);
      }

      var abs$1 = Math.abs;

      function sign(x) {
        return (x > 0) - (x < 0) || +x;
      }

      function toISOString$1() {
        // for ISO strings we do not use the normal bubbling rules:
        //  * milliseconds bubble up until they become hours
        //  * days do not bubble at all
        //  * months bubble up until they become years
        // This is because there is no context-free conversion between hours and days
        // (think of clock changes)
        // and also not between days and months (28-31 days per month)
        if (!this.isValid()) {
          return this.localeData().invalidDate();
        }

        var seconds = abs$1(this._milliseconds) / 1000,
          days = abs$1(this._days),
          months = abs$1(this._months),
          minutes,
          hours,
          years,
          s,
          total = this.asSeconds(),
          totalSign,
          ymSign,
          daysSign,
          hmsSign;

        if (!total) {
          // this is the same as C#'s (Noda) and python (isodate)...
          // but not other JS (goog.date)
          return 'P0D';
        }

        // 3600 seconds -> 60 minutes -> 1 hour
        minutes = absFloor(seconds / 60);
        hours = absFloor(minutes / 60);
        seconds %= 60;
        minutes %= 60;

        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;

        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
        s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';

        totalSign = total < 0 ? '-' : '';
        ymSign = sign(this._months) !== sign(total) ? '-' : '';
        daysSign = sign(this._days) !== sign(total) ? '-' : '';
        hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';

        return (
          totalSign +
          'P' +
          (years ? ymSign + years + 'Y' : '') +
          (months ? ymSign + months + 'M' : '') +
          (days ? daysSign + days + 'D' : '') +
          (hours || minutes || seconds ? 'T' : '') +
          (hours ? hmsSign + hours + 'H' : '') +
          (minutes ? hmsSign + minutes + 'M' : '') +
          (seconds ? hmsSign + s + 'S' : '')
        );
      }

      var proto$2 = Duration.prototype;

      proto$2.isValid = isValid$1;
      proto$2.abs = abs;
      proto$2.add = add$1;
      proto$2.subtract = subtract$1;
      proto$2.as = as;
      proto$2.asMilliseconds = asMilliseconds;
      proto$2.asSeconds = asSeconds;
      proto$2.asMinutes = asMinutes;
      proto$2.asHours = asHours;
      proto$2.asDays = asDays;
      proto$2.asWeeks = asWeeks;
      proto$2.asMonths = asMonths;
      proto$2.asQuarters = asQuarters;
      proto$2.asYears = asYears;
      proto$2.valueOf = valueOf$1;
      proto$2._bubble = bubble;
      proto$2.clone = clone$1;
      proto$2.get = get$2;
      proto$2.milliseconds = milliseconds;
      proto$2.seconds = seconds;
      proto$2.minutes = minutes;
      proto$2.hours = hours;
      proto$2.days = days;
      proto$2.weeks = weeks;
      proto$2.months = months;
      proto$2.years = years;
      proto$2.humanize = humanize;
      proto$2.toISOString = toISOString$1;
      proto$2.toString = toISOString$1;
      proto$2.toJSON = toISOString$1;
      proto$2.locale = locale;
      proto$2.localeData = localeData;

      proto$2.toIsoString = deprecate(
        'toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)',
        toISOString$1,
      );
      proto$2.lang = lang;

      // FORMATTING

      addFormatToken('X', 0, 0, 'unix');
      addFormatToken('x', 0, 0, 'valueOf');

      // PARSING

      addRegexToken('x', matchSigned);
      addRegexToken('X', matchTimestamp);
      addParseToken('X', function (input, array, config) {
        config._d = new Date(parseFloat(input) * 1000);
      });
      addParseToken('x', function (input, array, config) {
        config._d = new Date(toInt(input));
      });

      //! moment.js

      hooks.version = '2.29.1';

      setHookCallback(createLocal);

      hooks.fn = proto;
      hooks.min = min;
      hooks.max = max;
      hooks.now = now;
      hooks.utc = createUTC;
      hooks.unix = createUnix;
      hooks.months = listMonths;
      hooks.isDate = isDate;
      hooks.locale = getSetGlobalLocale;
      hooks.invalid = createInvalid;
      hooks.duration = createDuration;
      hooks.isMoment = isMoment;
      hooks.weekdays = listWeekdays;
      hooks.parseZone = createInZone;
      hooks.localeData = getLocale;
      hooks.isDuration = isDuration;
      hooks.monthsShort = listMonthsShort;
      hooks.weekdaysMin = listWeekdaysMin;
      hooks.defineLocale = defineLocale;
      hooks.updateLocale = updateLocale;
      hooks.locales = listLocales;
      hooks.weekdaysShort = listWeekdaysShort;
      hooks.normalizeUnits = normalizeUnits;
      hooks.relativeTimeRounding = getSetRelativeTimeRounding;
      hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
      hooks.calendarFormat = getCalendarFormat;
      hooks.prototype = proto;

      // currently HTML5 input type only supports 24-hour formats
      hooks.HTML5_FMT = {
        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm', // <input type="datetime-local" />
        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss', // <input type="datetime-local" step="1" />
        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS', // <input type="datetime-local" step="0.001" />
        DATE: 'YYYY-MM-DD', // <input type="date" />
        TIME: 'HH:mm', // <input type="time" />
        TIME_SECONDS: 'HH:mm:ss', // <input type="time" step="1" />
        TIME_MS: 'HH:mm:ss.SSS', // <input type="time" step="0.001" />
        WEEK: 'GGGG-[W]WW', // <input type="week" />
        MONTH: 'YYYY-MM', // <input type="month" />
      };

      return hooks;
    });
  })(moment);

  var _class$9, _temp$7;

  var noop$1 = func.noop,
    bindCtx$1 = func.bindCtx;

  var PRESET_COLOR_REG = /blue|green|orange|red|turquoise|yellow/;

  /**
   * Tag
   */
  var Tag$1 =
    ((_temp$7 = _class$9 =
      (function (_Component) {
        _default$2(Tag, _Component);

        function Tag(props) {
          _default$5(this, Tag);

          var _this = _default$3(this, _Component.call(this, props));

          _this.onKeyDown = function (e) {
            // 针对无障碍化要求 添加键盘SPACE事件
            var _this$props = _this.props,
              closable = _this$props.closable,
              closeArea = _this$props.closeArea,
              onClick = _this$props.onClick,
              disabled = _this$props.disabled;

            if (e.keyCode !== KEYCODE.SPACE || disabled) {
              return;
            }

            e.preventDefault();
            e.stopPropagation();

            if (closable) {
              _this.handleClose(closeArea);
            } else {
              typeof onClick === 'function' && onClick(e);
            }
          };

          _this.state = {
            visible: true,
          };

          bindCtx$1(_this, [
            'handleBodyClick',
            'handleTailClick',
            'handleAnimationInit',
            'handleAnimationEnd',
            'renderTailNode',
          ]);
          return _this;
        }

        Tag.prototype.componentWillUnmount = function componentWillUnmount() {
          this.__destroyed = true;
        };

        Tag.prototype.handleClose = function handleClose(from) {
          var _this2 = this;

          var _props = this.props,
            animation = _props.animation,
            onClose = _props.onClose;

          var hasAnimation = support.animation && animation;

          // 先执行回调
          var result = onClose(from, this.tagNode);

          // 如果回调函数返回 false，则阻止关闭行为
          if (result !== false && !this.__destroyed) {
            this.setState(
              {
                visible: false,
              },
              function () {
                // 如果没有动画，则直接执行 afterClose
                !hasAnimation && _this2.props.afterClose(_this2.tagNode);
              },
            );
          }
        };

        // 标签体点击

        Tag.prototype.handleBodyClick = function handleBodyClick(e) {
          var _props2 = this.props,
            closable = _props2.closable,
            closeArea = _props2.closeArea,
            onClick = _props2.onClick;

          var node = e.currentTarget;

          if (node && (node === e.target || node.contains(e.target))) {
            if (closable && closeArea === 'tag') {
              this.handleClose('tag');
            }

            if (typeof onClick === 'function') {
              return onClick(e);
            }
          }
        };

        Tag.prototype.handleTailClick = function handleTailClick(e) {
          e && e.preventDefault();
          e && e.stopPropagation();

          this.handleClose('tail');
        };

        Tag.prototype.handleAnimationInit = function handleAnimationInit(node) {
          this.props.afterAppear(node);
        };

        Tag.prototype.handleAnimationEnd = function handleAnimationEnd(node) {
          this.props.afterClose(node);
        };

        Tag.prototype.renderAnimatedTag = function renderAnimatedTag(children, animationName) {
          return React__default['default'].createElement(
            Animate$1,
            {
              animation: animationName,
              afterAppear: this.handleAnimationInit,
              afterLeave: this.handleAnimationEnd,
            },
            children,
          );
        };

        Tag.prototype.renderTailNode = function renderTailNode() {
          var _props3 = this.props,
            prefix = _props3.prefix,
            closable = _props3.closable,
            locale = _props3.locale;

          if (!closable) {
            return null;
          }

          return React__default['default'].createElement(
            'span',
            {
              className: prefix + 'tag-close-btn',
              onClick: this.handleTailClick,
              role: 'button',
              'aria-label': locale.delete,
            },
            React__default['default'].createElement(Icon$2, { type: 'close' }),
          );
        };

        Tag.prototype.isPresetColor = function isPresetColor() {
          var color = this.props.color;

          if (!color) {
            return false;
          }

          return PRESET_COLOR_REG.test(color);
        };

        Tag.prototype.getTagStyle = function getTagStyle() {
          var _props4 = this.props,
            _props4$color = _props4.color,
            color = _props4$color === undefined ? '' : _props4$color,
            style = _props4.style;

          var isPresetColor = this.isPresetColor();
          var customColorStyle = {
            backgroundColor: color,
            borderColor: color,
            color: '#fff',
          };

          return _default$6({}, color && !isPresetColor ? customColorStyle : null, style);
        };

        Tag.prototype.render = function render() {
          var _classNames,
            _this3 = this;

          var _props5 = this.props,
            prefix = _props5.prefix,
            type = _props5.type,
            size = _props5.size,
            color = _props5.color,
            _shape = _props5._shape,
            closable = _props5.closable,
            closeArea = _props5.closeArea,
            className = _props5.className,
            children = _props5.children,
            animation = _props5.animation,
            disabled = _props5.disabled,
            rtl = _props5.rtl;
          var visible = this.state.visible;

          var isPresetColor = this.isPresetColor();
          var others = obj.pickOthers(Tag.propTypes, this.props);
          // eslint-disable-next-line no-unused-vars

          others.style;
          var otherTagProps = _default$1(others, ['style']);

          var shape = closable ? 'closable' : _shape;
          var bodyClazz = cls(
            [prefix + 'tag', prefix + 'tag-' + shape, prefix + 'tag-' + size],
            ((_classNames = {}),
            (_classNames[prefix + 'tag-level-' + type] = !color),
            (_classNames[prefix + 'tag-closable'] = closable),
            (_classNames[prefix + 'tag-body-pointer'] = closable && closeArea === 'tag'),
            (_classNames[prefix + 'tag-' + color] = color && isPresetColor && type === 'primary'),
            (_classNames[prefix + 'tag-' + color + '-inverse'] = color && isPresetColor && type === 'normal'),
            _classNames),
            className,
          );

          // close btn
          var tailNode = this.renderTailNode();
          // tag node
          var tagNode = !visible
            ? null
            : React__default['default'].createElement(
                'div',
                _default$6(
                  {
                    className: bodyClazz,
                    onClick: this.handleBodyClick,
                    onKeyDown: this.onKeyDown,
                    tabIndex: disabled ? '' : '0',
                    role: 'button',
                    'aria-disabled': disabled,
                    disabled: disabled,
                    dir: rtl ? 'rtl' : undefined,
                    ref: function ref(n) {
                      return (_this3.tagNode = n);
                    },
                    style: this.getTagStyle(),
                  },
                  otherTagProps,
                ),
                React__default['default'].createElement('span', { className: prefix + 'tag-body' }, children),
                tailNode,
              );

          if (animation && support.animation) {
            return this.renderAnimatedTag(tagNode, prefix + 'tag-zoom');
          }

          // 未开启或不支持动画
          return tagNode;
        };

        return Tag;
      })(React.Component)),
    (_class$9.propTypes = {
      /**
       * 标签类名前缀,提供给二次开发者用
       * @default next-
       */
      prefix: PropTypes$2.string,
      /**
       * 标签的类型
       * @enumdesc 普通, 主要
       */
      type: PropTypes$2.oneOf(['normal', 'primary']),
      /**
       * 标签的尺寸（large 尺寸为兼容表单场景 large = medium）
       * @enumdesc 小, 中, 大
       */
      size: PropTypes$2.oneOf(['small', 'medium', 'large']),

      /**
       * 标签颜色, 目前支持：blue、 green、 orange、red、 turquoise、 yellow 和 hex 颜色值 （`color keywords`作为 Tag 组件的保留字，请勿直接使用 ）, `1.19.0` 以上版本生效
       */
      color: PropTypes$2.string,
      /**
       * 是否开启动效
       */
      animation: PropTypes$2.bool,
      closeArea: PropTypes$2.oneOf(['tag', 'tail']),
      closable: PropTypes$2.bool,
      onClose: PropTypes$2.func,
      afterClose: PropTypes$2.func,
      /**
       * 标签出现动画结束后执行的回调
       */
      afterAppear: PropTypes$2.func,
      className: PropTypes$2.any,
      children: PropTypes$2.node,
      /**
       * 点击回调
       */
      onClick: PropTypes$2.func,
      _shape: PropTypes$2.oneOf(['default', 'closable', 'checkable']),
      disabled: PropTypes$2.bool,
      rtl: PropTypes$2.bool,
      locale: PropTypes$2.object,
    }),
    (_class$9.defaultProps = {
      prefix: 'next-',
      type: 'normal',
      size: 'medium',
      closeArea: 'tail',
      animation: false,
      onClose: noop$1,
      afterClose: noop$1,
      afterAppear: noop$1,
      onClick: noop$1,
      _shape: 'default',
      disabled: false,
      rtl: false,
      locale: defaultLocale.Tag,
    }),
    _temp$7);
  Tag$1.displayName = 'Tag';

  var Tag$2 = ConfigProvider$1.config(Tag$1);

  var _class$8, _temp$6;

  var Group$2 =
    ((_temp$6 = _class$8 =
      (function (_Component) {
        _default$2(Group, _Component);

        function Group() {
          _default$5(this, Group);

          return _default$3(this, _Component.apply(this, arguments));
        }

        Group.prototype.render = function render() {
          var _props = this.props,
            className = _props.className,
            prefix = _props.prefix,
            children = _props.children,
            rtl = _props.rtl,
            others = _default$1(_props, ['className', 'prefix', 'children', 'rtl']);

          var clazz = cls((prefix || 'next-') + 'tag-group', className);

          return React__default['default'].createElement(
            'div',
            _default$6({ className: clazz, dir: rtl ? 'rtl' : undefined }, others),
            children,
          );
        };

        return Group;
      })(React.Component)),
    (_class$8.propTypes = {
      prefix: PropTypes$2.string,
      className: PropTypes$2.any,
      children: PropTypes$2.node,
      rtl: PropTypes$2.bool,
    }),
    (_class$8.defaultProps = {
      prefix: 'next-',
      rtl: false,
    }),
    _temp$6);
  Group$2.displayName = 'Group';

  var Group$3 = Group$2;

  var _class$7, _temp$5;

  var noop = func.noop,
    bindCtx = func.bindCtx;

  /**
   * Tag.Selectable
   */

  var Selectable =
    ((_temp$5 = _class$7 =
      (function (_Component) {
        _default$2(Selectable, _Component);

        function Selectable(props) {
          _default$5(this, Selectable);

          var _this = _default$3(this, _Component.call(this, props));

          _this.state = {
            checked: 'checked' in props ? props.checked : props.defaultChecked || false,
          };

          bindCtx(_this, ['handleClick']);
          return _this;
        }

        Selectable.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {
          if (props.checked !== undefined && props.checked !== state.checked) {
            return {
              checked: props.checked,
            };
          }

          return null;
        };

        Selectable.prototype.handleClick = function handleClick(e) {
          e && e.preventDefault();
          // IE9 不支持 pointer-events，还是可能会触发 click 事件
          if (this.props.disabled) {
            return false;
          }

          var checked = this.state.checked;

          this.setState({
            checked: !checked,
          });

          this.props.onChange(!checked, e);
        };

        Selectable.prototype.render = function render() {
          var attrFilterTarget = [
            'checked',
            'defaultChecked',
            'onChange',
            'className',
            // 防止这些额外的参数影响 tag 的类型
            '_shape',
            'closable',
          ];

          var others = obj.pickOthers(attrFilterTarget, this.props);
          var isChecked = 'checked' in this.props ? this.props.checked : this.state.checked;
          var clazz = cls(this.props.className, {
            checked: isChecked,
          });
          return React__default['default'].createElement(
            Tag$2,
            _default$6({}, others, {
              role: 'checkbox',
              _shape: 'checkable',
              'aria-checked': isChecked,
              className: clazz,
              onClick: this.handleClick,
            }),
          );
        };

        return Selectable;
      })(React.Component)),
    (_class$7.propTypes = {
      /**
       * 标签是否被选中，受控用法
       * tag checked or not, a controlled way
       */
      checked: PropTypes$2.bool,
      /**
       * 标签是否默认被选中，非受控用法
       * tag checked or not by default, a uncontrolled way
       */
      defaultChecked: PropTypes$2.bool,
      /**
       * 选中状态变化时触发的事件
       * @param {Boolean} checked 是否选中
       * @param {Event} e Dom 事件对象
       */
      onChange: PropTypes$2.func,
      /**
       * 标签是否被禁用
       */
      disabled: PropTypes$2.bool,
      className: PropTypes$2.any,
    }),
    (_class$7.defaultProps = {
      onChange: noop,
    }),
    _temp$5);
  Selectable.displayName = 'Selectable';

  var Selectable$1 = polyfill(Selectable);

  var _class$6, _temp$4;

  /**
   * Tag.Closeable
   */
  var Closeable =
    ((_temp$4 = _class$6 =
      (function (_Component) {
        _default$2(Closeable, _Component);

        function Closeable() {
          _default$5(this, Closeable);

          return _default$3(this, _Component.apply(this, arguments));
        }

        Closeable.prototype.render = function render() {
          var _props = this.props,
            disabled = _props.disabled,
            className = _props.className,
            closeArea = _props.closeArea,
            onClose = _props.onClose,
            afterClose = _props.afterClose,
            onClick = _props.onClick,
            type = _props.type,
            size = _props.size,
            children = _props.children,
            rtl = _props.rtl,
            others = _default$1(_props, [
              'disabled',
              'className',
              'closeArea',
              'onClose',
              'afterClose',
              'onClick',
              'type',
              'size',
              'children',
              'rtl',
            ]);

          return React__default['default'].createElement(
            Tag$2,
            _default$6({}, others, {
              rtl: rtl,
              disabled: disabled,
              className: className,
              closeArea: closeArea,
              onClose: onClose,
              afterClose: afterClose,
              onClick: onClick,
              type: type,
              size: size,
              closable: true,
            }),
            children,
          );
        };

        return Closeable;
      })(React.Component)),
    (_class$6.propTypes = {
      disabled: PropTypes$2.bool,
      className: PropTypes$2.any,
      /**
       * closeable 标签的 onClose 响应区域, tag: 标签体, tail(默认): 关闭按钮
       * @enumdesc 标签, 尾部icon
       */
      closeArea: PropTypes$2.oneOf(['tag', 'tail']),
      /**
       * 点击关闭按钮时的回调
       * @param {String} from 事件来源, tag: 标签体点击, tail: 关闭按钮点击
       * @returns {Boolean} true则关闭, false阻止关闭
       */
      onClose: PropTypes$2.func,
      /**
       * 标签关闭后执行的回调
       */
      afterClose: PropTypes$2.func,
      /**
       * 点击回调
       */
      onClick: PropTypes$2.func,
      type: PropTypes$2.oneOf(['normal', 'primary']),
      /**
       * 标签的尺寸（large 尺寸为兼容表单场景 large = medium）
       */
      size: PropTypes$2.oneOf(['small', 'medium', 'large']),
      children: PropTypes$2.any,
      rtl: PropTypes$2.bool,
    }),
    (_class$6.defaultProps = {
      disabled: false,
      type: 'normal',
    }),
    _temp$4);
  Closeable.displayName = 'Closeable';

  var Closable = Closeable;

  var ConfigTag = ConfigProvider$1.config(Tag$2, {
    transfrom: /* istanbul ignore next */ function transfrom(props, deprecated) {
      var shape = props.shape,
        type = props.type;

      if (shape === 'selectable') {
        deprecated('shape=selectable', 'Tag.Selectable', 'Tag');
      }

      if (shape === 'deletable') {
        deprecated('shape=deletable', 'Tag.Closeable', 'Tag');
      }

      if (shape === 'link') {
        deprecated('shape=link', '<Tag><a href="x">x</a></Tag>', 'Tag');
      }

      if (shape === 'readonly' || shape === 'interactive') {
        log.warning('Warning: [ shape=' + shape + ' ] is deprecated at [ Tag ]');
      }

      if (type === 'secondary') {
        log.warning('Warning: [ type=secondary ] is deprecated at [ Tag ]');
      }

      ['count', 'marked', 'value', 'onChange'].forEach(function (key) {
        if (key in props) {
          log.warning('Warning: [ ' + key + ' ] is deprecated at [ Tag ]');
        }
      });

      if ('selected' in props || 'defaultSelected' in props) {
        log.warning(
          'Warning: [ selected|defaultSelected  ] is deprecated at [ Tag ], use [ checked|defaultChecked ] at [ Tag.Selectable ] instead of it',
        );
      }

      if ('closed' in props) {
        log.warning(
          'Warning: [ closed  ] is deprecated at [ Tag ], use [ onClose ] at [ Tag.Closeable ] instead of it',
        );
      }

      if ('onSelect' in props) {
        deprecated('onSelect', '<Tag.Selectable onChange/>', 'Tag');
      }

      if ('afterClose' in props) {
        log.warning(
          'Warning: [ afterClose  ] is deprecated at [ Tag ], use [ afterClose ] at [ Tag.Closeable ] instead of it',
        );
      }

      return props;
    },
  });

  ConfigTag.Group = ConfigProvider$1.config(Group$3);

  ConfigTag.Selectable = ConfigProvider$1.config(Selectable$1);

  // 有的地方叫做 Closeable 有的地方用Closeable, 为了保持兼容 文档类出现 Closeable, Closeable可以继续用
  ConfigTag.Closable = ConfigProvider$1.config(Closable);
  ConfigTag.Closeable = ConfigTag.Closable;

  var Tag = ConfigTag;

  var _class$5, _temp2$1;

  var Base =
    ((_temp2$1 = _class$5 =
      (function (_React$Component) {
        _default$2(Base, _React$Component);

        function Base() {
          var _temp, _this, _ret;

          _default$5(this, Base);

          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          return (
            (_ret =
              ((_temp =
                ((_this = _default$3(this, _React$Component.call.apply(_React$Component, [this].concat(args)))),
                _this)),
              (_this.handleCompositionStart = function (e) {
                _this.setState({
                  composition: true,
                });
                _this.props.onCompositionStart(e);
              }),
              (_this.handleCompositionEnd = function (e) {
                _this.setState({
                  composition: false,
                });
                _this.props.onCompositionEnd(e);

                var value = e.target.value;
                _this.props.onChange(value, e);
              }),
              (_this.saveRef = function (input) {
                _this.inputRef = input;
              }),
              _temp)),
            _default$3(_this, _ret)
          );
        }

        Base.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {
          if ('value' in nextProps && nextProps.value !== prevState.value && !prevState.composition) {
            var value = nextProps.value;
            return {
              value: value === undefined || value === null ? '' : value,
            };
          }

          return null;
        };

        Base.prototype.ieHack = function ieHack(value) {
          return value;
        };

        Base.prototype.onChange = function onChange(e) {
          if ('stopPropagation' in e) {
            e.stopPropagation();
          } else if ('cancelBubble' in e) {
            e.cancelBubble();
          }

          var value = e.target.value;

          if (this.props.trim) {
            value = value.trim();
          }

          value = this.ieHack(value);

          // not controlled
          if (!('value' in this.props) || this.state.composition) {
            this.setState({
              value: value,
            });
          }

          if (this.state.composition) {
            return;
          }

          // Number('') = 0
          if (value && this.props.htmlType === 'number') {
            value = Number(value);
          }

          this.props.onChange(value, e);
        };

        Base.prototype.onKeyDown = function onKeyDown(e) {
          var value = e.target.value;
          var maxLength = this.props.maxLength;

          var len = maxLength > 0 && value ? this.getValueLength(value) : 0;
          var opts = {};

          // has enable trim and has input whitespace
          if (this.props.trim && e.keyCode === 32) {
            opts.beTrimed = true;
          }

          // has defined maxLength and has over max length and has not input backspace and delete
          if (
            maxLength > 0 &&
            (len > maxLength + 1 ||
              ((len === maxLength || len === maxLength + 1) && e.keyCode !== 8 && e.keyCode !== 46))
          ) {
            opts.overMaxLength = true;
          }

          this.props.onKeyDown(e, opts);
        };

        Base.prototype.onFocus = function onFocus(e) {
          this.setState({
            focus: true,
          });
          this.props.onFocus(e);
        };

        Base.prototype.onBlur = function onBlur(e) {
          this.setState({
            focus: false,
          });
          this.props.onBlur(e);
        };

        Base.prototype.renderLength = function renderLength() {
          var _classNames;

          var _props = this.props,
            maxLength = _props.maxLength,
            showLimitHint = _props.showLimitHint,
            prefix = _props.prefix,
            rtl = _props.rtl;

          var len = maxLength > 0 && this.state.value ? this.getValueLength(this.state.value) : 0;

          var classesLenWrap = cls(
            ((_classNames = {}),
            (_classNames[prefix + 'input-len'] = true),
            (_classNames[prefix + 'error'] = len > maxLength),
            _classNames),
          );

          var content = rtl ? maxLength + '/' + len : len + '/' + maxLength;

          return maxLength && showLimitHint
            ? React__default['default'].createElement('span', { className: classesLenWrap }, content)
            : null;
        };

        Base.prototype.renderControl = function renderControl() {
          var _this2 = this;

          var lenWrap = this.renderLength();

          return lenWrap
            ? React__default['default'].createElement(
                'span',
                {
                  onClick: function onClick() {
                    return _this2.focus();
                  },
                  className: this.props.prefix + 'input-control',
                },
                lenWrap,
              )
            : null;
        };

        Base.prototype.getClass = function getClass() {
          var _classNames2;

          var _props2 = this.props,
            disabled = _props2.disabled,
            state = _props2.state,
            prefix = _props2.prefix;

          return cls(
            ((_classNames2 = {}),
            (_classNames2[prefix + 'input'] = true),
            (_classNames2[prefix + 'disabled'] = !!disabled),
            (_classNames2[prefix + 'error'] = state === 'error'),
            (_classNames2[prefix + 'warning'] = state === 'warning'),
            (_classNames2[prefix + 'focus'] = this.state.focus),
            _classNames2),
          );
        };

        Base.prototype.getProps = function getProps() {
          var _props3 = this.props,
            placeholder = _props3.placeholder,
            inputStyle = _props3.inputStyle,
            disabled = _props3.disabled,
            readOnly = _props3.readOnly,
            cutString = _props3.cutString,
            maxLength = _props3.maxLength,
            name = _props3.name,
            onCompositionStart = _props3.onCompositionStart,
            onCompositionEnd = _props3.onCompositionEnd;

          var props = {
            style: inputStyle,
            placeholder: placeholder,
            disabled: disabled,
            readOnly: readOnly,
            name: name,
            maxLength: cutString ? maxLength : undefined,
            value: this.state.value,
            onChange: this.onChange.bind(this),
            onBlur: this.onBlur.bind(this),
            onFocus: this.onFocus.bind(this),
            onCompositionStart: onCompositionStart,
            onCompositionEnd: onCompositionEnd,
          };

          // fix accessibility：auto process status of aria disabled
          if (disabled) {
            props['aria-disabled'] = disabled;
          }

          return props;
        };

        Base.prototype.getInputNode = function getInputNode() {
          return this.inputRef;
        };

        Base.prototype.focus = function focus(start, end) {
          this.inputRef.focus();
          if (typeof start === 'number') {
            this.inputRef.selectionStart = start;
          }
          if (typeof end === 'number') {
            this.inputRef.selectionEnd = end;
          }
        };

        return Base;
      })(React__default['default'].Component)),
    (_class$5.propTypes = _default$6({}, ConfigProvider$1.propTypes, {
      /**
       * 当前值
       */
      value: PropTypes$2.oneOfType([PropTypes$2.string, PropTypes$2.number]),
      /**
       * 初始化值
       */
      defaultValue: PropTypes$2.oneOfType([PropTypes$2.string, PropTypes$2.number]),
      /**
       * 发生改变的时候触发的回调
       * @param {String} value 数据
       * @param {Event} e DOM事件对象
       */
      onChange: PropTypes$2.func,
      /**
       * 键盘按下的时候触发的回调
       * @param {Event} e DOM事件对象
       * @param {Object} opts 可扩展的附加信息：<br> - opts.overMaxLength: {Boolean} 已超出最大长度<br> - opts.beTrimed: {Boolean} 输入的空格被清理
       */
      onKeyDown: PropTypes$2.func,
      /**
       * 禁用状态
       */
      disabled: PropTypes$2.bool,
      /**
       * 最大长度
       */
      maxLength: PropTypes$2.number,
      /**
       * 是否展现最大长度样式（旧版本为 hasLimitHint，目前仍兼容旧用法，将在2.x直接废弃）
       */
      showLimitHint: PropTypes$2.bool,
      /**
       * 当设置了maxLength时，是否截断超出字符串
       */
      cutString: PropTypes$2.bool,
      /**
       * 只读
       */
      readOnly: PropTypes$2.bool,
      /**
       * onChange返回会自动去除头尾空字符
       */
      trim: PropTypes$2.bool,
      /**
       * 输入提示
       */
      placeholder: PropTypes$2.string,
      /**
       * 获取焦点时候触发的回调
       * @param {Event} e DOM事件对象
       */
      onFocus: PropTypes$2.func,
      /**
       * 失去焦点时候触发的回调
       * @param {Event} e DOM事件对象
       */
      onBlur: PropTypes$2.func,
      /**
       * 自定义字符串计算长度方式
       * @param {String} value 数据
       * @returns {Number} 自定义长度
       */
      getValueLength: PropTypes$2.func,
      inputStyle: PropTypes$2.object,
      /**
       * 自定义class
       */
      className: PropTypes$2.string,
      /**
       * 自定义内联样式
       */
      style: PropTypes$2.object,
      /**
       * 原生type
       */
      htmlType: PropTypes$2.string,
      /**
       * name
       */
      name: PropTypes$2.string,
      rtl: PropTypes$2.bool,
      state: PropTypes$2.oneOf(['error', 'loading', 'success', 'warning']),
      locale: PropTypes$2.object,
      /**
       * 是否为预览态
       */
      isPreview: PropTypes$2.bool,
      /**
       * 预览态模式下渲染的内容
       * @param {number} value 评分值
       */
      renderPreview: PropTypes$2.func,
      /**
       * 尺寸
       * @enumdesc 小, 中, 大
       */
      size: PropTypes$2.oneOf(['small', 'medium', 'large']),
      /**
       * 开启后会过滤输入法中间字母状态，文字输入完成后才会触发 onChange
       * @version 1.23
       */
      composition: PropTypes$2.bool,
      onCompositionStart: PropTypes$2.func,
      onCompositionEnd: PropTypes$2.func,
    })),
    (_class$5.defaultProps = {
      disabled: false,
      prefix: 'next-',
      size: 'medium',
      maxLength: null,
      showLimitHint: false,
      cutString: true,
      readOnly: false,
      isPreview: false,
      trim: false,
      composition: false,
      onFocus: func.noop,
      onBlur: func.noop,
      onChange: func.noop,
      onKeyDown: func.noop,
      getValueLength: func.noop,
      onCompositionStart: func.noop,
      onCompositionEnd: func.noop,
      locale: defaultLocale.Input,
    }),
    _temp2$1);
  Base.displayName = 'Base';

  var Base$1 = polyfill(Base);

  var _class$4, _temp$3;

  /**
   * Input.Group
   */
  var Group =
    ((_temp$3 = _class$4 =
      (function (_React$Component) {
        _default$2(Group, _React$Component);

        function Group() {
          _default$5(this, Group);

          return _default$3(this, _React$Component.apply(this, arguments));
        }

        Group.prototype.render = function render() {
          var _classNames, _classNames2, _classNames3;

          var _props = this.props,
            className = _props.className,
            style = _props.style,
            children = _props.children,
            prefix = _props.prefix,
            addonBefore = _props.addonBefore,
            addonAfter = _props.addonAfter,
            addonBeforeClassName = _props.addonBeforeClassName,
            addonAfterClassName = _props.addonAfterClassName,
            rtl = _props.rtl,
            disabled = _props.disabled,
            others = _default$1(_props, [
              'className',
              'style',
              'children',
              'prefix',
              'addonBefore',
              'addonAfter',
              'addonBeforeClassName',
              'addonAfterClassName',
              'rtl',
              'disabled',
            ]);

          var cls$1 = cls(
            ((_classNames = {}),
            (_classNames[prefix + 'input-group'] = true),
            (_classNames[prefix + 'disabled'] = disabled),
            (_classNames[className] = !!className),
            _classNames),
          );

          var addonCls = prefix + 'input-group-addon';
          var beforeCls = cls(
            addonCls,
            ((_classNames2 = {}),
            (_classNames2[prefix + 'before'] = true),
            (_classNames2[addonBeforeClassName] = addonBeforeClassName),
            _classNames2),
          );
          var afterCls = cls(
            addonCls,
            ((_classNames3 = {}),
            (_classNames3[prefix + 'after'] = true),
            (_classNames3[addonAfterClassName] = addonAfterClassName),
            _classNames3),
          );

          var before = addonBefore
            ? React__default['default'].createElement('span', { className: beforeCls }, addonBefore)
            : null;

          var after = addonAfter
            ? React__default['default'].createElement('span', { className: afterCls }, addonAfter)
            : null;

          return React__default['default'].createElement(
            'span',
            _default$6({}, others, {
              disabled: disabled,
              dir: rtl ? 'rtl' : undefined,
              className: cls$1,
              style: style,
            }),
            before,
            children,
            after,
          );
        };

        return Group;
      })(React__default['default'].Component)),
    (_class$4.propTypes = {
      /**
       * 样式前缀
       */
      prefix: PropTypes$2.string,
      className: PropTypes$2.string,
      style: PropTypes$2.object,
      children: PropTypes$2.node,
      /**
       * 输入框前附加内容
       */
      addonBefore: PropTypes$2.node,
      /**
       * 输入框前附加内容css
       */
      addonBeforeClassName: PropTypes$2.string,
      /**
       * 输入框后附加内容
       */
      addonAfter: PropTypes$2.node,
      /**
       * 输入框后额外css
       */
      addonAfterClassName: PropTypes$2.string,
      /**
       * rtl
       */
      rtl: PropTypes$2.bool,
    }),
    (_class$4.defaultProps = {
      prefix: 'next-',
    }),
    _temp$3);
  Group.displayName = 'Group';

  var Group$1 = ConfigProvider$1.config(Group);

  var _class$3, _temp$2;

  // preventDefault here can stop onBlur to keep focus state
  function preventDefault$1(e) {
    e.preventDefault();
  }

  /** Input */
  var Input$3 =
    ((_temp$2 = _class$3 =
      (function (_Base) {
        _default$2(Input, _Base);

        function Input(props) {
          _default$5(this, Input);

          var _this = _default$3(this, _Base.call(this, props));

          _this.handleKeyDown = function (e) {
            if (e.keyCode === 13) {
              _this.props.onPressEnter(e);
            }

            _this.onKeyDown(e);
          };

          _this.handleKeyDownFromClear = function (e) {
            if (e.keyCode === 13) {
              _this.onClear(e);
            }
          };

          var value = void 0;
          if ('value' in props) {
            value = props.value;
          } else {
            value = props.defaultValue;
          }

          _this.state = {
            value: typeof value === 'undefined' ? '' : value,
          };
          return _this;
        }

        // `Enter` was considered to be two chars in chrome , but one char in ie.
        // so we make all `Enter` to be two chars

        Input.prototype.getValueLength = function getValueLength(value) {
          var nv = '' + value;
          var strLen = this.props.getValueLength(nv);
          if (typeof strLen !== 'number') {
            strLen = nv.length;
          }

          return strLen;
        };

        Input.prototype.renderControl = function renderControl() {
          var _this2 = this;

          var _props = this.props,
            hasClear = _props.hasClear,
            readOnly = _props.readOnly,
            state = _props.state,
            prefix = _props.prefix,
            hint = _props.hint,
            extra = _props.extra,
            locale = _props.locale,
            disabled = _props.disabled,
            hoverShowClear = _props.hoverShowClear;

          var lenWrap = this.renderLength();

          var stateWrap = null;
          if (state === 'success') {
            stateWrap = React__default['default'].createElement(Icon$2, {
              type: 'success-filling',
              className: prefix + 'input-success-icon',
            });
          } else if (state === 'loading') {
            stateWrap = React__default['default'].createElement(Icon$2, {
              type: 'loading',
              className: prefix + 'input-loading-icon',
            });
          } else if (state === 'warning') {
            stateWrap = React__default['default'].createElement(Icon$2, {
              type: 'warning',
              className: prefix + 'input-warning-icon',
            });
          }

          var clearWrap = null;
          // showClear属性应该与disable属性为互斥状态
          var showClear = hasClear && !readOnly && !!('' + this.state.value) && !disabled;

          if (hint || showClear) {
            var hintIcon = null;
            if (hint) {
              if (typeof hint === 'string') {
                hintIcon = React__default['default'].createElement(Icon$2, {
                  type: hint,
                  className: prefix + 'input-hint',
                });
              } else if (React.isValidElement(hint)) {
                hintIcon = React.cloneElement(hint, {
                  className: cls(hint.props.className, prefix + 'input-hint'),
                });
              } else {
                hintIcon = hint;
              }
            } else {
              var _classNames;

              var cls$1 = cls(
                ((_classNames = {}),
                (_classNames[prefix + 'input-hint'] = true),
                (_classNames[prefix + 'input-clear-icon'] = true),
                (_classNames[prefix + 'input-hover-show'] = hoverShowClear),
                _classNames),
              );
              hintIcon = React__default['default'].createElement(Icon$2, {
                type: 'delete-filling',
                role: 'button',
                tabIndex: '0',
                className: cls$1,
                'aria-label': locale.clear,
                onClick: this.onClear.bind(this),
                onMouseDown: preventDefault$1,
                onKeyDown: this.handleKeyDownFromClear,
              });
            }

            clearWrap = React__default['default'].createElement(
              'span',
              { className: prefix + 'input-hint-wrap' },
              hasClear && hint
                ? React__default['default'].createElement(Icon$2, {
                    type: 'delete-filling',
                    role: 'button',
                    tabIndex: '0',
                    className: prefix + 'input-clear ' + prefix + 'input-clear-icon',
                    'aria-label': locale.clear,
                    onClick: this.onClear.bind(this),
                    onMouseDown: preventDefault$1,
                    onKeyDown: this.handleKeyDownFromClear,
                  })
                : null,
              hintIcon,
            );
          }

          if (state === 'loading') {
            clearWrap = null;
          }

          return clearWrap || lenWrap || stateWrap || extra
            ? React__default['default'].createElement(
                'span',
                {
                  onClick: function onClick() {
                    return _this2.focus();
                  },
                  className: prefix + 'input-control',
                },
                clearWrap,
                lenWrap,
                stateWrap,
                extra,
              )
            : null;
        };

        Input.prototype.renderLabel = function renderLabel() {
          var _props2 = this.props,
            label = _props2.label,
            prefix = _props2.prefix,
            id = _props2.id;

          return label
            ? React__default['default'].createElement(
                'label',
                { className: prefix + 'input-label', htmlFor: id },
                label,
              )
            : null;
        };

        Input.prototype.renderInner = function renderInner(inner, cls) {
          return inner ? React__default['default'].createElement('span', { className: cls }, inner) : null;
        };

        Input.prototype.onClear = function onClear(e) {
          if (this.props.disabled) {
            return;
          }

          // 非受控模式清空内部数据
          if (!('value' in this.props)) {
            this.setState({
              value: '',
            });
          }
          this.props.onChange('', e, 'clear');
          this.focus();
        };

        Input.prototype.render = function render() {
          var _classNames2, _classNames3, _classNames4, _classNames5, _classNames6, _classNames7, _classNames8;

          var _props3 = this.props,
            size = _props3.size,
            htmlType = _props3.htmlType,
            htmlSize = _props3.htmlSize,
            autoComplete = _props3.autoComplete,
            autoFocus = _props3.autoFocus,
            disabled = _props3.disabled,
            style = _props3.style,
            innerBefore = _props3.innerBefore,
            innerAfter = _props3.innerAfter,
            innerBeforeClassName = _props3.innerBeforeClassName,
            innerAfterClassName = _props3.innerAfterClassName,
            className = _props3.className,
            hasBorder = _props3.hasBorder,
            prefix = _props3.prefix,
            isPreview = _props3.isPreview,
            renderPreview = _props3.renderPreview,
            addonBefore = _props3.addonBefore,
            addonAfter = _props3.addonAfter,
            addonTextBefore = _props3.addonTextBefore,
            addonTextAfter = _props3.addonTextAfter,
            inputRender = _props3.inputRender,
            rtl = _props3.rtl,
            composition = _props3.composition;

          var hasAddon = addonBefore || addonAfter || addonTextBefore || addonTextAfter;
          var cls$1 = cls(
            this.getClass(),
            ((_classNames2 = {}),
            (_classNames2['' + prefix + size] = true),
            (_classNames2[prefix + 'hidden'] = this.props.htmlType === 'hidden'),
            (_classNames2[prefix + 'noborder'] = !hasBorder || this.props.htmlType === 'file'),
            (_classNames2[prefix + 'input-group-auto-width'] = hasAddon),
            (_classNames2[prefix + 'disabled'] = disabled),
            (_classNames2[className] = !!className && !hasAddon),
            _classNames2),
          );

          var innerCls = prefix + 'input-inner';
          var innerBeforeCls = cls(
            ((_classNames3 = {}),
            (_classNames3[innerCls] = true),
            (_classNames3[prefix + 'before'] = true),
            (_classNames3[innerBeforeClassName] = innerBeforeClassName),
            _classNames3),
          );
          var innerAfterCls = cls(
            ((_classNames4 = {}),
            (_classNames4[innerCls] = true),
            (_classNames4[prefix + 'after'] = true),
            (_classNames4[prefix + 'input-inner-text'] = typeof innerAfter === 'string'),
            (_classNames4[innerAfterClassName] = innerAfterClassName),
            _classNames4),
          );
          var previewCls = cls(
            ((_classNames5 = {}),
            (_classNames5[prefix + 'form-preview'] = true),
            (_classNames5[className] = !!className),
            _classNames5),
          );

          var props = this.getProps();
          // custom data attributes are assigned to the top parent node
          // data-类自定义数据属性分配到顶层node节点
          var dataProps = obj.pickAttrsWith(this.props, 'data-');
          // Custom props are transparently transmitted to the core input node by default
          // 自定义属性默认透传到核心node节点：input
          var others = obj.pickOthers(_default$6({}, dataProps, Input.propTypes), this.props);

          if (isPreview) {
            var value = props.value;
            var label = this.props.label;

            if (typeof renderPreview === 'function') {
              return React__default['default'].createElement(
                'div',
                _default$6({}, others, { className: previewCls }),
                renderPreview(value, this.props),
              );
            }
            return React__default['default'].createElement(
              'div',
              _default$6({}, others, { className: previewCls }),
              addonBefore || addonTextBefore,
              label,
              innerBefore,
              value,
              innerAfter,
              addonAfter || addonTextAfter,
            );
          }

          var compositionProps = {};
          if (composition) {
            compositionProps.onCompositionStart = this.handleCompositionStart;
            compositionProps.onCompositionEnd = this.handleCompositionEnd;
          }

          var inputEl = React__default['default'].createElement(
            'input',
            _default$6({}, others, props, compositionProps, {
              height: '100%',
              type: htmlType,
              size: htmlSize,
              autoFocus: autoFocus,
              autoComplete: autoComplete,
              onKeyDown: this.handleKeyDown,
              ref: this.saveRef,
            }),
          );

          var inputWrap = React__default['default'].createElement(
            'span',
            _default$6({}, dataProps, {
              dir: rtl ? 'rtl' : undefined,
              className: cls$1,
              style: hasAddon ? undefined : style,
            }),
            this.renderLabel(),
            this.renderInner(innerBefore, innerBeforeCls),
            inputRender(inputEl),
            this.renderInner(innerAfter, innerAfterCls),
            this.renderControl(),
          );

          var groupCls = cls(
            ((_classNames6 = {}),
            (_classNames6[prefix + 'input-group-text'] = true),
            (_classNames6['' + prefix + size] = !!size),
            (_classNames6[prefix + 'disabled'] = disabled),
            _classNames6),
          );

          var addonBeforeCls = cls(((_classNames7 = {}), (_classNames7[groupCls] = addonTextBefore), _classNames7));
          var addonAfterCls = cls(((_classNames8 = {}), (_classNames8[groupCls] = addonTextAfter), _classNames8));

          if (hasAddon) {
            return React__default['default'].createElement(
              Group$1,
              _default$6({}, dataProps, {
                prefix: prefix,
                className: className,
                style: style,
                disabled: disabled,
                addonBefore: addonBefore || addonTextBefore,
                addonBeforeClassName: addonBeforeCls,
                addonAfter: addonAfter || addonTextAfter,
                addonAfterClassName: addonAfterCls,
              }),
              inputWrap,
            );
          }

          return inputWrap;
        };

        return Input;
      })(Base$1)),
    (_class$3.getDerivedStateFromProps = Base$1.getDerivedStateFromProps),
    (_class$3.propTypes = _default$6({}, Base$1.propTypes, {
      /**
       * label
       */
      label: PropTypes$2.node,
      /**
       * 是否出现clear按钮
       */
      hasClear: PropTypes$2.bool,
      /**
       * 是否有边框
       */
      hasBorder: PropTypes$2.bool,
      /**
       * 状态
       * @enumdesc 错误, 校验中, 成功, 警告
       */
      state: PropTypes$2.oneOf(['error', 'loading', 'success', 'warning']),
      /**
       * 按下回车的回调
       */
      onPressEnter: PropTypes$2.func,

      onClear: PropTypes$2.func,
      /**
       * 原生type
       */
      htmlType: PropTypes$2.string,
      htmlSize: PropTypes$2.string,
      /**
       * 水印 (Icon的type类型，和hasClear占用一个地方)
       */
      hint: PropTypes$2.oneOfType([PropTypes$2.string, PropTypes$2.node]),
      /**
       * 文字前附加内容
       */
      innerBefore: PropTypes$2.node,
      /**
       * 文字后附加内容
       */
      innerAfter: PropTypes$2.node,
      /**
       * 输入框前附加内容
       */
      addonBefore: PropTypes$2.node,
      /**
       * 输入框后附加内容
       */
      addonAfter: PropTypes$2.node,
      /**
       * 输入框前附加文字
       */
      addonTextBefore: PropTypes$2.node,
      /**
       * 输入框后附加文字
       */
      addonTextAfter: PropTypes$2.node,
      /**
       * (原生input支持)
       */
      autoComplete: PropTypes$2.string,
      /**
       * 自动聚焦(原生input支持)
       */
      autoFocus: PropTypes$2.bool,
      inputRender: PropTypes$2.func,
      extra: PropTypes$2.node,
      innerBeforeClassName: PropTypes$2.string,
      innerAfterClassName: PropTypes$2.string,
      /**
       * 是否为预览态
       */
      isPreview: PropTypes$2.bool,
      /**
       * 预览态模式下渲染的内容
       * @param {number} value 评分值
       */
      renderPreview: PropTypes$2.func,
      /**
       * hover展示clear (配合 hasClear=true使用)
       * @version 1.24
       */
      hoverShowClear: PropTypes$2.bool,
    })),
    (_class$3.defaultProps = _default$6({}, Base$1.defaultProps, {
      autoComplete: 'off',
      hasBorder: true,
      isPreview: false,
      hoverShowClear: false,
      onPressEnter: func.noop,
      inputRender: function inputRender(el) {
        return el;
      },
    })),
    _temp$2);

  var _class$2, _temp2;

  function preventDefault(e) {
    e.preventDefault();
  }
  var Password =
    ((_temp2 = _class$2 =
      (function (_Input) {
        _default$2(Password, _Input);

        function Password() {
          var _temp, _this, _ret;

          _default$5(this, Password);

          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          return (
            (_ret =
              ((_temp = ((_this = _default$3(this, _Input.call.apply(_Input, [this].concat(args)))), _this)),
              (_this.state = {
                hint: 'eye-close',
                htmlType: 'password',
              }),
              (_this.toggleEye = function (e) {
                e.preventDefault();

                var eyeClose = _this.state.hint === 'eye';

                _this.setState({
                  hint: eyeClose ? 'eye-close' : 'eye',
                  htmlType: eyeClose || !_this.props.showToggle ? 'password' : 'text',
                });
              }),
              _temp)),
            _default$3(_this, _ret)
          );
        }

        Password.prototype.render = function render() {
          var _props = this.props,
            showToggle = _props.showToggle,
            others = _default$1(_props, ['showToggle']);

          var _state = this.state,
            hint = _state.hint,
            htmlType = _state.htmlType;

          var extra = showToggle
            ? React__default['default'].createElement(Icon$2, {
                type: hint,
                onClick: this.toggleEye,
                onMouseDown: preventDefault,
              })
            : null;

          return React__default['default'].createElement(
            Input$3,
            _default$6({}, others, { extra: extra, htmlType: htmlType }),
          );
        };

        return Password;
      })(Input$3)),
    (_class$2.getDerivedStateFromProps = Input$3.getDerivedStateFromProps),
    (_class$2.propTypes = _default$6({}, Input$3.propTypes, {
      /**
       * 是否展示切换按钮
       */
      showToggle: PropTypes$2.bool,
    })),
    (_class$2.defaultProps = _default$6({}, Input$3.defaultProps, {
      showToggle: true,
    })),
    _temp2);

  var _class$1, _temp$1, _initialiseProps;

  function onNextFrame(cb) {
    if (window.requestAnimationFrame) {
      return window.requestAnimationFrame(cb);
    }
    return window.setTimeout(cb, 1);
  }

  function clearNextFrameAction(nextFrameId) {
    if (window.cancelAnimationFrame) {
      window.cancelAnimationFrame(nextFrameId);
    } else {
      window.clearTimeout(nextFrameId);
    }
  }

  // safari in mac
  var isMacSafari =
    typeof navigator !== 'undefined' && navigator && navigator.userAgent
      ? navigator.userAgent.match(/^((?!chrome|android|windows).)*safari/i)
      : false;

  var hiddenStyle = {
    visibility: 'hidden',
    position: 'absolute',
    zIndex: '-1000',
    top: '-1000px',
    overflowY: 'hidden',
    left: 0,
    right: 0,
  };

  /**
   * Input.TextArea
   * @order 2
   */
  var TextArea =
    ((_temp$1 = _class$1 =
      (function (_Base) {
        _default$2(TextArea, _Base);

        function TextArea(props) {
          _default$5(this, TextArea);

          var _this = _default$3(this, _Base.call(this, props));

          _initialiseProps.call(_this);

          var value = void 0;
          if ('value' in props) {
            value = props.value;
          } else {
            value = props.defaultValue;
          }

          _this.state = {
            value: typeof value === 'undefined' ? '' : value,
          };
          return _this;
        }

        TextArea.prototype.componentDidMount = function componentDidMount() {
          var autoHeight = this.props.autoHeight;
          if (autoHeight) {
            if ((typeof autoHeight === 'undefined' ? 'undefined' : _default$4(autoHeight)) === 'object') {
              /* eslint-disable react/no-did-mount-set-state */
              this.setState(this._getMinMaxHeight(autoHeight, this.state.value));
            } else {
              this.setState({
                height: this._getHeight(this.state.value),
                overflowY: 'hidden',
              });
            }
          }
        };

        TextArea.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
          if (this.props.autoHeight && this.props.value !== prevProps.value) {
            this._resizeTextArea(this.props.value);
          }
        };

        TextArea.prototype._getMinMaxHeight = function _getMinMaxHeight(_ref, value) {
          var minRows = _ref.minRows,
            maxRows = _ref.maxRows;

          var node = ReactDOM__default['default'].findDOMNode(this.helpRef);
          if (!node) {
            return {};
          }
          node.setAttribute('rows', minRows);
          var minHeight = node.clientHeight;

          node.setAttribute('rows', maxRows);
          var maxHeight = node.clientHeight;

          node.setAttribute('rows', '1');
          var height = this._getHeight(value);

          return {
            minHeight: minHeight,
            maxHeight: maxHeight,
            height: height,
            overflowY: height <= maxHeight ? 'hidden' : undefined,
          };
        };

        TextArea.prototype._getHeight = function _getHeight(value) {
          var node = ReactDOM__default['default'].findDOMNode(this.helpRef);
          if (!node) {
            return 0;
          }
          node.value = value;

          return node.scrollHeight;
        };

        TextArea.prototype.ieHack = function ieHack(value) {
          // Fix: textarea dit not support maxLength in ie9
          /* istanbul ignore if */
          if (env.ieVersion === 9 && this.props.maxLength) {
            var maxLength = parseInt(this.props.maxLength);
            var len = this.getValueLength(value, true);
            if (len > maxLength && this.props.cutString) {
              value = value.replace(/\n/g, '\n\n');
              value = value.substr(0, maxLength);
              value = value.replace(/\n\n/g, '\n');
            }
          }

          this.props.autoHeight && this._resizeTextArea(value);

          return value;
        };

        /**
         * value.length !== maxLength  in ie/safari(mac) while value has `Enter`
         * about maxLength compute: `Enter` was considered to be one char(\n) in chrome , but two chars(\r\n) in ie/safari(mac).
         * so while value has `Enter`, we should let display length + 1
         */

        TextArea.prototype.getValueLength = function getValueLength(value) {
          var _props = this.props,
            maxLength = _props.maxLength,
            cutString = _props.cutString;

          var nv = '' + value;
          var strLen = this.props.getValueLength(nv);
          if (typeof strLen !== 'number') {
            strLen = nv.length;
          }

          /* istanbul ignore if */
          if (env.ieVersion || isMacSafari) {
            strLen = strLen + nv.split('\n').length - 1;
            if (strLen > maxLength && cutString) {
              strLen = maxLength;
            }
          }

          return strLen;
        };

        TextArea.prototype.saveTextAreaRef = function saveTextAreaRef(textArea) {
          this.inputRef = textArea;
        };

        TextArea.prototype.saveHelpRef = function saveHelpRef(ref) {
          this.helpRef = ref;
        };

        TextArea.prototype.render = function render() {
          var _classNames, _classNames2;

          var _props2 = this.props,
            rows = _props2.rows,
            style = _props2.style,
            className = _props2.className,
            autoHeight = _props2.autoHeight,
            isPreview = _props2.isPreview,
            renderPreview = _props2.renderPreview,
            prefix = _props2.prefix,
            rtl = _props2.rtl,
            hasBorder = _props2.hasBorder,
            size = _props2.size,
            composition = _props2.composition;

          var cls$1 = cls(
            this.getClass(),
            ((_classNames = {}),
            (_classNames['' + prefix + size] = size === 'large' || 'size' === 'small'),
            (_classNames[prefix + 'input-textarea'] = true),
            (_classNames[prefix + 'noborder'] = !hasBorder),
            (_classNames[className] = !!className),
            _classNames),
          );

          var props = this.getProps();
          // custom data attributes are assigned to the top parent node
          // data-类自定义数据属性分配到顶层node节点
          var dataProps = obj.pickAttrsWith(this.props, 'data-');
          // Custom props are transparently transmitted to the core input node by default
          // 自定义属性默认透传到核心node节点：input
          var others = obj.pickOthers(_default$6({}, dataProps, TextArea.propTypes), this.props);

          var textareStyle = _default$6({}, props.style, {
            height: this.state.height,
            minHeight: this.state.minHeight,
            maxHeight: this.state.maxHeight,
            overflowY: this.state.overflowY,
          });

          var previewCls = cls(
            ((_classNames2 = {}),
            (_classNames2[prefix + 'input-textarea'] = true),
            (_classNames2[prefix + 'form-preview'] = true),
            (_classNames2[className] = !!className),
            _classNames2),
          );

          var wrapStyle = autoHeight ? _default$6({}, style, { position: 'relative' }) : style;

          if (isPreview) {
            var value = props.value;

            if ('renderPreview' in this.props) {
              return React__default['default'].createElement(
                'div',
                _default$6({}, others, { className: previewCls }),
                renderPreview(value, this.props),
              );
            }
            return React__default['default'].createElement(
              'div',
              _default$6({}, others, { className: previewCls }),
              value.split('\n').map(function (data, i) {
                return React__default['default'].createElement('p', { key: 'p-' + i }, data);
              }),
            );
          }

          var compositionProps = {};
          if (composition) {
            compositionProps.onCompositionStart = this.handleCompositionStart;
            compositionProps.onCompositionEnd = this.handleCompositionEnd;
          }

          return React__default['default'].createElement(
            'span',
            _default$6({ className: cls$1, style: wrapStyle, dir: rtl ? 'rtl' : undefined }, dataProps),
            React__default['default'].createElement(
              'textarea',
              _default$6({}, others, props, compositionProps, {
                'data-real': true,
                rows: rows,
                style: textareStyle,
                ref: this.saveRef.bind(this),
                onKeyDown: this.onKeyDown.bind(this),
              }),
            ),
            autoHeight
              ? React__default['default'].createElement('textarea', {
                  'data-fake': true,
                  ref: this.saveHelpRef.bind(this),
                  style: _default$6({}, props.style, hiddenStyle),
                  rows: '1',
                })
              : null,
            this.renderControl(),
          );
        };

        return TextArea;
      })(Base$1)),
    (_class$1.getDerivedStateFromProps = Base$1.getDerivedStateFromProps),
    (_class$1.propTypes = _default$6({}, Base$1.propTypes, {
      /**
       * 是否有边框
       */
      hasBorder: PropTypes$2.bool,
      /**
       * 状态
       * @enumdesc 错误
       */
      state: PropTypes$2.oneOf(['error', 'warning']),
      /**
       * 自动高度 true / {minRows: 2, maxRows: 4}
       */
      autoHeight: PropTypes$2.oneOfType([PropTypes$2.bool, PropTypes$2.object]),
      /**
       * 多行文本框高度 <br />(不要直接用height设置多行文本框的高度, ie9 10会有兼容性问题)
       */
      rows: PropTypes$2.number,
      /**
       * 是否为预览态
       */
      isPreview: PropTypes$2.bool,
      /**
       * 预览态模式下渲染的内容
       * @param {number} value 评分值
       */
      renderPreview: PropTypes$2.func,
    })),
    (_class$1.defaultProps = _default$6({}, Base$1.defaultProps, {
      hasBorder: true,
      isPreview: false,
      rows: 4,
      autoHeight: false,
    })),
    (_initialiseProps = function _initialiseProps() {
      var _this2 = this;

      this._resizeTextArea = function (value) {
        if (_this2.nextFrameActionId) {
          clearNextFrameAction(_this2.nextFrameActionId);
        }
        _this2.nextFrameActionId = onNextFrame(function () {
          var height = _this2._getHeight(value);
          var maxHeight = _this2.state.maxHeight ? _this2.state.maxHeight : Infinity;

          _this2.setState({
            height: _this2._getHeight(value),
            overflowY: height <= maxHeight ? 'hidden' : undefined,
          });
        });
      };
    }),
    _temp$1);

  Input$3.Password = ConfigProvider$1.config(Password, {
    exportNames: ['getInputNode', 'focus'],
    transform: /* istanbul ignore next */ function transform(props, deprecated) {
      if ('hasLimitHint' in props) {
        deprecated('hasLimitHint', 'showLimitHint', 'Input');

        var _props = props,
          hasLimitHint = _props.hasLimitHint,
          others = _default$1(_props, ['hasLimitHint']);

        props = _default$6({ showLimitHint: hasLimitHint }, others);
      }

      return props;
    },
  });

  Input$3.TextArea = ConfigProvider$1.config(TextArea, {
    exportNames: ['getInputNode', 'focus'],
    transform: /* istanbul ignore next */ function transform(props, deprecated) {
      if ('hasLimitHint' in props) {
        deprecated('hasLimitHint', 'showLimitHint', 'Input');

        var _props2 = props,
          hasLimitHint = _props2.hasLimitHint,
          others = _default$1(_props2, ['hasLimitHint']);

        props = _default$6({ showLimitHint: hasLimitHint }, others);
      }

      return props;
    },
  });
  Input$3.Group = Group$1;

  // 用来自动生成文档的工具底层依赖的 react-docgen，无法解析生成 HOC 的方法中存在第二个参数的情况
  // 所以不能在 input.jsx／textarea.jsx 中生成 HOC
  var Input$2 = ConfigProvider$1.config(Input$3, {
    exportNames: ['getInputNode', 'focus'],
    transform: /* istanbul ignore next */ function transform(props, deprecated) {
      if ('hasLimitHint' in props) {
        deprecated('hasLimitHint', 'showLimitHint', 'Input');

        var _props3 = props,
          hasLimitHint = _props3.hasLimitHint,
          others = _default$1(_props3, ['hasLimitHint']);

        props = _default$6({ showLimitHint: hasLimitHint }, others);
      }

      return props;
    },
  });

  var isPlainObject$1 = obj.isPlainObject;

  /**
   * 过滤 undefined 类型的值
   * @param  {*}  obj
   * @return {Object}
   */

  function filterUndefinedValue(object) {
    if (!isPlainObject$1(object)) {
      return object;
    }

    var obj = {};

    Object.keys(object).forEach(function (key) {
      var value = object[key];

      if (value !== undefined) {
        obj[key] = value;
      }
    });

    return obj;
  }

  /**
   * 从 obj 中去除 subObj
   * @param  {*}  obj
   * @param  {*}  subObj
   * @return {Object}
   */
  function stripObject(obj, subObj) {
    var newObject = {};

    Object.keys(obj).forEach(function (key) {
      if (!(key in subObj)) {
        newObject[key] = obj[key];
      }
    });
    return newObject;
  }

  var ieVersion = env.ieVersion;

  var getPadding = function getPadding(padding) {
    if (!Array.isArray(padding)) {
      return {
        padding: padding,
      };
    }

    var attrs = ['paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft'];
    var paddings = {};
    var value = void 0;

    attrs.forEach(function (attr, index) {
      switch (padding.length) {
        case 1:
          value = padding[0] || 0;
          break;
        case 2:
          value = padding[index] || padding[index - 2] || 0;
          break;
        case 3:
          value = index === 2 ? padding[2] : padding[index] || padding[index - 2] || 0;
          break;
        case 4:
        default:
          value = padding[index] || 0;
          break;
      }
      paddings[attr] = value;
    });

    return paddings;
  };

  var getMargin = function getMargin(size) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { isNegative: false, half: false },
      isNegative = _ref.isNegative,
      half = _ref.half;

    if (!size) {
      return {};
    }
    var attrs = ['marginTop', 'marginRight', 'marginBottom', 'marginLeft'];
    var margins = {};
    var param = 1 * (isNegative ? -1 : 1) * (half ? 0.5 : 1);
    var value = void 0;

    attrs.forEach(function (attr, index) {
      if (!Array.isArray(size)) {
        value = param * size;
      } else {
        switch (size.length) {
          case 1:
            value = param * (size[0] || 0);
            break;
          case 2:
            value = param * (size[index] || size[index - 2] || 0);
            break;
          case 3:
            value = param * (index === 2 ? size[2] : size[index] || size[index - 2] || 0);
            break;
          case 4:
          default:
            value = param * (size[index] || 0);
            break;
        }
      }

      margins[attr] = value;
    });

    return margins;
  };

  var getChildMargin = function getChildMargin(spacing) {
    return getMargin(spacing, { half: true });
  };

  var getSpacingHelperMargin = function getSpacingHelperMargin(spacing) {
    return getMargin(spacing, { isNegative: true, half: true });
  };

  var getFlexs = function getFlexs(flex) {
    if (!Array.isArray(flex)) {
      return {
        flex: flex,
      };
    }

    var attrs = ['flexGrow', 'flexShrink', 'flexBasis'];
    var flexs = {};

    flex.forEach(function (val, index) {
      flexs[attrs[index]] = val;
    });

    return flexs;
  };

  var getGridGap = function getGridGap(gap) {
    if (!Array.isArray(gap)) {
      return {
        gap: gap,
      };
    }

    var attrs = ['rowGap', 'columnGap'];
    var gaps = {};

    gap.forEach(function (val, index) {
      gaps[attrs[index]] = val;
    });

    return gaps;
  };

  var getTemplateCount = function getTemplateCount(counts) {
    if (!isNaN(counts) || typeof counts === 'string') {
      return 'repeat(' + counts + ', minmax(0,1fr))';
    }

    return counts;
  };

  // const outerProps = ['alignSelf', 'flexGrow', 'flexShrink', 'flexBasis', 'backgroundColor', 'boxShadow', 'borderRadius', 'borderWidth', 'borderStyle', 'borderColor', 'padding', 'paddingTop', 'paddingLeft', 'paddingRight', 'paddingBottom'];

  var helperProps = ['margin', 'marginTop', 'marginLeft', 'marginRight', 'marginBottom'];

  var innerProps = [
    'flexDirection',
    'flexWrap',
    // 'justifyContent',
    'alignContent',
    'alignItems',
    'display',
  ];

  var filterOuterStyle = function filterOuterStyle(style) {
    var props = {};

    [].concat(innerProps).forEach(function (key) {
      props[key] = style[key];
    });

    return filterUndefinedValue(stripObject(style, props));
  };

  var filterHelperStyle = function filterHelperStyle(style) {
    var props = {};
    helperProps.forEach(function (key) {
      props[key] = style[key];
    });

    return filterUndefinedValue(
      _default$6({}, props, {
        overflow: 'hidden',
      }),
    );
  };

  var filterInnerStyle = function filterInnerStyle(style) {
    var props = {};

    innerProps.forEach(function (key) {
      props[key] = style[key];
    });

    return filterUndefinedValue(props);
  };

  var getGridChildProps = function getGridChildProps(props, device, gap) {
    var _props$row = props.row,
      row = _props$row === undefined ? 'initial' : _props$row,
      _props$col = props.col,
      col = _props$col === undefined ? 'initial' : _props$col,
      _props$rowSpan = props.rowSpan,
      rowSpan = _props$rowSpan === undefined ? 1 : _props$rowSpan,
      _props$colSpan = props.colSpan,
      colSpan = _props$colSpan === undefined ? 1 : _props$colSpan;

    var totalSpan = 12;
    var newColSpan =
      (typeof colSpan === 'undefined' ? 'undefined' : _default$4(colSpan)) === 'object' && 'desktop' in colSpan
        ? colSpan.desktop
        : colSpan;

    ['tablet', 'phone'].forEach(function (deviceKey) {
      if (deviceKey === device) {
        if ((typeof colSpan === 'undefined' ? 'undefined' : _default$4(colSpan)) === 'object' && device in colSpan) {
          newColSpan = colSpan[device];
        } else {
          switch (deviceKey) {
            case 'tablet':
              totalSpan = 8;
              newColSpan = colSpan > 5 ? 8 : colSpan > 2 ? 4 : 2;
              break;
            case 'phone':
              totalSpan = 4;
              newColSpan = colSpan > 2 ? 4 : 2;
              break;
          }
        }
      }
    });

    var gapLeft = gap;
    if (Array.isArray(gap)) {
      gapLeft = gap[1];
    }

    var ieChildFix =
      ieVersion && !(rowSpan === 1 && colSpan === 1)
        ? {
            display: 'inline-block',
            width: gapLeft
              ? 'calc(' + (newColSpan / totalSpan) * 100 + '% - ' + gapLeft + 'px)'
              : (newColSpan / totalSpan) * 100 + '%',
          }
        : {};

    return filterUndefinedValue(
      _default$6(
        {
          gridRowStart: row,
          gridRowEnd: 'span ' + rowSpan,
          gridColumnStart: col,
          gridColumnEnd: 'span ' + newColSpan,
        },
        ieChildFix,
      ),
    );
  };

  var getBoxChildProps = function getBoxChildProps(props) {
    var alignSelf = props.alignSelf,
      flex = props.flex;

    return filterUndefinedValue(
      _default$6(
        {
          alignSelf: alignSelf,
        },
        getFlexs(flex),
      ),
    );
  };

  var createStyle = function (_ref2) {
    var device = _ref2.device,
      display = _ref2.display,
      gap = _ref2.gap,
      direction = _ref2.direction,
      dense = _ref2.dense,
      rowSpan = _ref2.rowSpan,
      colSpan = _ref2.colSpan,
      row = _ref2.row,
      col = _ref2.col,
      rows = _ref2.rows,
      columns = _ref2.columns,
      justify = _ref2.justify,
      align = _ref2.align,
      alignSelf = _ref2.alignSelf,
      wrap = _ref2.wrap,
      flex = _ref2.flex,
      padding = _ref2.padding,
      margin = _ref2.margin;

    var style = _default$6({}, getPadding(padding));

    var deviceColumns = 'auto';

    switch (device) {
      case 'phone':
        deviceColumns = 4;
        break;
      case 'tablet':
        deviceColumns = 8;
        break;
      case 'desktop':
        deviceColumns = 12;
        break;
    }
    var newColumns = !isNaN(columns) || typeof columns === 'string' ? columns : deviceColumns;

    switch (display) {
      case 'grid':
        style = _default$6(
          {},
          getGridGap(gap),
          {
            gridTemplateRows: getTemplateCount(rows),
            gridTemplateColumns: getTemplateCount(newColumns),
            gridAutoFlow: '' + (direction || '') + (dense && ' dense'),
          },
          getGridChildProps(
            {
              row: row,
              rowSpan: rowSpan,
              col: col,
              colSpan: colSpan,
              // justifySelf,
              // alignSelf,
            },
            device,
          ),
          style,
        );
        break;
      case 'flex':
        style = _default$6(
          {
            // parent
            msFlexDirection: direction,
            flexDirection: direction,
            msFlexWrap: wrap ? 'wrap' : 'none',
            flexWrap: wrap ? 'wrap' : 'nowrap',
            msFlexPack: justify,
            justifyContent: justify,
            msFlexAlign: align,
            alignItems: align,
          },
          getMargin(margin),
          getBoxChildProps({
            alignSelf: alignSelf,
            flex: flex,
          }),
          style,
        );
        break;
    }

    // return prefix(style);
    return filterUndefinedValue(style);
  };

  var _class, _temp;

  var pickOthers = obj.pickOthers;

  var createChildren = function createChildren(children, _ref) {
    var spacing = _ref.spacing,
      direction = _ref.direction,
      wrap = _ref.wrap;
    _ref.device;

    var array = React__default['default'].Children.toArray(children);
    if (!children) {
      return null;
    }

    return array.map(function (child, index) {
      var spacingMargin = {};

      spacingMargin = getChildMargin(spacing);

      if (!wrap) {
        // 不折行
        var isNone = [index === 0, index === array.length - 1];
        var props = direction === 'row' ? ['marginLeft', 'marginRight'] : ['marginTop', 'marginBottom'];

        ['marginTop', 'marginRight', 'marginBottom', 'marginLeft'].forEach(function (prop) {
          if (prop in spacingMargin && props.indexOf(prop) === -1) {
            spacingMargin[prop] = 0;
          }

          props.forEach(function (key, i) {
            if (key in spacingMargin && isNone[i]) {
              spacingMargin[key] = 0;
            }
          });
        });
      }

      if (React__default['default'].isValidElement(child)) {
        var propsMargin = child.props.margin;

        var childPropsMargin = getMargin(propsMargin);
        var gridProps = {};

        if (['function', 'object'].indexOf(_default$4(child.type)) > -1 && child.type._typeMark === 'responsive_grid') {
          gridProps = createStyle(_default$6({ display: 'grid' }, child.props));
        }

        return React__default['default'].cloneElement(child, {
          style: _default$6({}, spacingMargin, childPropsMargin, gridProps, child.props.style || {}),
        });
      }

      return child;
    });
  };

  var getStyle = function getStyle() {
    var style = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var props = arguments[1];

    return _default$6({}, createStyle(_default$6({ display: 'flex' }, props)), style);
  };

  var getOuterStyle = function getOuterStyle(style, styleProps) {
    var sheet = getStyle(style, styleProps);

    return filterOuterStyle(sheet);
  };

  var getHelperStyle = function getHelperStyle(style, styleProps) {
    var sheet = getStyle(style, styleProps);

    return filterHelperStyle(_default$6({}, sheet, getSpacingHelperMargin(styleProps.spacing)));
  };

  var getInnerStyle = function getInnerStyle(style, styleProps) {
    var sheet = getStyle(style, styleProps);

    return filterInnerStyle(sheet);
  };

  /**
   * Box
   */
  var Box =
    ((_temp = _class =
      (function (_Component) {
        _default$2(Box, _Component);

        function Box() {
          _default$5(this, Box);

          return _default$3(this, _Component.apply(this, arguments));
        }

        Box.prototype.render = function render() {
          var _cx;

          var _props = this.props,
            prefix = _props.prefix,
            direction = _props.direction,
            justify = _props.justify,
            align = _props.align,
            wrap = _props.wrap,
            flex = _props.flex,
            spacing = _props.spacing,
            padding = _props.padding,
            margin = _props.margin,
            style = _props.style,
            className = _props.className,
            children = _props.children,
            device = _props.device,
            component = _props.component;

          var styleProps = {
            direction: direction,
            justify: justify,
            align: align,
            wrap: wrap,
            flex: flex,
            spacing: spacing,
            padding: padding,
            margin: margin,
          };
          var View = component;
          var others = pickOthers(Object.keys(Box.propTypes), this.props);
          var styleSheet = getStyle(style, styleProps);

          var boxs = createChildren(children, {
            spacing: spacing,
            direction: direction,
            wrap: wrap,
            device: device,
          });

          var cls$1 = cls(((_cx = {}), (_cx[prefix + 'box'] = true), _cx), className);
          if (wrap && spacing) {
            var outerStyle = getOuterStyle(style, styleProps);
            var helperStyle = getHelperStyle(style, styleProps);
            var innerStyle = getInnerStyle(style, styleProps);

            return React__default['default'].createElement(
              View,
              _default$6({ style: outerStyle, className: cls$1 }, others),
              React__default['default'].createElement(
                'div',
                { style: helperStyle },
                React__default['default'].createElement('div', { style: innerStyle, className: prefix + 'box' }, boxs),
              ),
            );
          }

          return React__default['default'].createElement(
            View,
            _default$6({ style: styleSheet, className: cls$1 }, others),
            boxs,
          );
        };

        return Box;
      })(React.Component)),
    (_class.propTypes = {
      prefix: PropTypes$2.string,
      style: PropTypes$2.object,
      className: PropTypes$2.any,
      /**
       * 布局属性
       */
      flex: PropTypes$2.oneOfType([
        PropTypes$2.arrayOf(PropTypes$2.oneOfType([PropTypes$2.number, PropTypes$2.string])),
        PropTypes$2.number,
      ]),
      /**
       * 布局方向，默认为 column ，一个元素占据一整行
       * @default column
       */
      direction: PropTypes$2.oneOf(['row', 'column', 'row-reverse']),
      /**
       * 是否折行 支持IE11+
       */
      wrap: PropTypes$2.bool,
      /**
       * 元素之间的间距 [bottom&top, right&left]
       */
      spacing: PropTypes$2.oneOfType([PropTypes$2.arrayOf(PropTypes$2.number), PropTypes$2.number]),
      /**
       * 设置 margin [bottom&top, right&left]
       */
      margin: PropTypes$2.oneOfType([PropTypes$2.arrayOf(PropTypes$2.number), PropTypes$2.number]),
      /**
       * 设置 padding [bottom&top, right&left]
       */
      padding: PropTypes$2.oneOfType([PropTypes$2.arrayOf(PropTypes$2.number), PropTypes$2.number]),
      /**
       * 沿着主轴方向，子元素们的排布关系 （兼容性同 justify-content ）
       */
      justify: PropTypes$2.oneOf(['flex-start', 'center', 'flex-end', 'space-between', 'space-around']),
      /**
       * 垂直主轴方向，子元素们的排布关系 （兼容性同 align-items ）
       */
      align: PropTypes$2.oneOf(['flex-start', 'center', 'flex-end', 'baseline', 'stretch']),
      device: PropTypes$2.oneOf(['phone', 'tablet', 'desktop']),
      /**
       * 定制标签名， 例如section等
       */
      component: PropTypes$2.string,
    }),
    (_class.defaultProps = {
      prefix: 'next-',
      direction: 'column',
      wrap: false,
      component: 'div',
    }),
    _temp);
  Box.displayName = 'Box';

  var Box$1 = ConfigProvider$1.config(Box);

  var axios$2 = { exports: {} };

  var bind$2 = function bind(fn, thisArg) {
    return function wrap() {
      var args = new Array(arguments.length);
      for (var i = 0; i < args.length; i++) {
        args[i] = arguments[i];
      }
      return fn.apply(thisArg, args);
    };
  };

  var bind$1 = bind$2;

  // utils is a library of generic helper functions non-specific to axios

  var toString$2 = Object.prototype.toString;

  /**
   * Determine if a value is an Array
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is an Array, otherwise false
   */
  function isArray$2(val) {
    return toString$2.call(val) === '[object Array]';
  }

  /**
   * Determine if a value is undefined
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if the value is undefined, otherwise false
   */
  function isUndefined(val) {
    return typeof val === 'undefined';
  }

  /**
   * Determine if a value is a Buffer
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is a Buffer, otherwise false
   */
  function isBuffer(val) {
    return (
      val !== null &&
      !isUndefined(val) &&
      val.constructor !== null &&
      !isUndefined(val.constructor) &&
      typeof val.constructor.isBuffer === 'function' &&
      val.constructor.isBuffer(val)
    );
  }

  /**
   * Determine if a value is an ArrayBuffer
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is an ArrayBuffer, otherwise false
   */
  function isArrayBuffer(val) {
    return toString$2.call(val) === '[object ArrayBuffer]';
  }

  /**
   * Determine if a value is a FormData
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is an FormData, otherwise false
   */
  function isFormData(val) {
    return typeof FormData !== 'undefined' && val instanceof FormData;
  }

  /**
   * Determine if a value is a view on an ArrayBuffer
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
   */
  function isArrayBufferView(val) {
    var result;
    if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {
      result = ArrayBuffer.isView(val);
    } else {
      result = val && val.buffer && val.buffer instanceof ArrayBuffer;
    }
    return result;
  }

  /**
   * Determine if a value is a String
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is a String, otherwise false
   */
  function isString(val) {
    return typeof val === 'string';
  }

  /**
   * Determine if a value is a Number
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is a Number, otherwise false
   */
  function isNumber(val) {
    return typeof val === 'number';
  }

  /**
   * Determine if a value is an Object
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is an Object, otherwise false
   */
  function isObject(val) {
    return val !== null && typeof val === 'object';
  }

  /**
   * Determine if a value is a plain Object
   *
   * @param {Object} val The value to test
   * @return {boolean} True if value is a plain Object, otherwise false
   */
  function isPlainObject(val) {
    if (toString$2.call(val) !== '[object Object]') {
      return false;
    }

    var prototype = Object.getPrototypeOf(val);
    return prototype === null || prototype === Object.prototype;
  }

  /**
   * Determine if a value is a Date
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is a Date, otherwise false
   */
  function isDate(val) {
    return toString$2.call(val) === '[object Date]';
  }

  /**
   * Determine if a value is a File
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is a File, otherwise false
   */
  function isFile(val) {
    return toString$2.call(val) === '[object File]';
  }

  /**
   * Determine if a value is a Blob
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is a Blob, otherwise false
   */
  function isBlob(val) {
    return toString$2.call(val) === '[object Blob]';
  }

  /**
   * Determine if a value is a Function
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is a Function, otherwise false
   */
  function isFunction(val) {
    return toString$2.call(val) === '[object Function]';
  }

  /**
   * Determine if a value is a Stream
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is a Stream, otherwise false
   */
  function isStream(val) {
    return isObject(val) && isFunction(val.pipe);
  }

  /**
   * Determine if a value is a URLSearchParams object
   *
   * @param {Object} val The value to test
   * @returns {boolean} True if value is a URLSearchParams object, otherwise false
   */
  function isURLSearchParams(val) {
    return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
  }

  /**
   * Trim excess whitespace off the beginning and end of a string
   *
   * @param {String} str The String to trim
   * @returns {String} The String freed of excess whitespace
   */
  function trim(str) {
    return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, '');
  }

  /**
   * Determine if we're running in a standard browser environment
   *
   * This allows axios to run in a web worker, and react-native.
   * Both environments support XMLHttpRequest, but not fully standard globals.
   *
   * web workers:
   *  typeof window -> undefined
   *  typeof document -> undefined
   *
   * react-native:
   *  navigator.product -> 'ReactNative'
   * nativescript
   *  navigator.product -> 'NativeScript' or 'NS'
   */
  function isStandardBrowserEnv() {
    if (
      typeof navigator !== 'undefined' &&
      (navigator.product === 'ReactNative' || navigator.product === 'NativeScript' || navigator.product === 'NS')
    ) {
      return false;
    }
    return typeof window !== 'undefined' && typeof document !== 'undefined';
  }

  /**
   * Iterate over an Array or an Object invoking a function for each item.
   *
   * If `obj` is an Array callback will be called passing
   * the value, index, and complete array for each item.
   *
   * If 'obj' is an Object callback will be called passing
   * the value, key, and complete object for each property.
   *
   * @param {Object|Array} obj The object to iterate
   * @param {Function} fn The callback to invoke for each item
   */
  function forEach(obj, fn) {
    // Don't bother if no value provided
    if (obj === null || typeof obj === 'undefined') {
      return;
    }

    // Force an array if not already something iterable
    if (typeof obj !== 'object') {
      /*eslint no-param-reassign:0*/
      obj = [obj];
    }

    if (isArray$2(obj)) {
      // Iterate over array values
      for (var i = 0, l = obj.length; i < l; i++) {
        fn.call(null, obj[i], i, obj);
      }
    } else {
      // Iterate over object keys
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          fn.call(null, obj[key], key, obj);
        }
      }
    }
  }

  /**
   * Accepts varargs expecting each argument to be an object, then
   * immutably merges the properties of each object and returns result.
   *
   * When multiple objects contain the same key the later object in
   * the arguments list will take precedence.
   *
   * Example:
   *
   * ```js
   * var result = merge({foo: 123}, {foo: 456});
   * console.log(result.foo); // outputs 456
   * ```
   *
   * @param {Object} obj1 Object to merge
   * @returns {Object} Result of all merge properties
   */
  function merge$1(/* obj1, obj2, obj3, ... */) {
    var result = {};
    function assignValue(val, key) {
      if (isPlainObject(result[key]) && isPlainObject(val)) {
        result[key] = merge$1(result[key], val);
      } else if (isPlainObject(val)) {
        result[key] = merge$1({}, val);
      } else if (isArray$2(val)) {
        result[key] = val.slice();
      } else {
        result[key] = val;
      }
    }

    for (var i = 0, l = arguments.length; i < l; i++) {
      forEach(arguments[i], assignValue);
    }
    return result;
  }

  /**
   * Extends object a by mutably adding to it the properties of object b.
   *
   * @param {Object} a The object to be extended
   * @param {Object} b The object to copy properties from
   * @param {Object} thisArg The object to bind function to
   * @return {Object} The resulting value of object a
   */
  function extend(a, b, thisArg) {
    forEach(b, function assignValue(val, key) {
      if (thisArg && typeof val === 'function') {
        a[key] = bind$1(val, thisArg);
      } else {
        a[key] = val;
      }
    });
    return a;
  }

  /**
   * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
   *
   * @param {string} content with BOM
   * @return {string} content value without BOM
   */
  function stripBOM(content) {
    if (content.charCodeAt(0) === 0xfeff) {
      content = content.slice(1);
    }
    return content;
  }

  var utils$d = {
    isArray: isArray$2,
    isArrayBuffer: isArrayBuffer,
    isBuffer: isBuffer,
    isFormData: isFormData,
    isArrayBufferView: isArrayBufferView,
    isString: isString,
    isNumber: isNumber,
    isObject: isObject,
    isPlainObject: isPlainObject,
    isUndefined: isUndefined,
    isDate: isDate,
    isFile: isFile,
    isBlob: isBlob,
    isFunction: isFunction,
    isStream: isStream,
    isURLSearchParams: isURLSearchParams,
    isStandardBrowserEnv: isStandardBrowserEnv,
    forEach: forEach,
    merge: merge$1,
    extend: extend,
    trim: trim,
    stripBOM: stripBOM,
  };

  var utils$c = utils$d;

  function encode(val) {
    return encodeURIComponent(val)
      .replace(/%3A/gi, ':')
      .replace(/%24/g, '$')
      .replace(/%2C/gi, ',')
      .replace(/%20/g, '+')
      .replace(/%5B/gi, '[')
      .replace(/%5D/gi, ']');
  }

  /**
   * Build a URL by appending params to the end
   *
   * @param {string} url The base of the url (e.g., http://www.google.com)
   * @param {object} [params] The params to be appended
   * @returns {string} The formatted url
   */
  var buildURL$2 = function buildURL(url, params, paramsSerializer) {
    /*eslint no-param-reassign:0*/
    if (!params) {
      return url;
    }

    var serializedParams;
    if (paramsSerializer) {
      serializedParams = paramsSerializer(params);
    } else if (utils$c.isURLSearchParams(params)) {
      serializedParams = params.toString();
    } else {
      var parts = [];

      utils$c.forEach(params, function serialize(val, key) {
        if (val === null || typeof val === 'undefined') {
          return;
        }

        if (utils$c.isArray(val)) {
          key = key + '[]';
        } else {
          val = [val];
        }

        utils$c.forEach(val, function parseValue(v) {
          if (utils$c.isDate(v)) {
            v = v.toISOString();
          } else if (utils$c.isObject(v)) {
            v = JSON.stringify(v);
          }
          parts.push(encode(key) + '=' + encode(v));
        });
      });

      serializedParams = parts.join('&');
    }

    if (serializedParams) {
      var hashmarkIndex = url.indexOf('#');
      if (hashmarkIndex !== -1) {
        url = url.slice(0, hashmarkIndex);
      }

      url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
    }

    return url;
  };

  var utils$b = utils$d;

  function InterceptorManager$1() {
    this.handlers = [];
  }

  /**
   * Add a new interceptor to the stack
   *
   * @param {Function} fulfilled The function to handle `then` for a `Promise`
   * @param {Function} rejected The function to handle `reject` for a `Promise`
   *
   * @return {Number} An ID used to remove interceptor later
   */
  InterceptorManager$1.prototype.use = function use(fulfilled, rejected, options) {
    this.handlers.push({
      fulfilled: fulfilled,
      rejected: rejected,
      synchronous: options ? options.synchronous : false,
      runWhen: options ? options.runWhen : null,
    });
    return this.handlers.length - 1;
  };

  /**
   * Remove an interceptor from the stack
   *
   * @param {Number} id The ID that was returned by `use`
   */
  InterceptorManager$1.prototype.eject = function eject(id) {
    if (this.handlers[id]) {
      this.handlers[id] = null;
    }
  };

  /**
   * Iterate over all the registered interceptors
   *
   * This method is particularly useful for skipping over any
   * interceptors that may have become `null` calling `eject`.
   *
   * @param {Function} fn The function to call for each interceptor
   */
  InterceptorManager$1.prototype.forEach = function forEach(fn) {
    utils$b.forEach(this.handlers, function forEachHandler(h) {
      if (h !== null) {
        fn(h);
      }
    });
  };

  var InterceptorManager_1 = InterceptorManager$1;

  var utils$a = utils$d;

  var normalizeHeaderName$1 = function normalizeHeaderName(headers, normalizedName) {
    utils$a.forEach(headers, function processHeader(value, name) {
      if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
        headers[normalizedName] = value;
        delete headers[name];
      }
    });
  };

  /**
   * Update an Error with the specified config, error code, and response.
   *
   * @param {Error} error The error to update.
   * @param {Object} config The config.
   * @param {string} [code] The error code (for example, 'ECONNABORTED').
   * @param {Object} [request] The request.
   * @param {Object} [response] The response.
   * @returns {Error} The error.
   */
  var enhanceError$2 = function enhanceError(error, config, code, request, response) {
    error.config = config;
    if (code) {
      error.code = code;
    }

    error.request = request;
    error.response = response;
    error.isAxiosError = true;

    error.toJSON = function toJSON() {
      return {
        // Standard
        message: this.message,
        name: this.name,
        // Microsoft
        description: this.description,
        number: this.number,
        // Mozilla
        fileName: this.fileName,
        lineNumber: this.lineNumber,
        columnNumber: this.columnNumber,
        stack: this.stack,
        // Axios
        config: this.config,
        code: this.code,
        status: this.response && this.response.status ? this.response.status : null,
      };
    };
    return error;
  };

  var enhanceError$1 = enhanceError$2;

  /**
   * Create an Error with the specified message, config, error code, request and response.
   *
   * @param {string} message The error message.
   * @param {Object} config The config.
   * @param {string} [code] The error code (for example, 'ECONNABORTED').
   * @param {Object} [request] The request.
   * @param {Object} [response] The response.
   * @returns {Error} The created error.
   */
  var createError$2 = function createError(message, config, code, request, response) {
    var error = new Error(message);
    return enhanceError$1(error, config, code, request, response);
  };

  var createError$1 = createError$2;

  /**
   * Resolve or reject a Promise based on response status.
   *
   * @param {Function} resolve A function that resolves the promise.
   * @param {Function} reject A function that rejects the promise.
   * @param {object} response The response.
   */
  var settle$1 = function settle(resolve, reject, response) {
    var validateStatus = response.config.validateStatus;
    if (!response.status || !validateStatus || validateStatus(response.status)) {
      resolve(response);
    } else {
      reject(
        createError$1(
          'Request failed with status code ' + response.status,
          response.config,
          null,
          response.request,
          response,
        ),
      );
    }
  };

  var utils$9 = utils$d;

  var cookies$1 = utils$9.isStandardBrowserEnv()
    ? // Standard browser envs support document.cookie
      (function standardBrowserEnv() {
        return {
          write: function write(name, value, expires, path, domain, secure) {
            var cookie = [];
            cookie.push(name + '=' + encodeURIComponent(value));

            if (utils$9.isNumber(expires)) {
              cookie.push('expires=' + new Date(expires).toGMTString());
            }

            if (utils$9.isString(path)) {
              cookie.push('path=' + path);
            }

            if (utils$9.isString(domain)) {
              cookie.push('domain=' + domain);
            }

            if (secure === true) {
              cookie.push('secure');
            }

            document.cookie = cookie.join('; ');
          },

          read: function read(name) {
            var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
            return match ? decodeURIComponent(match[3]) : null;
          },

          remove: function remove(name) {
            this.write(name, '', Date.now() - 86400000);
          },
        };
      })()
    : // Non standard browser env (web workers, react-native) lack needed support.
      (function nonStandardBrowserEnv() {
        return {
          write: function write() {},
          read: function read() {
            return null;
          },
          remove: function remove() {},
        };
      })();

  /**
   * Determines whether the specified URL is absolute
   *
   * @param {string} url The URL to test
   * @returns {boolean} True if the specified URL is absolute, otherwise false
   */
  var isAbsoluteURL$1 = function isAbsoluteURL(url) {
    // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
    // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
    // by any combination of letters, digits, plus, period, or hyphen.
    return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
  };

  /**
   * Creates a new URL by combining the specified URLs
   *
   * @param {string} baseURL The base URL
   * @param {string} relativeURL The relative URL
   * @returns {string} The combined URL
   */
  var combineURLs$1 = function combineURLs(baseURL, relativeURL) {
    return relativeURL ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '') : baseURL;
  };

  var isAbsoluteURL = isAbsoluteURL$1;
  var combineURLs = combineURLs$1;

  /**
   * Creates a new URL by combining the baseURL with the requestedURL,
   * only when the requestedURL is not already an absolute URL.
   * If the requestURL is absolute, this function returns the requestedURL untouched.
   *
   * @param {string} baseURL The base URL
   * @param {string} requestedURL Absolute or relative URL to combine
   * @returns {string} The combined full path
   */
  var buildFullPath$1 = function buildFullPath(baseURL, requestedURL) {
    if (baseURL && !isAbsoluteURL(requestedURL)) {
      return combineURLs(baseURL, requestedURL);
    }
    return requestedURL;
  };

  var utils$8 = utils$d;

  // Headers whose duplicates are ignored by node
  // c.f. https://nodejs.org/api/http.html#http_message_headers
  var ignoreDuplicateOf = [
    'age',
    'authorization',
    'content-length',
    'content-type',
    'etag',
    'expires',
    'from',
    'host',
    'if-modified-since',
    'if-unmodified-since',
    'last-modified',
    'location',
    'max-forwards',
    'proxy-authorization',
    'referer',
    'retry-after',
    'user-agent',
  ];

  /**
   * Parse headers into an object
   *
   * ```
   * Date: Wed, 27 Aug 2014 08:58:49 GMT
   * Content-Type: application/json
   * Connection: keep-alive
   * Transfer-Encoding: chunked
   * ```
   *
   * @param {String} headers Headers needing to be parsed
   * @returns {Object} Headers parsed into an object
   */
  var parseHeaders$1 = function parseHeaders(headers) {
    var parsed = {};
    var key;
    var val;
    var i;

    if (!headers) {
      return parsed;
    }

    utils$8.forEach(headers.split('\n'), function parser(line) {
      i = line.indexOf(':');
      key = utils$8.trim(line.substr(0, i)).toLowerCase();
      val = utils$8.trim(line.substr(i + 1));

      if (key) {
        if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
          return;
        }
        if (key === 'set-cookie') {
          parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
        } else {
          parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
        }
      }
    });

    return parsed;
  };

  var utils$7 = utils$d;

  var isURLSameOrigin$1 = utils$7.isStandardBrowserEnv()
    ? // Standard browser envs have full support of the APIs needed to test
      // whether the request URL is of the same origin as current location.
      (function standardBrowserEnv() {
        var msie = /(msie|trident)/i.test(navigator.userAgent);
        var urlParsingNode = document.createElement('a');
        var originURL;

        /**
         * Parse a URL to discover it's components
         *
         * @param {String} url The URL to be parsed
         * @returns {Object}
         */
        function resolveURL(url) {
          var href = url;

          if (msie) {
            // IE needs attribute set twice to normalize properties
            urlParsingNode.setAttribute('href', href);
            href = urlParsingNode.href;
          }

          urlParsingNode.setAttribute('href', href);

          // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
          return {
            href: urlParsingNode.href,
            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
            host: urlParsingNode.host,
            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
            hostname: urlParsingNode.hostname,
            port: urlParsingNode.port,
            pathname:
              urlParsingNode.pathname.charAt(0) === '/' ? urlParsingNode.pathname : '/' + urlParsingNode.pathname,
          };
        }

        originURL = resolveURL(window.location.href);

        /**
         * Determine if a URL shares the same origin as the current location
         *
         * @param {String} requestURL The URL to test
         * @returns {boolean} True if URL shares the same origin, otherwise false
         */
        return function isURLSameOrigin(requestURL) {
          var parsed = utils$7.isString(requestURL) ? resolveURL(requestURL) : requestURL;
          return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
        };
      })()
    : // Non standard browser envs (web workers, react-native) lack needed support.
      (function nonStandardBrowserEnv() {
        return function isURLSameOrigin() {
          return true;
        };
      })();

  /**
   * A `Cancel` is an object that is thrown when an operation is canceled.
   *
   * @class
   * @param {string=} message The message.
   */
  function Cancel$3(message) {
    this.message = message;
  }

  Cancel$3.prototype.toString = function toString() {
    return 'Cancel' + (this.message ? ': ' + this.message : '');
  };

  Cancel$3.prototype.__CANCEL__ = true;

  var Cancel_1 = Cancel$3;

  var utils$6 = utils$d;
  var settle = settle$1;
  var cookies = cookies$1;
  var buildURL$1 = buildURL$2;
  var buildFullPath = buildFullPath$1;
  var parseHeaders = parseHeaders$1;
  var isURLSameOrigin = isURLSameOrigin$1;
  var createError = createError$2;
  var defaults$4 = defaults_1;
  var Cancel$2 = Cancel_1;

  var xhr = function xhrAdapter(config) {
    return new Promise(function dispatchXhrRequest(resolve, reject) {
      var requestData = config.data;
      var requestHeaders = config.headers;
      var responseType = config.responseType;
      var onCanceled;
      function done() {
        if (config.cancelToken) {
          config.cancelToken.unsubscribe(onCanceled);
        }

        if (config.signal) {
          config.signal.removeEventListener('abort', onCanceled);
        }
      }

      if (utils$6.isFormData(requestData)) {
        delete requestHeaders['Content-Type']; // Let the browser set it
      }

      var request = new XMLHttpRequest();

      // HTTP basic authentication
      if (config.auth) {
        var username = config.auth.username || '';
        var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
        requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
      }

      var fullPath = buildFullPath(config.baseURL, config.url);
      request.open(config.method.toUpperCase(), buildURL$1(fullPath, config.params, config.paramsSerializer), true);

      // Set the request timeout in MS
      request.timeout = config.timeout;

      function onloadend() {
        if (!request) {
          return;
        }
        // Prepare the response
        var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
        var responseData =
          !responseType || responseType === 'text' || responseType === 'json' ? request.responseText : request.response;
        var response = {
          data: responseData,
          status: request.status,
          statusText: request.statusText,
          headers: responseHeaders,
          config: config,
          request: request,
        };

        settle(
          function _resolve(value) {
            resolve(value);
            done();
          },
          function _reject(err) {
            reject(err);
            done();
          },
          response,
        );

        // Clean up request
        request = null;
      }

      if ('onloadend' in request) {
        // Use onloadend if available
        request.onloadend = onloadend;
      } else {
        // Listen for ready state to emulate onloadend
        request.onreadystatechange = function handleLoad() {
          if (!request || request.readyState !== 4) {
            return;
          }

          // The request errored out and we didn't get a response, this will be
          // handled by onerror instead
          // With one exception: request that using file: protocol, most browsers
          // will return status as 0 even though it's a successful request
          if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
            return;
          }
          // readystate handler is calling before onerror or ontimeout handlers,
          // so we should call onloadend on the next 'tick'
          setTimeout(onloadend);
        };
      }

      // Handle browser request cancellation (as opposed to a manual cancellation)
      request.onabort = function handleAbort() {
        if (!request) {
          return;
        }

        reject(createError('Request aborted', config, 'ECONNABORTED', request));

        // Clean up request
        request = null;
      };

      // Handle low level network errors
      request.onerror = function handleError() {
        // Real errors are hidden from us by the browser
        // onerror should only fire if it's a network error
        reject(createError('Network Error', config, null, request));

        // Clean up request
        request = null;
      };

      // Handle timeout
      request.ontimeout = function handleTimeout() {
        var timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';
        var transitional = config.transitional || defaults$4.transitional;
        if (config.timeoutErrorMessage) {
          timeoutErrorMessage = config.timeoutErrorMessage;
        }
        reject(
          createError(
            timeoutErrorMessage,
            config,
            transitional.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED',
            request,
          ),
        );

        // Clean up request
        request = null;
      };

      // Add xsrf header
      // This is only done if running in a standard browser environment.
      // Specifically not if we're in a web worker, or react-native.
      if (utils$6.isStandardBrowserEnv()) {
        // Add xsrf header
        var xsrfValue =
          (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName
            ? cookies.read(config.xsrfCookieName)
            : undefined;

        if (xsrfValue) {
          requestHeaders[config.xsrfHeaderName] = xsrfValue;
        }
      }

      // Add headers to the request
      if ('setRequestHeader' in request) {
        utils$6.forEach(requestHeaders, function setRequestHeader(val, key) {
          if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
            // Remove Content-Type if data is undefined
            delete requestHeaders[key];
          } else {
            // Otherwise add header to the request
            request.setRequestHeader(key, val);
          }
        });
      }

      // Add withCredentials to request if needed
      if (!utils$6.isUndefined(config.withCredentials)) {
        request.withCredentials = !!config.withCredentials;
      }

      // Add responseType to request if needed
      if (responseType && responseType !== 'json') {
        request.responseType = config.responseType;
      }

      // Handle progress if needed
      if (typeof config.onDownloadProgress === 'function') {
        request.addEventListener('progress', config.onDownloadProgress);
      }

      // Not all browsers support upload events
      if (typeof config.onUploadProgress === 'function' && request.upload) {
        request.upload.addEventListener('progress', config.onUploadProgress);
      }

      if (config.cancelToken || config.signal) {
        // Handle cancellation
        // eslint-disable-next-line func-names
        onCanceled = function (cancel) {
          if (!request) {
            return;
          }
          reject(!cancel || (cancel && cancel.type) ? new Cancel$2('canceled') : cancel);
          request.abort();
          request = null;
        };

        config.cancelToken && config.cancelToken.subscribe(onCanceled);
        if (config.signal) {
          config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);
        }
      }

      if (!requestData) {
        requestData = null;
      }

      // Send the request
      request.send(requestData);
    });
  };

  var utils$5 = utils$d;
  var normalizeHeaderName = normalizeHeaderName$1;
  var enhanceError = enhanceError$2;

  var DEFAULT_CONTENT_TYPE = {
    'Content-Type': 'application/x-www-form-urlencoded',
  };

  function setContentTypeIfUnset(headers, value) {
    if (!utils$5.isUndefined(headers) && utils$5.isUndefined(headers['Content-Type'])) {
      headers['Content-Type'] = value;
    }
  }

  function getDefaultAdapter() {
    var adapter;
    if (typeof XMLHttpRequest !== 'undefined') {
      // For browsers use XHR adapter
      adapter = xhr;
    } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
      // For node use HTTP adapter
      adapter = xhr;
    }
    return adapter;
  }

  function stringifySafely(rawValue, parser, encoder) {
    if (utils$5.isString(rawValue)) {
      try {
        (parser || JSON.parse)(rawValue);
        return utils$5.trim(rawValue);
      } catch (e) {
        if (e.name !== 'SyntaxError') {
          throw e;
        }
      }
    }

    return (encoder || JSON.stringify)(rawValue);
  }

  var defaults$3 = {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false,
    },

    adapter: getDefaultAdapter(),

    transformRequest: [
      function transformRequest(data, headers) {
        normalizeHeaderName(headers, 'Accept');
        normalizeHeaderName(headers, 'Content-Type');

        if (
          utils$5.isFormData(data) ||
          utils$5.isArrayBuffer(data) ||
          utils$5.isBuffer(data) ||
          utils$5.isStream(data) ||
          utils$5.isFile(data) ||
          utils$5.isBlob(data)
        ) {
          return data;
        }
        if (utils$5.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils$5.isURLSearchParams(data)) {
          setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
          return data.toString();
        }
        if (utils$5.isObject(data) || (headers && headers['Content-Type'] === 'application/json')) {
          setContentTypeIfUnset(headers, 'application/json');
          return stringifySafely(data);
        }
        return data;
      },
    ],

    transformResponse: [
      function transformResponse(data) {
        var transitional = this.transitional || defaults$3.transitional;
        var silentJSONParsing = transitional && transitional.silentJSONParsing;
        var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
        var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';

        if (strictJSONParsing || (forcedJSONParsing && utils$5.isString(data) && data.length)) {
          try {
            return JSON.parse(data);
          } catch (e) {
            if (strictJSONParsing) {
              if (e.name === 'SyntaxError') {
                throw enhanceError(e, this, 'E_JSON_PARSE');
              }
              throw e;
            }
          }
        }

        return data;
      },
    ],

    /**
     * A timeout in milliseconds to abort a request. If set to 0 (default) a
     * timeout is not created.
     */
    timeout: 0,

    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',

    maxContentLength: -1,
    maxBodyLength: -1,

    validateStatus: function validateStatus(status) {
      return status >= 200 && status < 300;
    },

    headers: {
      common: {
        Accept: 'application/json, text/plain, */*',
      },
    },
  };

  utils$5.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
    defaults$3.headers[method] = {};
  });

  utils$5.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
    defaults$3.headers[method] = utils$5.merge(DEFAULT_CONTENT_TYPE);
  });

  var defaults_1 = defaults$3;

  var utils$4 = utils$d;
  var defaults$2 = defaults_1;

  /**
   * Transform the data for a request or a response
   *
   * @param {Object|String} data The data to be transformed
   * @param {Array} headers The headers for the request or response
   * @param {Array|Function} fns A single function or Array of functions
   * @returns {*} The resulting transformed data
   */
  var transformData$1 = function transformData(data, headers, fns) {
    var context = this || defaults$2;
    /*eslint no-param-reassign:0*/
    utils$4.forEach(fns, function transform(fn) {
      data = fn.call(context, data, headers);
    });

    return data;
  };

  var isCancel$1 = function isCancel(value) {
    return !!(value && value.__CANCEL__);
  };

  var utils$3 = utils$d;
  var transformData = transformData$1;
  var isCancel = isCancel$1;
  var defaults$1 = defaults_1;
  var Cancel$1 = Cancel_1;

  /**
   * Throws a `Cancel` if cancellation has been requested.
   */
  function throwIfCancellationRequested(config) {
    if (config.cancelToken) {
      config.cancelToken.throwIfRequested();
    }

    if (config.signal && config.signal.aborted) {
      throw new Cancel$1('canceled');
    }
  }

  /**
   * Dispatch a request to the server using the configured adapter.
   *
   * @param {object} config The config that is to be used for the request
   * @returns {Promise} The Promise to be fulfilled
   */
  var dispatchRequest$1 = function dispatchRequest(config) {
    throwIfCancellationRequested(config);

    // Ensure headers exist
    config.headers = config.headers || {};

    // Transform request data
    config.data = transformData.call(config, config.data, config.headers, config.transformRequest);

    // Flatten headers
    config.headers = utils$3.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers);

    utils$3.forEach(['delete', 'get', 'head', 'post', 'put', 'patch', 'common'], function cleanHeaderConfig(method) {
      delete config.headers[method];
    });

    var adapter = config.adapter || defaults$1.adapter;

    return adapter(config).then(
      function onAdapterResolution(response) {
        throwIfCancellationRequested(config);

        // Transform response data
        response.data = transformData.call(config, response.data, response.headers, config.transformResponse);

        return response;
      },
      function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config);

          // Transform response data
          if (reason && reason.response) {
            reason.response.data = transformData.call(
              config,
              reason.response.data,
              reason.response.headers,
              config.transformResponse,
            );
          }
        }

        return Promise.reject(reason);
      },
    );
  };

  var utils$2 = utils$d;

  /**
   * Config-specific merge-function which creates a new config-object
   * by merging two configuration objects together.
   *
   * @param {Object} config1
   * @param {Object} config2
   * @returns {Object} New object resulting from merging config2 to config1
   */
  var mergeConfig$2 = function mergeConfig(config1, config2) {
    // eslint-disable-next-line no-param-reassign
    config2 = config2 || {};
    var config = {};

    function getMergedValue(target, source) {
      if (utils$2.isPlainObject(target) && utils$2.isPlainObject(source)) {
        return utils$2.merge(target, source);
      } else if (utils$2.isPlainObject(source)) {
        return utils$2.merge({}, source);
      } else if (utils$2.isArray(source)) {
        return source.slice();
      }
      return source;
    }

    // eslint-disable-next-line consistent-return
    function mergeDeepProperties(prop) {
      if (!utils$2.isUndefined(config2[prop])) {
        return getMergedValue(config1[prop], config2[prop]);
      } else if (!utils$2.isUndefined(config1[prop])) {
        return getMergedValue(undefined, config1[prop]);
      }
    }

    // eslint-disable-next-line consistent-return
    function valueFromConfig2(prop) {
      if (!utils$2.isUndefined(config2[prop])) {
        return getMergedValue(undefined, config2[prop]);
      }
    }

    // eslint-disable-next-line consistent-return
    function defaultToConfig2(prop) {
      if (!utils$2.isUndefined(config2[prop])) {
        return getMergedValue(undefined, config2[prop]);
      } else if (!utils$2.isUndefined(config1[prop])) {
        return getMergedValue(undefined, config1[prop]);
      }
    }

    // eslint-disable-next-line consistent-return
    function mergeDirectKeys(prop) {
      if (prop in config2) {
        return getMergedValue(config1[prop], config2[prop]);
      } else if (prop in config1) {
        return getMergedValue(undefined, config1[prop]);
      }
    }

    var mergeMap = {
      url: valueFromConfig2,
      method: valueFromConfig2,
      data: valueFromConfig2,
      baseURL: defaultToConfig2,
      transformRequest: defaultToConfig2,
      transformResponse: defaultToConfig2,
      paramsSerializer: defaultToConfig2,
      timeout: defaultToConfig2,
      timeoutMessage: defaultToConfig2,
      withCredentials: defaultToConfig2,
      adapter: defaultToConfig2,
      responseType: defaultToConfig2,
      xsrfCookieName: defaultToConfig2,
      xsrfHeaderName: defaultToConfig2,
      onUploadProgress: defaultToConfig2,
      onDownloadProgress: defaultToConfig2,
      decompress: defaultToConfig2,
      maxContentLength: defaultToConfig2,
      maxBodyLength: defaultToConfig2,
      transport: defaultToConfig2,
      httpAgent: defaultToConfig2,
      httpsAgent: defaultToConfig2,
      cancelToken: defaultToConfig2,
      socketPath: defaultToConfig2,
      responseEncoding: defaultToConfig2,
      validateStatus: mergeDirectKeys,
    };

    utils$2.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
      var merge = mergeMap[prop] || mergeDeepProperties;
      var configValue = merge(prop);
      (utils$2.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);
    });

    return config;
  };

  var data = {
    version: '0.24.0',
  };

  var VERSION = data.version;

  var validators$1 = {};

  // eslint-disable-next-line func-names
  ['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function (type, i) {
    validators$1[type] = function validator(thing) {
      return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
    };
  });

  var deprecatedWarnings = {};

  /**
   * Transitional option validator
   * @param {function|boolean?} validator - set to false if the transitional option has been removed
   * @param {string?} version - deprecated version / removed since version
   * @param {string?} message - some message with additional info
   * @returns {function}
   */
  validators$1.transitional = function transitional(validator, version, message) {
    function formatMessage(opt, desc) {
      return '[Axios v' + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? '. ' + message : '');
    }

    // eslint-disable-next-line func-names
    return function (value, opt, opts) {
      if (validator === false) {
        throw new Error(formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')));
      }

      if (version && !deprecatedWarnings[opt]) {
        deprecatedWarnings[opt] = true;
        // eslint-disable-next-line no-console
        console.warn(
          formatMessage(opt, ' has been deprecated since v' + version + ' and will be removed in the near future'),
        );
      }

      return validator ? validator(value, opt, opts) : true;
    };
  };

  /**
   * Assert object's properties type
   * @param {object} options
   * @param {object} schema
   * @param {boolean?} allowUnknown
   */

  function assertOptions(options, schema, allowUnknown) {
    if (typeof options !== 'object') {
      throw new TypeError('options must be an object');
    }
    var keys = Object.keys(options);
    var i = keys.length;
    while (i-- > 0) {
      var opt = keys[i];
      var validator = schema[opt];
      if (validator) {
        var value = options[opt];
        var result = value === undefined || validator(value, opt, options);
        if (result !== true) {
          throw new TypeError('option ' + opt + ' must be ' + result);
        }
        continue;
      }
      if (allowUnknown !== true) {
        throw Error('Unknown option ' + opt);
      }
    }
  }

  var validator$1 = {
    assertOptions: assertOptions,
    validators: validators$1,
  };

  var utils$1 = utils$d;
  var buildURL = buildURL$2;
  var InterceptorManager = InterceptorManager_1;
  var dispatchRequest = dispatchRequest$1;
  var mergeConfig$1 = mergeConfig$2;
  var validator = validator$1;

  var validators = validator.validators;
  /**
   * Create a new instance of Axios
   *
   * @param {Object} instanceConfig The default config for the instance
   */
  function Axios$1(instanceConfig) {
    this.defaults = instanceConfig;
    this.interceptors = {
      request: new InterceptorManager(),
      response: new InterceptorManager(),
    };
  }

  /**
   * Dispatch a request
   *
   * @param {Object} config The config specific for this request (merged with this.defaults)
   */
  Axios$1.prototype.request = function request(config) {
    /*eslint no-param-reassign:0*/
    // Allow for axios('example/url'[, config]) a la fetch API
    if (typeof config === 'string') {
      config = arguments[1] || {};
      config.url = arguments[0];
    } else {
      config = config || {};
    }

    config = mergeConfig$1(this.defaults, config);

    // Set config.method
    if (config.method) {
      config.method = config.method.toLowerCase();
    } else if (this.defaults.method) {
      config.method = this.defaults.method.toLowerCase();
    } else {
      config.method = 'get';
    }

    var transitional = config.transitional;

    if (transitional !== undefined) {
      validator.assertOptions(
        transitional,
        {
          silentJSONParsing: validators.transitional(validators.boolean),
          forcedJSONParsing: validators.transitional(validators.boolean),
          clarifyTimeoutError: validators.transitional(validators.boolean),
        },
        false,
      );
    }

    // filter out skipped interceptors
    var requestInterceptorChain = [];
    var synchronousRequestInterceptors = true;
    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
      if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
        return;
      }

      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
    });

    var responseInterceptorChain = [];
    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
    });

    var promise;

    if (!synchronousRequestInterceptors) {
      var chain = [dispatchRequest, undefined];

      Array.prototype.unshift.apply(chain, requestInterceptorChain);
      chain = chain.concat(responseInterceptorChain);

      promise = Promise.resolve(config);
      while (chain.length) {
        promise = promise.then(chain.shift(), chain.shift());
      }

      return promise;
    }

    var newConfig = config;
    while (requestInterceptorChain.length) {
      var onFulfilled = requestInterceptorChain.shift();
      var onRejected = requestInterceptorChain.shift();
      try {
        newConfig = onFulfilled(newConfig);
      } catch (error) {
        onRejected(error);
        break;
      }
    }

    try {
      promise = dispatchRequest(newConfig);
    } catch (error) {
      return Promise.reject(error);
    }

    while (responseInterceptorChain.length) {
      promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
    }

    return promise;
  };

  Axios$1.prototype.getUri = function getUri(config) {
    config = mergeConfig$1(this.defaults, config);
    return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
  };

  // Provide aliases for supported request methods
  utils$1.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
    /*eslint func-names:0*/
    Axios$1.prototype[method] = function (url, config) {
      return this.request(
        mergeConfig$1(config || {}, {
          method: method,
          url: url,
          data: (config || {}).data,
        }),
      );
    };
  });

  utils$1.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
    /*eslint func-names:0*/
    Axios$1.prototype[method] = function (url, data, config) {
      return this.request(
        mergeConfig$1(config || {}, {
          method: method,
          url: url,
          data: data,
        }),
      );
    };
  });

  var Axios_1 = Axios$1;

  var Cancel = Cancel_1;

  /**
   * A `CancelToken` is an object that can be used to request cancellation of an operation.
   *
   * @class
   * @param {Function} executor The executor function.
   */
  function CancelToken(executor) {
    if (typeof executor !== 'function') {
      throw new TypeError('executor must be a function.');
    }

    var resolvePromise;

    this.promise = new Promise(function promiseExecutor(resolve) {
      resolvePromise = resolve;
    });

    var token = this;

    // eslint-disable-next-line func-names
    this.promise.then(function (cancel) {
      if (!token._listeners) return;

      var i;
      var l = token._listeners.length;

      for (i = 0; i < l; i++) {
        token._listeners[i](cancel);
      }
      token._listeners = null;
    });

    // eslint-disable-next-line func-names
    this.promise.then = function (onfulfilled) {
      var _resolve;
      // eslint-disable-next-line func-names
      var promise = new Promise(function (resolve) {
        token.subscribe(resolve);
        _resolve = resolve;
      }).then(onfulfilled);

      promise.cancel = function reject() {
        token.unsubscribe(_resolve);
      };

      return promise;
    };

    executor(function cancel(message) {
      if (token.reason) {
        // Cancellation has already been requested
        return;
      }

      token.reason = new Cancel(message);
      resolvePromise(token.reason);
    });
  }

  /**
   * Throws a `Cancel` if cancellation has been requested.
   */
  CancelToken.prototype.throwIfRequested = function throwIfRequested() {
    if (this.reason) {
      throw this.reason;
    }
  };

  /**
   * Subscribe to the cancel signal
   */

  CancelToken.prototype.subscribe = function subscribe(listener) {
    if (this.reason) {
      listener(this.reason);
      return;
    }

    if (this._listeners) {
      this._listeners.push(listener);
    } else {
      this._listeners = [listener];
    }
  };

  /**
   * Unsubscribe from the cancel signal
   */

  CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
    if (!this._listeners) {
      return;
    }
    var index = this._listeners.indexOf(listener);
    if (index !== -1) {
      this._listeners.splice(index, 1);
    }
  };

  /**
   * Returns an object that contains a new `CancelToken` and a function that, when called,
   * cancels the `CancelToken`.
   */
  CancelToken.source = function source() {
    var cancel;
    var token = new CancelToken(function executor(c) {
      cancel = c;
    });
    return {
      token: token,
      cancel: cancel,
    };
  };

  var CancelToken_1 = CancelToken;

  /**
   * Syntactic sugar for invoking a function and expanding an array for arguments.
   *
   * Common use case would be to use `Function.prototype.apply`.
   *
   *  ```js
   *  function f(x, y, z) {}
   *  var args = [1, 2, 3];
   *  f.apply(null, args);
   *  ```
   *
   * With `spread` this example can be re-written.
   *
   *  ```js
   *  spread(function(x, y, z) {})([1, 2, 3]);
   *  ```
   *
   * @param {Function} callback
   * @returns {Function}
   */
  var spread = function spread(callback) {
    return function wrap(arr) {
      return callback.apply(null, arr);
    };
  };

  /**
   * Determines whether the payload is an error thrown by Axios
   *
   * @param {*} payload The value to test
   * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
   */
  var isAxiosError = function isAxiosError(payload) {
    return typeof payload === 'object' && payload.isAxiosError === true;
  };

  var utils = utils$d;
  var bind = bind$2;
  var Axios = Axios_1;
  var mergeConfig = mergeConfig$2;
  var defaults = defaults_1;

  /**
   * Create an instance of Axios
   *
   * @param {Object} defaultConfig The default config for the instance
   * @return {Axios} A new instance of Axios
   */
  function createInstance(defaultConfig) {
    var context = new Axios(defaultConfig);
    var instance = bind(Axios.prototype.request, context);

    // Copy axios.prototype to instance
    utils.extend(instance, Axios.prototype, context);

    // Copy context to instance
    utils.extend(instance, context);

    // Factory for creating new instances
    instance.create = function create(instanceConfig) {
      return createInstance(mergeConfig(defaultConfig, instanceConfig));
    };

    return instance;
  }

  // Create the default instance to be exported
  var axios$1 = createInstance(defaults);

  // Expose Axios class to allow class inheritance
  axios$1.Axios = Axios;

  // Expose Cancel & CancelToken
  axios$1.Cancel = Cancel_1;
  axios$1.CancelToken = CancelToken_1;
  axios$1.isCancel = isCancel$1;
  axios$1.VERSION = data.version;

  // Expose all/spread
  axios$1.all = function all(promises) {
    return Promise.all(promises);
  };
  axios$1.spread = spread;

  // Expose isAxiosError
  axios$1.isAxiosError = isAxiosError;

  axios$2.exports = axios$1;

  // Allow use of default import syntax in TypeScript
  axios$2.exports.default = axios$1;

  var axios = axios$2.exports;

  var Component = function Component() {
    React.useEffect(function () {
      axios.get('https://alibaba.github.io/dawn/middleware.yml');
    }, []);
    return /*#__PURE__*/ React__default['default'].createElement(Button, null, 'Test');
  };

  var isType$2 = function (type) {
    return function (obj) {
      return getType(obj) === '[object ' + type + ']';
    };
  };
  var getType = function (obj) {
    return Object.prototype.toString.call(obj);
  };
  var isFn$2 = function (val) {
    return typeof val === 'function';
  };
  var isArr$2 = Array.isArray;
  var isPlainObj$1 = isType$2('Object');
  var isStr$1 = isType$2('String');
  var isBool = isType$2('Boolean');
  var isNum$1 = isType$2('Number');
  var isNumberLike$1 = function (index) {
    return isNum$1(index) || /^\d+$/.test(index);
  };
  var isObj$1 = function (val) {
    return typeof val === 'object';
  };

  var toArr$1 = function (val) {
    return isArr$2(val) ? val : val ? [val] : [];
  };
  function each(val, iterator, revert) {
    if (isArr$2(val) || isStr$1(val)) {
      if (revert) {
        for (var i = val.length - 1; i >= 0; i--) {
          if (iterator(val[i], i) === false) {
            return;
          }
        }
      } else {
        for (var i = 0; i < val.length; i++) {
          if (iterator(val[i], i) === false) {
            return;
          }
        }
      }
    } else if (isObj$1(val)) {
      var key = void 0;
      for (key in val) {
        if (Object.hasOwnProperty.call(val, key)) {
          if (iterator(val[key], key) === false) {
            return;
          }
        }
      }
    }
  }

  /* istanbul ignore next */
  function globalSelf$1() {
    try {
      if (typeof self !== 'undefined') {
        return self;
      }
    } catch (e) {}
    try {
      if (typeof window !== 'undefined') {
        return window;
      }
    } catch (e) {}
    try {
      if (typeof global !== 'undefined') {
        return global;
      }
    } catch (e) {}
    return Function('return this')();
  }
  var globalThisPolyfill$1 = globalSelf$1();

  var instOf = function (value, cls) {
    if (isFn$2(cls)) return value instanceof cls;
    if (isStr$1(cls)) return globalThisPolyfill$1[cls] ? value instanceof globalThisPolyfill$1[cls] : false;
    return false;
  };

  var isArray$1 = isArr$2;
  var keyList$1 = Object.keys;
  var hasProp$1 = Object.prototype.hasOwnProperty;
  /* eslint-disable */
  function equal(a, b) {
    // fast-deep-equal index.js 2.0.1
    if (a === b) {
      return true;
    }
    if (a && b && typeof a === 'object' && typeof b === 'object') {
      var arrA = isArray$1(a);
      var arrB = isArray$1(b);
      var i = void 0;
      var length_1;
      var key = void 0;
      if (arrA && arrB) {
        length_1 = a.length;
        if (length_1 !== b.length) {
          return false;
        }
        for (i = length_1; i-- !== 0; ) {
          if (!equal(a[i], b[i])) {
            return false;
          }
        }
        return true;
      }
      if (arrA !== arrB) {
        return false;
      }
      var momentA = a && a._isAMomentObject;
      var momentB = b && b._isAMomentObject;
      if (momentA !== momentB) return false;
      if (momentA && momentB) return a.isSame(b);
      var immutableA = a && a.toJS;
      var immutableB = b && b.toJS;
      if (immutableA !== immutableB) return false;
      if (immutableA) return a.is ? a.is(b) : a === b;
      var dateA = instOf(a, 'Date');
      var dateB = instOf(b, 'Date');
      if (dateA !== dateB) {
        return false;
      }
      if (dateA && dateB) {
        return a.getTime() === b.getTime();
      }
      var regexpA = instOf(a, 'RegExp');
      var regexpB = instOf(b, 'RegExp');
      if (regexpA !== regexpB) {
        return false;
      }
      if (regexpA && regexpB) {
        return a.toString() === b.toString();
      }
      var urlA = instOf(a, 'URL');
      var urlB = instOf(b, 'URL');
      if (urlA !== urlB) {
        return false;
      }
      if (urlA && urlB) {
        return a.href === b.href;
      }
      var schemaA = a && a.toJSON;
      var schemaB = b && b.toJSON;
      if (schemaA !== schemaB) return false;
      if (schemaA && schemaB) return equal(a.toJSON(), b.toJSON());
      var keys = keyList$1(a);
      length_1 = keys.length;
      if (length_1 !== keyList$1(b).length) {
        return false;
      }
      for (i = length_1; i-- !== 0; ) {
        if (!hasProp$1.call(b, keys[i])) {
          return false;
        }
      }
      // end fast-deep-equal
      // Custom handling for React
      for (i = length_1; i-- !== 0; ) {
        key = keys[i];
        if (key === '_owner' && a.$$typeof) {
          // React-specific: avoid traversing React elements' _owner.
          //  _owner contains circular references
          // and is not needed when comparing the actual elements (and not their owners)
          // .$$typeof and ._store on just reasonable markers of a react element
          continue;
        } else {
          // all other properties should be traversed as usual
          if (!equal(a[key], b[key])) {
            return false;
          }
        }
      }
      // fast-deep-equal index.js 2.0.1
      return true;
    }
    return a !== a && b !== b;
  }
  // end fast-deep-equal
  var isEqual$1 = function exportedEqual(a, b) {
    try {
      return equal(a, b);
    } catch (error) {
      /* istanbul ignore next */
      if ((error.message && error.message.match(/stack|recursion/i)) || error.number === -2146828260) {
        // warn on circular references, don't crash
        // browsers give this different errors name and messages:
        // chrome/safari: "RangeError", "Maximum call stack size exceeded"
        // firefox: "InternalError", too much recursion"
        // edge: "Error", "Out of stack space"
        console.warn('Warning: react-fast-compare does not handle circular references.', error.name, error.message);
        return false;
      }
      // some other error. we should definitely know about these
      /* istanbul ignore next */
      throw error;
    }
  };

  var __assign$s =
    (undefined && undefined.__assign) ||
    function () {
      __assign$s =
        Object.assign ||
        function (t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
      return __assign$s.apply(this, arguments);
    };
  var clone = function (values) {
    if (Array.isArray(values)) {
      var res_1 = [];
      values.forEach(function (item) {
        res_1.push(clone(item));
      });
      return res_1;
    } else if (isPlainObj$1(values)) {
      if ('$$typeof' in values && '_owner' in values) {
        return values;
      }
      if (values['_isAMomentObject']) {
        return values;
      }
      if (values['_isJSONSchemaObject']) {
        return values;
      }
      if (isFn$2(values['toJS'])) {
        return values['toJS']();
      }
      if (isFn$2(values['toJSON'])) {
        return values['toJSON']();
      }
      var res = {};
      for (var key in values) {
        if (Object.hasOwnProperty.call(values, key)) {
          res[key] = clone(values[key]);
        }
      }
      return res;
    } else {
      return values;
    }
  };

  var has = Object.prototype.hasOwnProperty;
  var toString$1 = Object.prototype.toString;
  var isValid$4 = function (val) {
    return val !== undefined && val !== null;
  };
  function isEmpty(val, strict) {
    if (strict === void 0) {
      strict = false;
    }
    // Null and Undefined...
    if (val == null) {
      return true;
    }
    // Booleans...
    if (typeof val === 'boolean') {
      return false;
    }
    // Numbers...
    if (typeof val === 'number') {
      return false;
    }
    // Strings...
    if (typeof val === 'string') {
      return val.length === 0;
    }
    // Functions...
    if (typeof val === 'function') {
      return val.length === 0;
    }
    // Arrays...
    if (Array.isArray(val)) {
      if (val.length === 0) {
        return true;
      }
      for (var i = 0; i < val.length; i++) {
        if (strict) {
          if (val[i] !== undefined && val[i] !== null) {
            return false;
          }
        } else {
          if (val[i] !== undefined && val[i] !== null && val[i] !== '' && val[i] !== 0) {
            return false;
          }
        }
      }
      return true;
    }
    // Errors...
    if (instOf(val, 'Error')) {
      return val.message === '';
    }
    // Objects...
    if (val.toString === toString$1) {
      switch (val.toString()) {
        // Maps, Sets, Files and Errors...
        case '[object File]':
        case '[object Map]':
        case '[object Set]': {
          return val.size === 0;
        }
        // Plain objects...
        case '[object Object]': {
          for (var key in val) {
            if (has.call(val, key)) {
              return false;
            }
          }
          return true;
        }
      }
    }
    // Anything else...
    return false;
  }

  /*! *****************************************************************************
	Copyright (c) Microsoft Corporation.

	Permission to use, copy, modify, and/or distribute this software for any
	purpose with or without fee is hereby granted.

	THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
	REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
	AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
	INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
	LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
	OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
	PERFORMANCE OF THIS SOFTWARE.
	***************************************************************************** */

  var __assign$r = function () {
    __assign$r =
      Object.assign ||
      function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
      };
    return __assign$r.apply(this, arguments);
  };

  /**
   * Source: ftp://ftp.unicode.org/Public/UCD/latest/ucd/SpecialCasing.txt
   */
  /**
   * Lower case as a function.
   */
  function lowerCase(str) {
    return str.toLowerCase();
  }

  // Support camel case ("camelCase" -> "camel Case" and "CAMELCase" -> "CAMEL Case").
  var DEFAULT_SPLIT_REGEXP = [/([a-z0-9])([A-Z])/g, /([A-Z])([A-Z][a-z])/g];
  // Remove all non-word characters.
  var DEFAULT_STRIP_REGEXP = /[^A-Z0-9]+/gi;
  /**
   * Normalize the string into something other libraries can manipulate easier.
   */
  function noCase(input, options) {
    if (options === void 0) {
      options = {};
    }
    var _a = options.splitRegexp,
      splitRegexp = _a === void 0 ? DEFAULT_SPLIT_REGEXP : _a,
      _b = options.stripRegexp,
      stripRegexp = _b === void 0 ? DEFAULT_STRIP_REGEXP : _b,
      _c = options.transform,
      transform = _c === void 0 ? lowerCase : _c,
      _d = options.delimiter,
      delimiter = _d === void 0 ? ' ' : _d;
    var result = replace(replace(input, splitRegexp, '$1\0$2'), stripRegexp, '\0');
    var start = 0;
    var end = result.length;
    // Trim the delimiter from around the output string.
    while (result.charAt(start) === '\0') start++;
    while (result.charAt(end - 1) === '\0') end--;
    // Transform each token independently.
    return result.slice(start, end).split('\0').map(transform).join(delimiter);
  }
  /**
   * Replace `re` in the input string with the replacement value.
   */
  function replace(input, re, value) {
    if (re instanceof RegExp) return input.replace(re, value);
    return re.reduce(function (input, re) {
      return input.replace(re, value);
    }, input);
  }

  function pascalCaseTransform(input, index) {
    var firstChar = input.charAt(0);
    var lowerChars = input.substr(1).toLowerCase();
    if (index > 0 && firstChar >= '0' && firstChar <= '9') {
      return '_' + firstChar + lowerChars;
    }
    return '' + firstChar.toUpperCase() + lowerChars;
  }
  function pascalCase(input, options) {
    if (options === void 0) {
      options = {};
    }
    return noCase(input, __assign$r({ delimiter: '', transform: pascalCaseTransform }, options));
  }

  // ansiRegex
  var ansiRegex = function () {
    var pattern = [
      '[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:[a-zA-Z\\d]*(?:;[a-zA-Z\\d]*)*)?\\u0007)',
      '(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PRZcf-ntqry=><~]))',
    ].join('|');
    return new RegExp(pattern, 'g');
  };
  // astralRegex
  var regex = '[\uD800-\uDBFF][\uDC00-\uDFFF]';
  var astralRegex = function (opts) {
    return opts && opts.exact ? new RegExp('^' + regex + '$') : new RegExp(regex, 'g');
  };
  // stripAnsi
  var stripAnsi = function (input) {
    return typeof input === 'string' ? input.replace(ansiRegex(), '') : input;
  };
  var stringLength = function (input) {
    return stripAnsi(input).replace(astralRegex(), ' ').length;
  };

  var __assign$q =
    (undefined && undefined.__assign) ||
    function () {
      __assign$q =
        Object.assign ||
        function (t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
      return __assign$q.apply(this, arguments);
    };
  var ContextType = function (flag, props) {
    return __assign$q({ flag: flag }, props);
  };
  var bracketContext = ContextType('[]');
  var bracketArrayContext = ContextType('[\\d]');
  var bracketDContext = ContextType('[[]]');
  var parenContext = ContextType('()');
  var braceContext = ContextType('{}');
  var destructorContext = ContextType('{x}');

  var __assign$p =
    (undefined && undefined.__assign) ||
    function () {
      __assign$p =
        Object.assign ||
        function (t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
      return __assign$p.apply(this, arguments);
    };
  var TokenType = function (flag, props) {
    return __assign$p({ flag: flag }, props);
  };
  var nameTok = TokenType('name', {
    expectNext: function (next) {
      if (this.includesContext(destructorContext)) {
        return next === nameTok || next === commaTok || next === bracketRTok || next === braceRTok || next === colonTok;
      }
      return (
        next === dotTok ||
        next === commaTok ||
        next === eofTok ||
        next === bracketRTok ||
        next === parenRTok ||
        next === colonTok ||
        next === expandTok ||
        next === bracketLTok
      );
    },
  });
  var starTok = TokenType('*', {
    expectNext: function (next) {
      return (
        next === dotTok ||
        next === parenLTok ||
        next === bracketLTok ||
        next === eofTok ||
        next === commaTok ||
        next === parenRTok
      );
    },
  });
  var dbStarTok = TokenType('**', {
    expectNext: function (next) {
      return (
        next === dotTok ||
        next === parenLTok ||
        next === bracketLTok ||
        next === eofTok ||
        next === commaTok ||
        next === parenRTok
      );
    },
  });
  var dotTok = TokenType('.', {
    expectNext: function (next) {
      return (
        next === dotTok ||
        next === nameTok ||
        next === bracketDLTok ||
        next === starTok ||
        next === dbStarTok ||
        next === bracketLTok ||
        next === braceLTok ||
        next === eofTok
      );
    },
    expectPrev: function (prev) {
      return (
        prev === dotTok ||
        prev === nameTok ||
        prev === bracketDRTok ||
        prev === starTok ||
        prev === parenRTok ||
        prev === bracketRTok ||
        prev === expandTok ||
        prev === braceRTok
      );
    },
  });
  var bangTok = TokenType('!', {
    expectNext: function (next) {
      return next === nameTok || next === bracketDLTok;
    },
  });
  var colonTok = TokenType(':', {
    expectNext: function (next) {
      if (this.includesContext(destructorContext)) {
        return next === nameTok || next === braceLTok || next === bracketLTok;
      }
      return next === nameTok || next === bracketDLTok || next === bracketRTok;
    },
  });
  var braceLTok = TokenType('{', {
    expectNext: function (next) {
      return next === nameTok;
    },
    expectPrev: function (prev) {
      if (this.includesContext(destructorContext)) {
        return prev === colonTok || prev === commaTok || prev === bracketLTok;
      }
      return prev === dotTok || prev === colonTok || prev === parenLTok;
    },
    updateContext: function () {
      this.state.context.push(braceContext);
    },
  });
  var braceRTok = TokenType('}', {
    expectNext: function (next) {
      if (this.includesContext(destructorContext)) {
        return next === commaTok || next === braceRTok || next === eofTok || next === bracketRTok;
      }
      return next === dotTok || next === eofTok || next === commaTok;
    },
    expectPrev: function (prev) {
      return prev === nameTok || prev === braceRTok || prev === bracketRTok;
    },
    updateContext: function () {
      this.state.context.pop(braceContext);
    },
  });
  var bracketLTok = TokenType('[', {
    expectNext: function (next) {
      if (this.includesContext(destructorContext)) {
        return next === nameTok || next === bracketLTok || next === braceLTok || next === bracketRTok;
      }
      return (
        next === nameTok ||
        next === bracketDLTok ||
        next === colonTok ||
        next === bracketLTok ||
        next === ignoreTok ||
        next === bracketRTok
      );
    },
    expectPrev: function (prev) {
      if (this.includesContext(destructorContext)) {
        return prev === colonTok || prev === commaTok || prev === bracketLTok;
      }
      return (
        prev === starTok ||
        prev === bracketLTok ||
        prev === dotTok ||
        prev === nameTok ||
        prev === parenLTok ||
        prev == commaTok
      );
    },
    updateContext: function () {
      this.state.context.push(bracketContext);
    },
  });
  var bracketRTok = TokenType(']', {
    expectNext: function (next) {
      if (this.includesContext(destructorContext)) {
        return next === commaTok || next === braceRTok || next === bracketRTok || next === eofTok;
      }
      return next === dotTok || next === eofTok || next === commaTok || next === parenRTok || next === bracketRTok;
    },
    updateContext: function () {
      if (this.includesContext(bracketArrayContext)) return;
      if (!this.includesContext(bracketContext)) throw this.unexpect();
      this.state.context.pop();
    },
  });
  var bracketDLTok = TokenType('[[', {
    updateContext: function () {
      this.state.context.push(bracketDContext);
    },
  });
  var bracketDRTok = TokenType(']]', {
    updateContext: function () {
      if (this.curContext() !== bracketDContext) throw this.unexpect();
      this.state.context.pop();
    },
  });
  var parenLTok = TokenType('(', {
    expectNext: function (next) {
      return (
        next === nameTok || next === bracketDLTok || next === braceLTok || next === bangTok || next === bracketLTok
      );
    },
    expectPrev: function (prev) {
      return prev === starTok;
    },
    updateContext: function () {
      this.state.context.push(parenContext);
    },
  });
  var parenRTok = TokenType(')', {
    expectNext: function (next) {
      return next === dotTok || next === eofTok || next === commaTok || next === parenRTok;
    },
    updateContext: function () {
      if (this.curContext() !== parenContext) throw this.unexpect();
      this.state.context.pop();
    },
  });
  var commaTok = TokenType(',', {
    expectNext: function (next) {
      return next === nameTok || next === bracketDLTok || next === bracketLTok || next === braceLTok;
    },
  });
  var ignoreTok = TokenType('ignore', {
    expectNext: function (next) {
      return next === bracketDRTok;
    },
    expectPrev: function (prev) {
      return prev == bracketDLTok;
    },
  });
  var expandTok = TokenType('expandTok', {
    expectNext: function (next) {
      return next === dotTok || next === eofTok || next === commaTok || next === parenRTok;
    },
  });
  var eofTok = TokenType('eof');

  var nonASCIIwhitespace = /[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/;
  var fullCharCodeAtPos = function (input, pos) {
    if (String.fromCharCode) return input.codePointAt(pos);
    var code = input.charCodeAt(pos);
    if (code <= 0xd7ff || code >= 0xe000) return code;
    var next = input.charCodeAt(pos + 1);
    return (code << 10) + next - 0x35fdc00;
  };
  var isRewordCode = function (code) {
    return (
      code === 42 ||
      code === 46 ||
      code === 33 ||
      code === 91 ||
      code === 93 ||
      code === 40 ||
      code === 41 ||
      code === 44 ||
      code === 58 ||
      code === 126 ||
      code === 123 ||
      code === 125
    );
  };
  var getError = function (message, props) {
    var err = new Error(message);
    Object.assign(err, props);
    return err;
  };
  var slice = function (string, start, end) {
    var str = '';
    for (var i = start; i < end; i++) {
      var ch = string.charAt(i);
      if (ch !== '\\') {
        str += ch;
      }
    }
    return str;
  };
  var Tokenizer = /** @class */ (function () {
    function Tokenizer(input) {
      this.input = input;
      this.state = {
        context: [],
        type: null,
        pos: 0,
      };
      this.type_ = null;
    }
    Tokenizer.prototype.curContext = function () {
      return this.state.context[this.state.context.length - 1];
    };
    Tokenizer.prototype.includesContext = function (context) {
      for (var len = this.state.context.length - 1; len >= 0; len--) {
        if (this.state.context[len] === context) {
          return true;
        }
      }
      return false;
    };
    Tokenizer.prototype.unexpect = function (type) {
      type = type || this.state.type;
      return getError('Unexpect token "' + type.flag + '" in ' + this.state.pos + ' char.', {
        pos: this.state.pos,
      });
    };
    Tokenizer.prototype.expectNext = function (type, next) {
      if (type && type.expectNext) {
        if (next && !type.expectNext.call(this, next)) {
          throw getError(
            'Unexpect token "' +
              next.flag +
              '" token should not be behind "' +
              type.flag +
              '" token.(' +
              this.state.pos +
              'th char)',
            {
              pos: this.state.pos,
            },
          );
        }
      }
    };
    Tokenizer.prototype.expectPrev = function (type, prev) {
      if (type && type.expectPrev) {
        if (prev && !type.expectPrev.call(this, prev)) {
          throw getError(
            'Unexpect token "' +
              type.flag +
              '" should not be behind "' +
              prev.flag +
              '"(' +
              this.state.pos +
              'th char).',
            {
              pos: this.state.pos,
            },
          );
        }
      }
    };
    Tokenizer.prototype.match = function (type) {
      return this.state.type === type;
    };
    Tokenizer.prototype.skipSpace = function () {
      if (this.curContext() === bracketDContext) return;
      loop: while (this.state.pos < this.input.length) {
        var ch = this.input.charCodeAt(this.state.pos);
        switch (ch) {
          case 32:
          case 160:
            ++this.state.pos;
            break;
          case 13:
            if (this.input.charCodeAt(this.state.pos + 1) === 10) {
              ++this.state.pos;
            }
          case 10:
          case 8232:
          case 8233:
            ++this.state.pos;
            break;
          default:
            if ((ch > 8 && ch < 14) || (ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch)))) {
              ++this.state.pos;
            } else {
              break loop;
            }
        }
      }
    };
    Tokenizer.prototype.next = function () {
      this.type_ = this.state.type;
      if (this.input.length <= this.state.pos) {
        return this.finishToken(eofTok);
      }
      this.skipSpace();
      this.readToken(this.getCode(), this.state.pos > 0 ? this.getCode(this.state.pos - 1) : -Infinity);
    };
    Tokenizer.prototype.getCode = function (pos) {
      if (pos === void 0) {
        pos = this.state.pos;
      }
      return fullCharCodeAtPos(this.input, pos);
    };
    Tokenizer.prototype.eat = function (type) {
      if (this.match(type)) {
        this.next();
        return true;
      } else {
        return false;
      }
    };
    Tokenizer.prototype.readKeyWord = function () {
      var startPos = this.state.pos,
        string = '';
      while (true) {
        var code = this.getCode();
        var prevCode = this.getCode(this.state.pos - 1);
        if (this.input.length === this.state.pos) {
          string = slice(this.input, startPos, this.state.pos + 1);
          break;
        }
        if (!isRewordCode(code) || prevCode === 92) {
          if (code === 32 || code === 160 || code === 10 || code === 8232 || code === 8233) {
            string = slice(this.input, startPos, this.state.pos);
            break;
          }
          if (code === 13 && this.input.charCodeAt(this.state.pos + 1) === 10) {
            string = slice(this.input, startPos, this.state.pos);
            break;
          }
          if ((code > 8 && code < 14) || (code >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(code)))) {
            string = slice(this.input, startPos, this.state.pos);
            break;
          }
          this.state.pos++;
        } else {
          string = slice(this.input, startPos, this.state.pos);
          break;
        }
      }
      this.finishToken(nameTok, string);
    };
    Tokenizer.prototype.readIngoreString = function () {
      var startPos = this.state.pos,
        prevCode,
        string = '';
      while (true) {
        var code = this.getCode();
        if (this.state.pos >= this.input.length) break;
        if ((code === 91 || code === 93) && prevCode === 92) {
          this.state.pos++;
          prevCode = '';
        } else if (code == 93 && prevCode === 93) {
          string = this.input.slice(startPos, this.state.pos - 1).replace(/\\([\[\]])/g, '$1');
          this.state.pos++;
          break;
        } else {
          this.state.pos++;
          prevCode = code;
        }
      }
      this.finishToken(ignoreTok, string);
      this.finishToken(bracketDRTok);
    };
    Tokenizer.prototype.finishToken = function (type, value) {
      var preType = this.state.type;
      this.state.type = type;
      if (value !== undefined) this.state.value = value;
      this.expectNext(preType, type);
      this.expectPrev(type, preType);
      if (type.updateContext) {
        type.updateContext.call(this, preType);
      }
    };
    Tokenizer.prototype.readToken = function (code, prevCode) {
      if (prevCode === 92) {
        return this.readKeyWord();
      }
      if (this.input.length <= this.state.pos) {
        this.finishToken(eofTok);
      } else if (this.curContext() === bracketDContext) {
        this.readIngoreString();
      } else if (code === 123) {
        this.state.pos++;
        this.finishToken(braceLTok);
      } else if (code === 125) {
        this.state.pos++;
        this.finishToken(braceRTok);
      } else if (code === 42) {
        this.state.pos++;
        if (this.getCode() === 42) {
          this.state.pos++;
          return this.finishToken(dbStarTok);
        }
        this.finishToken(starTok);
      } else if (code === 33) {
        this.state.pos++;
        this.finishToken(bangTok);
      } else if (code === 46) {
        this.state.pos++;
        this.finishToken(dotTok);
      } else if (code === 91) {
        this.state.pos++;
        if (this.getCode() === 91) {
          this.state.pos++;
          return this.finishToken(bracketDLTok);
        }
        this.finishToken(bracketLTok);
      } else if (code === 126) {
        this.state.pos++;
        this.finishToken(expandTok);
      } else if (code === 93) {
        this.state.pos++;
        this.finishToken(bracketRTok);
      } else if (code === 40) {
        this.state.pos++;
        this.finishToken(parenLTok);
      } else if (code === 41) {
        this.state.pos++;
        this.finishToken(parenRTok);
      } else if (code === 44) {
        this.state.pos++;
        this.finishToken(commaTok);
      } else if (code === 58) {
        this.state.pos++;
        this.finishToken(colonTok);
      } else {
        this.readKeyWord();
      }
    };
    return Tokenizer;
  })();

  var isType$1 = function (type) {
    return function (obj) {
      return obj && obj.type === type;
    };
  };
  var isIdentifier = isType$1('Identifier');
  var isIgnoreExpression = isType$1('IgnoreExpression');
  var isDotOperator = isType$1('DotOperator');
  var isWildcardOperator = isType$1('WildcardOperator');
  var isExpandOperator = isType$1('ExpandOperator');
  var isGroupExpression = isType$1('GroupExpression');
  var isRangeExpression = isType$1('RangeExpression');
  var isDestructorExpression = isType$1('DestructorExpression');
  var isObjectPattern = isType$1('ObjectPattern');
  var isArrayPattern = isType$1('ArrayPattern');

  var toString = Object.prototype.toString;
  var isType = function (type) {
    return function (obj) {
      return toString.call(obj) === '[object ' + type + ']';
    };
  };
  var isFn$1 = isType('Function');
  var isArr$1 = Array.isArray || isType('Array');
  var isStr = isType('String');
  var isNum = isType('Number');
  var isObj = function (val) {
    return typeof val === 'object';
  };
  var isRegExp = isType('RegExp');
  var isNumberLike = function (t) {
    return isNum(t) || /^(\d+)(\.\d+)?$/.test(t);
  };
  var isArray = isArr$1;
  var keyList = Object.keys;
  var hasProp = Object.prototype.hasOwnProperty;
  var toArr = function (val) {
    return Array.isArray(val) ? val : val !== undefined ? [val] : [];
  };
  var isEqual = function (a, b) {
    if (a === b) {
      return true;
    }
    if (a && b && typeof a === 'object' && typeof b === 'object') {
      var arrA = isArray(a);
      var arrB = isArray(b);
      var i = void 0;
      var length_1;
      var key = void 0;
      if (arrA && arrB) {
        length_1 = a.length;
        if (length_1 !== b.length) {
          return false;
        }
        for (i = length_1; i-- !== 0; ) {
          if (!isEqual(a[i], b[i])) {
            return false;
          }
        }
        return true;
      }
      if (arrA !== arrB) {
        return false;
      }
      var keys = keyList(a);
      length_1 = keys.length;
      if (length_1 !== keyList(b).length) {
        return false;
      }
      for (i = length_1; i-- !== 0; ) {
        if (!hasProp.call(b, keys[i])) {
          return false;
        }
      }
      for (i = length_1; i-- !== 0; ) {
        key = keys[i];
        if (!isEqual(a[key], b[key])) {
          return false;
        }
      }
      return true;
    }
    return a !== a && b !== b;
  };
  var isSegmentEqual = function (a, b) {
    a = typeof a === 'symbol' ? a : '' + a;
    b = typeof b === 'symbol' ? b : '' + b;
    return a === b;
  };

  var DestructorCache = new Map();
  var isValid$3 = function (val) {
    return val !== undefined && val !== null;
  };
  var getDestructor = function (source) {
    return DestructorCache.get(source);
  };
  var setDestructor = function (source, rules) {
    DestructorCache.set(source, rules);
  };
  var parseDestructorRules = function (node) {
    var rules = [];
    if (isObjectPattern(node)) {
      var index_1 = 0;
      node.properties.forEach(function (child) {
        rules[index_1] = {
          path: [],
        };
        rules[index_1].key = child.key.value;
        rules[index_1].path.push(child.key.value);
        if (isIdentifier(child.value)) {
          rules[index_1].key = child.value.value;
        }
        var basePath = rules[index_1].path;
        var childRules = parseDestructorRules(child.value);
        var k = index_1;
        childRules.forEach(function (rule) {
          if (rules[k]) {
            rules[k].key = rule.key;
            rules[k].path = basePath.concat(rule.path);
          } else {
            rules[k] = {
              key: rule.key,
              path: basePath.concat(rule.path),
            };
          }
          k++;
        });
        if (k > index_1) {
          index_1 = k;
        } else {
          index_1++;
        }
      });
      return rules;
    } else if (isArrayPattern(node)) {
      var index_2 = 0;
      node.elements.forEach(function (child, key) {
        rules[index_2] = {
          path: [],
        };
        rules[index_2].key = key;
        rules[index_2].path.push(key);
        if (isIdentifier(child)) {
          rules[index_2].key = child.value;
        }
        var basePath = rules[index_2].path;
        var childRules = parseDestructorRules(child);
        var k = index_2;
        childRules.forEach(function (rule) {
          if (rules[k]) {
            rules[k].key = rule.key;
            rules[k].path = basePath.concat(rule.path);
          } else {
            rules[k] = {
              key: rule.key,
              path: basePath.concat(rule.path),
            };
          }
          k++;
        });
        if (k > index_2) {
          index_2 = k;
        } else {
          index_2++;
        }
      });
      return rules;
    }
    if (isDestructorExpression(node)) {
      return parseDestructorRules(node.value);
    }
    return rules;
  };
  var setInByDestructor = function (source, rules, value, mutators) {
    rules.forEach(function (_a) {
      var key = _a.key,
        path = _a.path;
      mutators.setIn([key], source, mutators.getIn(path, value));
    });
  };
  var getInByDestructor = function (source, rules, mutators) {
    var response = {};
    if (rules.length) {
      if (isNum(rules[0].path[0])) {
        response = [];
      }
    }
    source = isValid$3(source) ? source : {};
    rules.forEach(function (_a) {
      var key = _a.key,
        path = _a.path;
      mutators.setIn(path, response, source[key]);
    });
    return response;
  };
  var deleteInByDestructor = function (source, rules, mutators) {
    rules.forEach(function (_a) {
      var key = _a.key;
      mutators.deleteIn([key], source);
    });
  };
  var existInByDestructor = function (source, rules, start, mutators) {
    return rules.every(function (_a) {
      var key = _a.key;
      return mutators.existIn([key], source, start);
    });
  };

  var __extends$5 =
    (undefined && undefined.__extends) ||
    (function () {
      var extendStatics = function (d, b) {
        extendStatics =
          Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array &&
            function (d, b) {
              d.__proto__ = b;
            }) ||
          function (d, b) {
            for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
          };
        return extendStatics(d, b);
      };
      return function (d, b) {
        if (typeof b !== 'function' && b !== null)
          throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
      };
    })();
  var createTreeBySegments = function (segments, afterNode) {
    if (segments === void 0) {
      segments = [];
    }
    var segLen = segments.length;
    var build = function (start) {
      if (start === void 0) {
        start = 0;
      }
      var after = start < segLen - 1 ? build(start + 1) : afterNode;
      var dot = after && {
        type: 'DotOperator',
        after: after,
      };
      return {
        type: 'Identifier',
        value: segments[start],
        after: dot,
      };
    };
    return build();
  };
  var calculate = function (a, b, operator) {
    if (isNumberLike(a) && isNumberLike(b)) {
      if (operator === '+') return String(Number(a) + Number(b));
      if (operator === '-') return String(Number(a) - Number(b));
      if (operator === '*') return String(Number(a) * Number(b));
      if (operator === '/') return String(Number(a) / Number(b));
    } else {
      if (operator === '+') return String(a) + String(b);
      if (operator === '-') return 'NaN';
      if (operator === '*') return 'NaN';
      if (operator === '/') return 'NaN';
    }
    return String(Number(b));
  };
  var Parser = /** @class */ (function (_super) {
    __extends$5(Parser, _super);
    function Parser(input, base) {
      var _this = _super.call(this, input) || this;
      _this.base = base;
      return _this;
    }
    Parser.prototype.parse = function () {
      var node;
      this.data = {
        segments: [],
      };
      if (!this.eat(eofTok)) {
        this.next();
        node = this.parseAtom(this.state.type);
      }
      this.data.tree = node;
      return node;
    };
    Parser.prototype.append = function (parent, node) {
      if (parent && node) {
        parent.after = node;
      }
    };
    Parser.prototype.parseAtom = function (type) {
      switch (type) {
        case braceLTok:
        case bracketLTok:
          if (this.includesContext(destructorContext)) {
            if (type === braceLTok) {
              return this.parseObjectPattern();
            } else {
              return this.parseArrayPattern();
            }
          }
          return this.parseDestructorExpression();
        case nameTok:
          return this.parseIdentifier();
        case expandTok:
          return this.parseExpandOperator();
        case dbStarTok:
        case starTok:
          return this.parseWildcardOperator();
        case bracketDLTok:
          return this.parseIgnoreExpression();
        case dotTok:
          return this.parseDotOperator();
      }
    };
    Parser.prototype.pushSegments = function (key) {
      this.data.segments.push(key);
    };
    Parser.prototype.parseIdentifier = function () {
      var node = {
        type: 'Identifier',
        value: this.state.value,
      };
      var hasNotInDestructor =
        !this.includesContext(destructorContext) && !this.isMatchPattern && !this.isWildMatchPattern;
      this.next();
      if (this.includesContext(bracketArrayContext)) {
        if (this.state.type !== bracketRTok) {
          throw this.unexpect();
        } else {
          this.state.context.pop();
          this.next();
        }
      } else if (hasNotInDestructor) {
        this.pushSegments(node.value);
      }
      if (this.state.type === bracketLTok) {
        this.next();
        if (this.state.type !== nameTok) {
          throw this.unexpect();
        }
        this.state.context.push(bracketArrayContext);
        var isNumberKey = false;
        if (/^\d+$/.test(this.state.value)) {
          isNumberKey = true;
        }
        var value = this.state.value;
        this.pushSegments(isNumberKey ? Number(value) : value);
        var after = this.parseAtom(this.state.type);
        if (isNumberKey) {
          after.arrayIndex = true;
        }
        this.append(node, after);
      } else {
        this.append(node, this.parseAtom(this.state.type));
      }
      return node;
    };
    Parser.prototype.parseExpandOperator = function () {
      var node = {
        type: 'ExpandOperator',
      };
      this.isMatchPattern = true;
      this.isWildMatchPattern = true;
      this.data.segments = [];
      this.next();
      this.append(node, this.parseAtom(this.state.type));
      return node;
    };
    Parser.prototype.parseWildcardOperator = function () {
      var node = {
        type: 'WildcardOperator',
      };
      if (this.state.type === dbStarTok) {
        node.optional = true;
      }
      this.isMatchPattern = true;
      this.isWildMatchPattern = true;
      this.data.segments = [];
      this.next();
      if (this.state.type === parenLTok) {
        node.filter = this.parseGroupExpression(node);
      } else if (this.state.type === bracketLTok) {
        node.filter = this.parseRangeExpression(node);
      }
      this.append(node, this.parseAtom(this.state.type));
      return node;
    };
    Parser.prototype.parseDestructorExpression = function () {
      var _this = this;
      var node = {
        type: 'DestructorExpression',
      };
      this.state.context.push(destructorContext);
      var startPos = this.state.pos - 1;
      node.value = this.state.type === braceLTok ? this.parseObjectPattern() : this.parseArrayPattern();
      var endPos = this.state.pos;
      this.state.context.pop();
      node.source = this.input
        .substring(startPos, endPos)
        .replace(/\[\s*([\+\-\*\/])?\s*([^,\]\s]*)\s*\]/, function (match, operator, target) {
          if (_this.relative !== undefined) {
            if (operator) {
              if (target) {
                return calculate(_this.relative, target, operator);
              } else {
                return calculate(_this.relative, 1, operator);
              }
            } else {
              if (target) {
                return calculate(_this.relative, target, '+');
              } else {
                return String(_this.relative);
              }
            }
          }
          return match;
        })
        .replace(/\s*\.\s*/g, '')
        .replace(/\s*/g, '');
      if (this.relative === undefined) {
        setDestructor(node.source, parseDestructorRules(node));
      }
      this.relative = undefined;
      this.pushSegments(node.source);
      this.next();
      this.append(node, this.parseAtom(this.state.type));
      return node;
    };
    Parser.prototype.parseArrayPattern = function () {
      var node = {
        type: 'ArrayPattern',
        elements: [],
      };
      this.next();
      node.elements = this.parseArrayPatternElements();
      return node;
    };
    Parser.prototype.parseArrayPatternElements = function () {
      var nodes = [];
      while (this.state.type !== bracketRTok && this.state.type !== eofTok) {
        nodes.push(this.parseAtom(this.state.type));
        if (this.state.type === bracketRTok) {
          if (this.includesContext(destructorContext)) {
            this.next();
          }
          return nodes;
        }
        this.next();
      }
      return nodes;
    };
    Parser.prototype.parseObjectPattern = function () {
      var node = {
        type: 'ObjectPattern',
        properties: [],
      };
      this.next();
      node.properties = this.parseObjectProperties();
      return node;
    };
    Parser.prototype.parseObjectProperties = function () {
      var nodes = [];
      while (this.state.type !== braceRTok && this.state.type !== eofTok) {
        var node = {
          type: 'ObjectPatternProperty',
          key: this.parseAtom(this.state.type),
        };
        nodes.push(node);
        if (this.state.type === colonTok) {
          this.next();
          node.value = this.parseAtom(this.state.type);
        }
        if (this.state.type === braceRTok) {
          if (this.includesContext(destructorContext)) {
            this.next();
          }
          return nodes;
        }
        this.next();
      }
      return nodes;
    };
    Parser.prototype.parseDotOperator = function () {
      var node = {
        type: 'DotOperator',
      };
      var prevToken = this.type_;
      if (!prevToken && this.base) {
        if (this.base.isMatchPattern) {
          throw new Error('Base path must be an absolute path.');
        }
        this.data.segments = this.base.toArr();
        while (this.state.type === dotTok) {
          this.relative = this.data.segments.pop();
          this.next();
        }
        return createTreeBySegments(this.data.segments.slice(), this.parseAtom(this.state.type));
      } else {
        this.next();
      }
      this.append(node, this.parseAtom(this.state.type));
      return node;
    };
    Parser.prototype.parseIgnoreExpression = function () {
      this.next();
      var value = String(this.state.value).replace(/\s*/g, '');
      var node = {
        type: 'IgnoreExpression',
        value: value,
      };
      this.pushSegments(value);
      this.next();
      this.append(node, this.parseAtom(this.state.type));
      this.next();
      return node;
    };
    Parser.prototype.parseGroupExpression = function (parent) {
      var node = {
        type: 'GroupExpression',
        value: [],
      };
      this.isMatchPattern = true;
      this.data.segments = [];
      this.next();
      loop: while (true) {
        switch (this.state.type) {
          case commaTok:
            this.next();
            break;
          case bangTok:
            node.isExclude = true;
            this.haveExcludePattern = true;
            this.next();
            break;
          case eofTok:
            break loop;
          case parenRTok:
            break loop;
          default:
            node.value.push(this.parseAtom(this.state.type));
        }
      }
      this.next();
      this.append(parent, this.parseAtom(this.state.type));
      return node;
    };
    Parser.prototype.parseRangeExpression = function (parent) {
      var node = {
        type: 'RangeExpression',
      };
      this.next();
      this.isMatchPattern = true;
      this.data.segments = [];
      var start = false,
        hasColon = false;
      loop: while (true) {
        switch (this.state.type) {
          case colonTok:
            hasColon = true;
            start = true;
            this.next();
            break;
          case bracketRTok:
            if (!hasColon && !node.end) {
              node.end = node.start;
            }
            break loop;
          case commaTok:
            throw this.unexpect();
          case eofTok:
            break loop;
          default:
            if (!start) {
              node.start = this.parseAtom(this.state.type);
            } else {
              node.end = this.parseAtom(this.state.type);
            }
        }
      }
      this.next();
      this.append(parent, this.parseAtom(this.state.type));
      return node;
    };
    return Parser;
  })(Tokenizer);

  var isValid$2 = function (val) {
    return val !== undefined && val !== null && val !== '';
  };
  var Matcher = /** @class */ (function () {
    function Matcher(tree, record) {
      var _this = this;
      this.matchNext = function (node, path) {
        return node.after ? _this.matchAtom(path, node.after) : isValid$2(path[_this.pos]);
      };
      this.tree = tree;
      this.pos = 0;
      this.excluding = false;
      this.record = record;
      this.stack = [];
    }
    Matcher.prototype.currentElement = function (path) {
      return String(path[this.pos] || '').replace(/\s*/g, '');
    };
    Matcher.prototype.recordMatch = function (match) {
      var _this = this;
      return function () {
        var result = match();
        if (result) {
          if (_this.record && _this.record.score !== undefined) {
            _this.record.score++;
          }
        }
        return result;
      };
    };
    Matcher.prototype.matchIdentifier = function (path, node) {
      var _this = this;
      this.tail = node;
      if (isValid$2(path[this.pos + 1]) && !node.after) {
        if (this.stack.length) {
          for (var i = this.stack.length - 1; i >= 0; i--) {
            if (!this.stack[i].after || !this.stack[i].filter) {
              return false;
            }
          }
        } else {
          return false;
        }
      }
      var current;
      var next = function () {
        return _this.matchNext(node, path);
      };
      if (isExpandOperator(node.after)) {
        current = this.recordMatch(function () {
          return node.value === String(path[_this.pos]).substring(0, node.value.length);
        });
      } else {
        current = this.recordMatch(function () {
          return isEqual(String(node.value), String(path[_this.pos]));
        });
      }
      if (this.excluding) {
        if (node.after) {
          if (this.pos < path.length) {
            return current() && next();
          } else {
            if (node.after && isWildcardOperator(node.after.after)) {
              return true;
            }
            return false;
          }
        } else {
          if (this.pos >= path.length) {
            return true;
          }
          return current();
        }
      }
      return current() && next();
    };
    Matcher.prototype.matchIgnoreExpression = function (path, node) {
      return isEqual(node.value, this.currentElement(path)) && this.matchNext(node, path);
    };
    Matcher.prototype.matchDestructorExpression = function (path, node) {
      return isEqual(node.source, this.currentElement(path)) && this.matchNext(node, path);
    };
    Matcher.prototype.matchExpandOperator = function (path, node) {
      return this.matchAtom(path, node.after);
    };
    Matcher.prototype.matchWildcardOperator = function (path, node) {
      this.tail = node;
      this.stack.push(node);
      var matched = false;
      if (node.filter) {
        if (node.after) {
          matched = this.matchAtom(path, node.filter) && this.matchAtom(path, node.after);
        } else {
          matched = this.matchAtom(path, node.filter);
        }
      } else if (node.optional) {
        matched = true;
      } else {
        matched = this.matchNext(node, path);
      }
      this.stack.pop();
      return matched;
    };
    Matcher.prototype.matchGroupExpression = function (path, node) {
      var _this = this;
      var current = this.pos;
      this.excluding = !!node.isExclude;
      var method = this.excluding ? 'every' : 'some';
      var result = toArr(node.value)[method](function (_node) {
        _this.pos = current;
        return _this.excluding ? !_this.matchAtom(path, _node) : _this.matchAtom(path, _node);
      });
      this.excluding = false;
      return result;
    };
    Matcher.prototype.matchRangeExpression = function (path, node) {
      if (node.start) {
        if (node.end) {
          return path[this.pos] >= parseInt(node.start.value) && path[this.pos] <= parseInt(node.end.value);
        } else {
          return path[this.pos] >= parseInt(node.start.value);
        }
      } else {
        if (node.end) {
          return path[this.pos] <= parseInt(node.end.value);
        } else {
          return true;
        }
      }
    };
    Matcher.prototype.matchDotOperator = function (path, node) {
      this.pos++;
      return this.matchNext(node, path);
    };
    Matcher.prototype.matchAtom = function (path, node) {
      if (!node) {
        if (this.stack.length > 0) return true;
        if (isValid$2(path[this.pos + 1])) return false;
        if (this.pos == path.length - 1) return true;
      }
      if (isIdentifier(node)) {
        return this.matchIdentifier(path, node);
      } else if (isIgnoreExpression(node)) {
        return this.matchIgnoreExpression(path, node);
      } else if (isDestructorExpression(node)) {
        return this.matchDestructorExpression(path, node);
      } else if (isExpandOperator(node)) {
        return this.matchExpandOperator(path, node);
      } else if (isWildcardOperator(node)) {
        return this.matchWildcardOperator(path, node);
      } else if (isGroupExpression(node)) {
        return this.matchGroupExpression(path, node);
      } else if (isRangeExpression(node)) {
        return this.matchRangeExpression(path, node);
      } else if (isDotOperator(node)) {
        return this.matchDotOperator(path, node);
      }
      return true;
    };
    Matcher.prototype.match = function (path) {
      var matched = this.matchAtom(path, this.tree);
      if (!this.tail) return { matched: false };
      if (this.tail == this.tree && isWildcardOperator(this.tail)) {
        return { matched: true };
      }
      return { matched: matched, record: this.record };
    };
    Matcher.matchSegments = function (source, target, record) {
      var pos = 0;
      if (source.length !== target.length) return false;
      var match = function (pos) {
        var current = function () {
          var res = isSegmentEqual(source[pos], target[pos]);
          if (record && record.score !== undefined) {
            record.score++;
          }
          return res;
        };
        var next = function () {
          return pos < source.length - 1 ? match(pos + 1) : true;
        };
        return current() && next();
      };
      return { matched: match(pos), record: record };
    };
    return Matcher;
  })();

  var __read$a =
    (undefined && undefined.__read) ||
    function (o, n) {
      var m = typeof Symbol === 'function' && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o),
        r,
        ar = [],
        e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error: error };
      } finally {
        try {
          if (r && !r.done && (m = i['return'])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
  var __spreadArray$5 =
    (undefined && undefined.__spreadArray) ||
    function (to, from, pack) {
      if (pack || arguments.length === 2)
        for (var i = 0, l = from.length, ar; i < l; i++) {
          if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
          }
        }
      return to.concat(ar || Array.prototype.slice.call(from));
    };
  var pathCache = new Map();
  var isMatcher = Symbol('PATH_MATCHER');
  var isValid$1 = function (val) {
    return val !== undefined && val !== null;
  };
  var isAssignable = function (val) {
    return typeof val === 'object' || typeof val === 'function';
  };
  var isNumberIndex = function (val) {
    return isStr(val) ? /^\d+$/.test(val) : isNum(val);
  };
  var getIn$1 = function (segments, source) {
    for (var i = 0; i < segments.length; i++) {
      var index = segments[i];
      var rules = getDestructor(index);
      if (!rules) {
        if (!isValid$1(source)) {
          if (i !== segments.length - 1) {
            return source;
          }
          break;
        }
        source = source[index];
      } else {
        source = getInByDestructor(source, rules, { setIn: setIn, getIn: getIn$1 });
        break;
      }
    }
    return source;
  };
  var setIn = function (segments, source, value) {
    for (var i = 0; i < segments.length; i++) {
      var index = segments[i];
      var rules = getDestructor(index);
      if (!rules) {
        if (!isValid$1(source) || !isAssignable(source)) return;
        if (isArr$1(source) && !isNumberIndex(index)) {
          return;
        }
        if (!isValid$1(source[index])) {
          if (value === undefined) {
            return;
          }
          if (i < segments.length - 1) {
            source[index] = isNum(segments[i + 1]) ? [] : {};
          }
        }
        if (i === segments.length - 1) {
          source[index] = value;
        }
        source = source[index];
      } else {
        setInByDestructor(source, rules, value, { setIn: setIn, getIn: getIn$1 });
        break;
      }
    }
  };
  var deleteIn = function (segments, source) {
    for (var i = 0; i < segments.length; i++) {
      var index = segments[i];
      var rules = getDestructor(index);
      if (!rules) {
        if (i === segments.length - 1 && isValid$1(source)) {
          delete source[index];
          return;
        }
        if (!isValid$1(source) || !isAssignable(source)) return;
        source = source[index];
        if (!isObj(source)) {
          return;
        }
      } else {
        deleteInByDestructor(source, rules, {
          setIn: setIn,
          getIn: getIn$1,
          deleteIn: deleteIn,
        });
        break;
      }
    }
  };
  var hasOwnProperty$3 = Object.prototype.hasOwnProperty;
  var existIn = function (segments, source, start) {
    if (start instanceof Path) {
      start = start.length;
    }
    for (var i = start; i < segments.length; i++) {
      var index = segments[i];
      var rules = getDestructor(index);
      if (!rules) {
        if (i === segments.length - 1) {
          return hasOwnProperty$3.call(source, index);
        }
        if (!isValid$1(source) || !isAssignable(source)) return false;
        source = source[index];
        if (!isObj(source)) {
          return false;
        }
      } else {
        return existInByDestructor(source, rules, start, {
          setIn: setIn,
          getIn: getIn$1,
          deleteIn: deleteIn,
          existIn: existIn,
        });
      }
    }
  };
  var parse = function (pattern, base) {
    if (pattern instanceof Path) {
      return {
        entire: pattern.entire,
        segments: pattern.segments.slice(),
        isRegExp: false,
        isWildMatchPattern: pattern.isWildMatchPattern,
        isMatchPattern: pattern.isMatchPattern,
        haveExcludePattern: pattern.haveExcludePattern,
        tree: pattern.tree,
      };
    } else if (isStr(pattern)) {
      if (!pattern)
        return {
          entire: '',
          segments: [],
          isRegExp: false,
          isWildMatchPattern: false,
          haveExcludePattern: false,
          isMatchPattern: false,
        };
      var parser = new Parser(pattern, Path.parse(base));
      var tree = parser.parse();
      if (!parser.isMatchPattern) {
        var segments = parser.data.segments;
        return {
          entire: segments.join('.'),
          segments: segments,
          tree: tree,
          isRegExp: false,
          isWildMatchPattern: false,
          haveExcludePattern: false,
          isMatchPattern: false,
        };
      } else {
        return {
          entire: pattern,
          segments: [],
          isRegExp: false,
          isWildMatchPattern: parser.isWildMatchPattern,
          haveExcludePattern: parser.haveExcludePattern,
          isMatchPattern: true,
          tree: tree,
        };
      }
    } else if (isFn$1(pattern) && pattern[isMatcher]) {
      return parse(pattern['path']);
    } else if (isArr$1(pattern)) {
      return {
        entire: pattern.join('.'),
        segments: pattern.reduce(function (buf, key) {
          return buf.concat(parseString(key));
        }, []),
        isRegExp: false,
        isWildMatchPattern: false,
        haveExcludePattern: false,
        isMatchPattern: false,
      };
    } else if (isRegExp(pattern)) {
      return {
        entire: pattern,
        segments: [],
        isRegExp: true,
        isWildMatchPattern: false,
        haveExcludePattern: false,
        isMatchPattern: true,
      };
    } else {
      return {
        entire: '',
        isRegExp: false,
        segments: pattern !== undefined ? [pattern] : [],
        isWildMatchPattern: false,
        haveExcludePattern: false,
        isMatchPattern: false,
      };
    }
  };
  var parseString = function (source) {
    if (isStr(source)) {
      source = source.replace(/\s*/g, '');
      try {
        var _a = parse(source),
          segments = _a.segments,
          isMatchPattern = _a.isMatchPattern;
        return !isMatchPattern ? segments : source;
      } catch (e) {
        return source;
      }
    } else if (source instanceof Path) {
      return source.segments;
    }
    return source;
  };
  var Path = /** @class */ (function () {
    function Path(input, base) {
      var _this = this;
      this.concat = function () {
        var _a;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        if (_this.isMatchPattern || _this.isRegExp) {
          throw new Error(_this.entire + ' cannot be concat');
        }
        var path = new Path('');
        path.segments = (_a = _this.segments).concat.apply(
          _a,
          __spreadArray$5(
            [],
            __read$a(
              args.map(function (s) {
                return parseString(s);
              }),
            ),
            false,
          ),
        );
        path.entire = path.segments.join('.');
        return path;
      };
      this.slice = function (start, end) {
        if (_this.isMatchPattern || _this.isRegExp) {
          throw new Error(_this.entire + ' cannot be slice');
        }
        var path = new Path('');
        path.segments = _this.segments.slice(start, end);
        path.entire = path.segments.join('.');
        return path;
      };
      this.push = function () {
        var items = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          items[_i] = arguments[_i];
        }
        return _this.concat.apply(_this, __spreadArray$5([], __read$a(items), false));
      };
      this.pop = function () {
        if (_this.isMatchPattern || _this.isRegExp) {
          throw new Error(_this.entire + ' cannot be pop');
        }
        return new Path(_this.segments.slice(0, _this.segments.length - 1));
      };
      this.splice = function (start, deleteCount) {
        var items = [];
        for (var _i = 2; _i < arguments.length; _i++) {
          items[_i - 2] = arguments[_i];
        }
        if (_this.isMatchPattern || _this.isRegExp) {
          throw new Error(_this.entire + ' cannot be splice');
        }
        items = items.reduce(function (buf, item) {
          return buf.concat(parseString(item));
        }, []);
        var segments_ = _this.segments.slice();
        segments_.splice.apply(segments_, __spreadArray$5([start, deleteCount], __read$a(items), false));
        return new Path(segments_);
      };
      this.forEach = function (callback) {
        if (_this.isMatchPattern || _this.isRegExp) {
          throw new Error(_this.entire + ' cannot be each');
        }
        _this.segments.forEach(callback);
      };
      this.map = function (callback) {
        if (_this.isMatchPattern || _this.isRegExp) {
          throw new Error(_this.entire + ' cannot be map');
        }
        return _this.segments.map(callback);
      };
      this.reduce = function (callback, initial) {
        if (_this.isMatchPattern || _this.isRegExp) {
          throw new Error(_this.entire + ' cannot be reduce');
        }
        return _this.segments.reduce(callback, initial);
      };
      this.parent = function () {
        return _this.slice(0, _this.length - 1);
      };
      this.includes = function (pattern) {
        var _a = Path.parse(pattern),
          entire = _a.entire,
          segments = _a.segments,
          isMatchPattern = _a.isMatchPattern;
        var cache = _this.includesCache.get(entire);
        if (cache !== undefined) return cache;
        var cacheWith = function (value) {
          _this.includesCache.set(entire, value);
          return value;
        };
        if (_this.isMatchPattern) {
          if (!isMatchPattern) {
            return cacheWith(_this.match(segments));
          } else {
            throw new Error(_this.entire + ' cannot be used to match ' + entire);
          }
        }
        if (isMatchPattern) {
          throw new Error(_this.entire + ' cannot be used to match ' + entire);
        }
        if (segments.length > _this.segments.length) return cacheWith(false);
        for (var i = 0; i < segments.length; i++) {
          if (!isEqual(String(segments[i]), String(_this.segments[i]))) {
            return cacheWith(false);
          }
        }
        return cacheWith(true);
      };
      this.transform = function (regexp, callback) {
        if (!isFn$1(callback)) return '';
        if (_this.isMatchPattern) {
          throw new Error(_this.entire + ' cannot be transformed');
        }
        var args = _this.segments.reduce(function (buf, key) {
          return new RegExp(regexp).test(key) ? buf.concat(key) : buf;
        }, []);
        return callback.apply(void 0, __spreadArray$5([], __read$a(args), false));
      };
      this.match = function (pattern) {
        var _a, _b;
        var path = Path.parse(pattern);
        var cache = _this.matchCache.get(path.entire);
        if (cache !== undefined) {
          if (cache.record && cache.record.score !== undefined) {
            _this.matchScore = cache.record.score;
          }
          return cache.matched;
        }
        var cacheWith = function (value) {
          _this.matchCache.set(path.entire, value);
          return value;
        };
        if (path.isMatchPattern) {
          if (_this.isMatchPattern) {
            throw new Error(path.entire + ' cannot match ' + _this.entire);
          } else {
            _this.matchScore = 0;
            return cacheWith(path.match(_this.segments));
          }
        } else {
          if (_this.isMatchPattern) {
            if (_this.isRegExp) {
              try {
                return (_b = (_a = _this['entire']) === null || _a === void 0 ? void 0 : _a['test']) === null ||
                  _b === void 0
                  ? void 0
                  : _b.call(_a, path.entire);
              } finally {
                _this.entire.lastIndex = 0;
              }
            }
            var record = {
              score: 0,
            };
            var result = cacheWith(new Matcher(_this.tree, record).match(path.segments));
            _this.matchScore = record.score;
            return result.matched;
          } else {
            var record = {
              score: 0,
            };
            var result = cacheWith(Matcher.matchSegments(_this.segments, path.segments, record));
            _this.matchScore = record.score;
            return result.matched;
          }
        }
      };
      //别名组匹配
      this.matchAliasGroup = function (name, alias) {
        var namePath = Path.parse(name);
        var aliasPath = Path.parse(alias);
        var nameMatched = _this.match(namePath);
        var nameMatchedScore = _this.matchScore;
        var aliasMatched = _this.match(aliasPath);
        var aliasMatchedScore = _this.matchScore;
        if (_this.haveExcludePattern) {
          if (nameMatchedScore >= aliasMatchedScore) {
            return nameMatched;
          } else {
            return aliasMatched;
          }
        } else {
          return nameMatched || aliasMatched;
        }
      };
      this.existIn = function (source, start) {
        if (start === void 0) {
          start = 0;
        }
        return existIn(_this.segments, source, start);
      };
      this.getIn = function (source) {
        return getIn$1(_this.segments, source);
      };
      this.setIn = function (source, value) {
        setIn(_this.segments, source, value);
        return source;
      };
      this.deleteIn = function (source) {
        deleteIn(_this.segments, source);
        return source;
      };
      this.ensureIn = function (source, defaults) {
        var results = _this.getIn(source);
        if (results === undefined) {
          _this.setIn(source, defaults);
          return _this.getIn(source);
        }
        return results;
      };
      var _a = parse(input, base),
        tree = _a.tree,
        segments = _a.segments,
        entire = _a.entire,
        isRegExp = _a.isRegExp,
        isMatchPattern = _a.isMatchPattern,
        isWildMatchPattern = _a.isWildMatchPattern,
        haveExcludePattern = _a.haveExcludePattern;
      this.entire = entire;
      this.segments = segments;
      this.isMatchPattern = isMatchPattern;
      this.isWildMatchPattern = isWildMatchPattern;
      this.isRegExp = isRegExp;
      this.haveExcludePattern = haveExcludePattern;
      this.tree = tree;
      this.matchCache = new Map();
      this.includesCache = new Map();
    }
    Path.prototype.toString = function () {
      var _a;
      return (_a = this.entire) === null || _a === void 0 ? void 0 : _a.toString();
    };
    Path.prototype.toArr = function () {
      var _a;
      return (_a = this.segments) === null || _a === void 0 ? void 0 : _a.slice();
    };
    Object.defineProperty(Path.prototype, 'length', {
      get: function () {
        return this.segments.length;
      },
      enumerable: false,
      configurable: true,
    });
    Path.match = function (pattern) {
      var path = Path.parse(pattern);
      var matcher = function (target) {
        return path.match(target);
      };
      matcher[isMatcher] = true;
      matcher.path = path;
      return matcher;
    };
    Path.isPathPattern = function (target) {
      if (isStr(target) || isArr$1(target) || isRegExp(target) || (isFn$1(target) && target[isMatcher])) {
        return true;
      }
      return false;
    };
    Path.transform = function (pattern, regexp, callback) {
      return Path.parse(pattern).transform(regexp, callback);
    };
    Path.parse = function (path, base) {
      if (path === void 0) {
        path = '';
      }
      if (path instanceof Path) {
        var found = pathCache.get(path.entire);
        if (found) {
          return found;
        } else {
          pathCache.set(path.entire, path);
          return path;
        }
      } else if (path && path[isMatcher]) {
        return Path.parse(path['path']);
      } else {
        var key_ = base ? Path.parse(base) : '';
        var key = path + ':' + key_;
        var found = pathCache.get(key);
        if (found) {
          return found;
        } else {
          path = new Path(path, base);
          pathCache.set(key, path);
          return path;
        }
      }
    };
    Path.getIn = function (source, pattern) {
      var path = Path.parse(pattern);
      return path.getIn(source);
    };
    Path.setIn = function (source, pattern, value) {
      var path = Path.parse(pattern);
      return path.setIn(source, value);
    };
    Path.deleteIn = function (source, pattern) {
      var path = Path.parse(pattern);
      return path.deleteIn(source);
    };
    Path.existIn = function (source, pattern, start) {
      var path = Path.parse(pattern);
      return path.existIn(source, start);
    };
    Path.ensureIn = function (source, pattern, defaultValue) {
      var path = Path.parse(pattern);
      return path.ensureIn(source, defaultValue);
    };
    return Path;
  })();

  var Subscribable = /** @class */ (function () {
    function Subscribable() {
      var _this = this;
      this.subscribers = {
        index: 0,
      };
      this.subscribe = function (callback) {
        if (isFn$2(callback)) {
          var index = _this.subscribers.index + 1;
          _this.subscribers[index] = callback;
          _this.subscribers.index++;
          return index;
        }
      };
      this.unsubscribe = function (index) {
        if (_this.subscribers[index]) {
          delete _this.subscribers[index];
        } else if (!index) {
          _this.subscribers = {
            index: 0,
          };
        }
      };
      this.notify = function (payload, silent) {
        if (_this.subscription) {
          if (_this.subscription && isFn$2(_this.subscription.notify)) {
            if (_this.subscription.notify.call(_this, payload) === false) {
              return;
            }
          }
        }
        if (silent) return;
        var filter = function (payload) {
          if (_this.subscription && isFn$2(_this.subscription.filter)) {
            return _this.subscription.filter.call(_this, payload);
          }
          return payload;
        };
        each(_this.subscribers, function (callback) {
          if (isFn$2(callback)) callback(filter(payload));
        });
      };
    }
    return Subscribable;
  })();

  function defaultIsMergeableObject(value) {
    return isNonNullObject(value) && !isSpecial(value);
  }
  function isNonNullObject(value) {
    return !!value && typeof value === 'object';
  }
  function isSpecial(value) {
    var stringValue = Object.prototype.toString.call(value);
    return stringValue === '[object RegExp]' || stringValue === '[object Date]' || isReactElement(value);
  }
  // see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25
  var canUseSymbol = typeof Symbol === 'function' && Symbol.for;
  var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;
  function isReactElement(value) {
    return value.$$typeof === REACT_ELEMENT_TYPE;
  }
  function emptyTarget(val) {
    return Array.isArray(val) ? [] : {};
  }
  function cloneUnlessOtherwiseSpecified(value, options) {
    if (options.clone !== false && options.isMergeableObject(value)) {
      return deepmerge(emptyTarget(value), value, options);
    }
    return value;
  }
  function defaultArrayMerge(target, source, options) {
    return target.concat(source).map(function (element) {
      return cloneUnlessOtherwiseSpecified(element, options);
    });
  }
  function getMergeFunction(key, options) {
    if (!options.customMerge) {
      return deepmerge;
    }
    var customMerge = options.customMerge(key);
    return typeof customMerge === 'function' ? customMerge : deepmerge;
  }
  function getEnumerableOwnPropertySymbols(target) {
    return Object.getOwnPropertySymbols
      ? Object.getOwnPropertySymbols(target).filter(function (symbol) {
          return target.propertyIsEnumerable(symbol);
        })
      : [];
  }
  function getKeys(target) {
    if (!isValid$4(target)) return [];
    return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));
  }
  function propertyIsOnObject(object, property) {
    /* istanbul ignore next */
    try {
      return property in object;
    } catch (_) {
      return false;
    }
  }
  // Protects from prototype poisoning and unexpected merging up the prototype chain.
  function propertyIsUnsafe(target, key) {
    return (
      propertyIsOnObject(target, key) && // Properties are safe to merge if they don't exist in the target yet,
      !(
        Object.hasOwnProperty.call(target, key) && // unsafe if they exist up the prototype chain,
        Object.propertyIsEnumerable.call(target, key)
      )
    ); // and also unsafe if they're nonenumerable.
  }
  function mergeObject(target, source, options) {
    var destination = options.assign ? target || {} : {};
    if (!options.isMergeableObject(target)) return target;
    if (!options.assign) {
      getKeys(target).forEach(function (key) {
        destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
      });
    }
    getKeys(source).forEach(function (key) {
      /* istanbul ignore next */
      if (propertyIsUnsafe(target, key)) {
        return;
      }
      if (!target[key]) {
        destination[key] = source[key];
      }
      if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {
        destination[key] = getMergeFunction(key, options)(target[key], source[key], options);
      } else {
        destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
      }
    });
    return destination;
  }
  function deepmerge(target, source, options) {
    options = options || {};
    options.arrayMerge = options.arrayMerge || defaultArrayMerge;
    options.isMergeableObject = options.isMergeableObject || defaultIsMergeableObject;
    // cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()
    // implementations can use it. The caller may not replace it.
    options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;
    var sourceIsArray = Array.isArray(source);
    var targetIsArray = Array.isArray(target);
    var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
    if (!sourceAndTargetTypesMatch) {
      return cloneUnlessOtherwiseSpecified(source, options);
    } else if (sourceIsArray) {
      return options.arrayMerge(target, source, options);
    } else {
      return mergeObject(target, source, options);
    }
  }
  var merge = deepmerge;

  var IDX = 36,
    HEX = '';
  while (IDX--) HEX += IDX.toString(36);
  function uid(len) {
    var str = '',
      num = len || 11;
    while (num--) str += HEX[(Math.random() * 36) | 0];
    return str;
  }

  var LifeCycle = /** @class */ (function () {
    function LifeCycle() {
      var _this = this;
      var params = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        params[_i] = arguments[_i];
      }
      this.buildListener = function (params) {
        return function (payload, ctx) {
          var _this = this;
          for (var index = 0; index < params.length; index++) {
            var item = params[index];
            if (isFn$2(item)) {
              item.call(this, payload, ctx);
            } else if (isStr$1(item) && isFn$2(params[index + 1])) {
              if (item === payload.type) {
                params[index + 1].call(this, payload.payload, ctx);
              }
              index++;
            } else {
              each(item, function (handler, type) {
                if (isFn$2(handler) && isStr$1(type)) {
                  if (type === payload.type) {
                    handler.call(_this, payload.payload, ctx);
                    return false;
                  }
                }
              });
            }
          }
        };
      };
      this.notify = function (type, payload, ctx) {
        if (isStr$1(type)) {
          _this.listener.call(ctx, { type: type, payload: payload }, ctx);
        }
      };
      this.listener = this.buildListener(params);
    }
    return LifeCycle;
  })();

  var __extends$4 =
    (undefined && undefined.__extends) ||
    (function () {
      var extendStatics = function (d, b) {
        extendStatics =
          Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array &&
            function (d, b) {
              d.__proto__ = b;
            }) ||
          function (d, b) {
            for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
          };
        return extendStatics(d, b);
      };
      return function (d, b) {
        if (typeof b !== 'function' && b !== null)
          throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
      };
    })();
  var Heart = /** @class */ (function (_super) {
    __extends$4(Heart, _super);
    function Heart(_a) {
      var _b = _a === void 0 ? {} : _a,
        lifecycles = _b.lifecycles,
        context = _b.context;
      var _this = _super.call(this) || this;
      _this.lifecycles = [];
      _this.outerLifecycles = new Map();
      _this.buildLifeCycles = function (lifecycles) {
        return lifecycles.reduce(function (buf, item) {
          if (item instanceof LifeCycle) {
            return buf.concat(item);
          } else {
            if (isArr$2(item)) {
              return _this.buildLifeCycles(item);
            } else if (typeof item === 'object') {
              _this.context = item;
              return buf;
            }
            return buf;
          }
        }, []);
      };
      _this.addLifeCycles = function (id, lifecycles) {
        if (lifecycles === void 0) {
          lifecycles = [];
        }
        var observers = _this.buildLifeCycles(lifecycles);
        if (observers.length) {
          _this.outerLifecycles.set(id, observers);
        }
      };
      _this.hasLifeCycles = function (id) {
        return _this.outerLifecycles.has(id);
      };
      _this.removeLifeCycles = function (id) {
        _this.outerLifecycles.delete(id);
      };
      _this.setLifeCycles = function (lifecycles) {
        if (lifecycles === void 0) {
          lifecycles = [];
        }
        _this.lifecycles = _this.buildLifeCycles(lifecycles);
      };
      _this.publish = function (type, payload, context) {
        if (isStr$1(type)) {
          _this.lifecycles.forEach(function (lifecycle) {
            lifecycle.notify(type, payload, context || _this.context);
          });
          _this.outerLifecycles.forEach(function (lifecycles) {
            lifecycles.forEach(function (lifecycle) {
              lifecycle.notify(type, payload, context || _this.context);
            });
          });
          _this.notify({
            type: type,
            payload: payload,
          });
        }
      };
      _this.clear = function () {
        _this.lifecycles = [];
        _this.outerLifecycles.clear();
        _this.unsubscribe();
      };
      _this.lifecycles = _this.buildLifeCycles(lifecycles || []);
      _this.context = context;
      return _this;
    }
    return Heart;
  })(Subscribable);

  var isMap = function (val) {
    return val && val instanceof Map;
  };
  var isSet = function (val) {
    return val && val instanceof Set;
  };
  var isWeakMap = function (val) {
    return val && val instanceof WeakMap;
  };
  var isWeakSet = function (val) {
    return val && val instanceof WeakSet;
  };
  var isFn = function (val) {
    return typeof val === 'function';
  };
  var isArr = Array.isArray;
  var isPlainObj = function (val) {
    return Object.prototype.toString.call(val) === '[object Object]';
  };
  var isValid = function (val) {
    return val !== null && val !== undefined;
  };
  var isCollectionType = function (target) {
    return isMap(target) || isWeakMap(target) || isSet(target) || isWeakSet(target);
  };
  var isNormalType = function (target) {
    return isPlainObj(target) || isArr(target);
  };

  var toArray$1 = function (value) {
    return Array.isArray(value) ? value : value !== undefined && value !== null ? [value] : [];
  };
  var ArraySet = /** @class */ (function () {
    function ArraySet(value) {
      if (value === void 0) {
        value = [];
      }
      this.value = value;
    }
    ArraySet.prototype.add = function (item) {
      if (!this.has(item)) {
        this.value.push(item);
      }
    };
    ArraySet.prototype.has = function (item) {
      return this.value.indexOf(item) > -1;
    };
    ArraySet.prototype.delete = function (item) {
      var index = this.value.indexOf(item);
      if (index > -1) {
        this.value.splice(index, 1);
      }
    };
    ArraySet.prototype.forEach = function (callback) {
      if (this.value.length === 0) return;
      for (var index = 0, len = this.value.length; index < len; index++) {
        callback(this.value[index]);
      }
    };
    ArraySet.prototype.forEachDelete = function (callback) {
      if (this.value.length === 0) return;
      for (var index = 0; index < this.value.length; index++) {
        var item = this.value[index];
        this.value.splice(index, 1);
        callback(item);
        index--;
      }
    };
    ArraySet.prototype.clear = function () {
      this.value.length = 0;
    };
    return ArraySet;
  })();

  var ProxyRaw = new WeakMap();
  var RawProxy = new WeakMap();
  var RawShallowProxy = new WeakMap();
  var RawNode = new WeakMap();
  var RawReactionsMap = new WeakMap();
  var ReactionStack = [];
  var BatchCount = { value: 0 };
  var UntrackCount = { value: 0 };
  var BatchScope = { value: false };
  var PendingReactions = new ArraySet();
  var PendingScopeReactions = new ArraySet();
  var BatchEndpoints = new ArraySet();
  var MakeObservableSymbol = Symbol('MakeObservableSymbol');
  var ObserverListeners = new ArraySet();

  var ITERATION_KEY = Symbol('iteration key');
  var addRawReactionsMap = function (target, key, reaction) {
    var reactionsMap = RawReactionsMap.get(target);
    if (reactionsMap) {
      var reactions = reactionsMap.get(key);
      if (reactions) {
        reactions.add(reaction);
      } else {
        reactionsMap.set(key, new ArraySet([reaction]));
      }
      return reactionsMap;
    } else {
      var reactionsMap_1 = new Map([[key, new ArraySet([reaction])]]);
      RawReactionsMap.set(target, reactionsMap_1);
      return reactionsMap_1;
    }
  };
  var addReactionsMapToReaction = function (reaction, reactionsMap) {
    var bindSet = reaction._reactionsSet;
    if (bindSet) {
      bindSet.add(reactionsMap);
    } else {
      reaction._reactionsSet = new ArraySet([reactionsMap]);
    }
    return bindSet;
  };
  var getReactionsFromTargetKey = function (target, key) {
    var reactionsMap = RawReactionsMap.get(target);
    var reactions = [];
    if (reactionsMap) {
      var map = reactionsMap.get(key);
      if (map) {
        map.forEach(function (reaction) {
          if (reactions.indexOf(reaction) === -1) {
            reactions.push(reaction);
          }
        });
      }
    }
    return reactions;
  };
  var runReactions = function (target, key) {
    var reactions = getReactionsFromTargetKey(target, key);
    var prevUntrackCount = UntrackCount.value;
    UntrackCount.value = 0;
    for (var i = 0, len = reactions.length; i < len; i++) {
      var reaction = reactions[i];
      if (reaction._isComputed) {
        reaction._scheduler(reaction);
      } else if (isScopeBatching()) {
        PendingScopeReactions.add(reaction);
      } else if (isBatching()) {
        PendingReactions.add(reaction);
      } else {
        if (isFn(reaction._scheduler)) {
          reaction._scheduler(reaction);
        } else {
          reaction();
        }
      }
    }
    UntrackCount.value = prevUntrackCount;
  };
  var notifyObservers = function (operation) {
    ObserverListeners.forEach(function (fn) {
      return fn(operation);
    });
  };
  var bindTargetKeyWithCurrentReaction = function (operation) {
    var key = operation.key,
      type = operation.type,
      target = operation.target;
    if (type === 'iterate') {
      key = ITERATION_KEY;
    }
    var current = ReactionStack[ReactionStack.length - 1];
    if (isUntracking()) return;
    if (current) {
      addReactionsMapToReaction(current, addRawReactionsMap(target, key, current));
    }
  };
  var bindComputedReactions = function (reaction) {
    if (isFn(reaction)) {
      var current = ReactionStack[ReactionStack.length - 1];
      if (current) {
        var computes = current._computesSet;
        if (computes) {
          computes.add(reaction);
        } else {
          current._computesSet = new ArraySet([reaction]);
        }
      }
    }
  };
  var runReactionsFromTargetKey = function (operation) {
    var key = operation.key,
      type = operation.type,
      target = operation.target,
      oldTarget = operation.oldTarget;
    notifyObservers(operation);
    if (type === 'clear') {
      oldTarget.forEach(function (_, key) {
        runReactions(target, key);
      });
    } else {
      runReactions(target, key);
    }
    if (type === 'add' || type === 'delete' || type === 'clear') {
      var newKey = Array.isArray(target) ? 'length' : ITERATION_KEY;
      runReactions(target, newKey);
    }
  };
  var hasRunningReaction = function () {
    return ReactionStack.length > 0;
  };
  var releaseBindingReactions = function (reaction) {
    var _a;
    (_a = reaction._reactionsSet) === null || _a === void 0
      ? void 0
      : _a.forEach(function (reactionsMap) {
          reactionsMap.forEach(function (reactions) {
            reactions.delete(reaction);
          });
        });
    PendingReactions.delete(reaction);
    PendingScopeReactions.delete(reaction);
    delete reaction._reactionsSet;
  };
  var suspendComputedReactions = function (current) {
    var _a;
    (_a = current._computesSet) === null || _a === void 0
      ? void 0
      : _a.forEach(function (reaction) {
          var reactions = getReactionsFromTargetKey(reaction._context, reaction._property);
          if (reactions.length === 0) {
            disposeBindingReactions(reaction);
            reaction._dirty = true;
          }
        });
  };
  var disposeBindingReactions = function (reaction) {
    reaction._disposed = true;
    releaseBindingReactions(reaction);
    suspendComputedReactions(reaction);
  };
  var batchStart = function () {
    BatchCount.value++;
  };
  var batchEnd = function () {
    BatchCount.value--;
    if (BatchCount.value === 0) {
      var prevUntrackCount = UntrackCount.value;
      UntrackCount.value = 0;
      executePendingReactions();
      executeBatchEndpoints();
      UntrackCount.value = prevUntrackCount;
    }
  };
  var batchScopeStart = function () {
    BatchScope.value = true;
  };
  var batchScopeEnd = function () {
    var prevUntrackCount = UntrackCount.value;
    BatchScope.value = false;
    UntrackCount.value = 0;
    PendingScopeReactions.forEachDelete(function (reaction) {
      if (isFn(reaction._scheduler)) {
        reaction._scheduler(reaction);
      } else {
        reaction();
      }
    });
    UntrackCount.value = prevUntrackCount;
  };
  var untrackStart = function () {
    UntrackCount.value++;
  };
  var untrackEnd = function () {
    UntrackCount.value--;
  };
  var isBatching = function () {
    return BatchCount.value > 0;
  };
  var isScopeBatching = function () {
    return BatchScope.value;
  };
  var isUntracking = function () {
    return UntrackCount.value > 0;
  };
  var executePendingReactions = function () {
    PendingReactions.forEachDelete(function (reaction) {
      if (isFn(reaction._scheduler)) {
        reaction._scheduler(reaction);
      } else {
        reaction();
      }
    });
  };
  var executeBatchEndpoints = function () {
    BatchEndpoints.forEachDelete(function (callback) {
      callback();
    });
  };
  var hasDepsChange = function (newDeps, oldDeps) {
    if (newDeps === oldDeps) return false;
    if (newDeps.length !== oldDeps.length) return true;
    if (
      newDeps.some(function (value, index) {
        return value !== oldDeps[index];
      })
    )
      return true;
    return false;
  };
  var disposeEffects = function (reaction) {
    if (reaction._effects) {
      try {
        batchStart();
        reaction._effects.queue.forEach(function (item) {
          if (!item || !item.dispose) return;
          item.dispose();
        });
      } finally {
        batchEnd();
      }
    }
  };

  var RAW_TYPE = Symbol('RAW_TYPE');
  var OBSERVABLE_TYPE = Symbol('OBSERVABLE_TYPE');
  var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
  var isObservable = function (target) {
    return ProxyRaw.has(target);
  };
  var isAnnotation = function (target) {
    return target && !!target[MakeObservableSymbol];
  };
  var isSupportObservable = function (target) {
    if (!isValid(target)) return false;
    if (isArr(target)) return true;
    if (isPlainObj(target)) {
      if (target[RAW_TYPE]) {
        return false;
      }
      if (target[OBSERVABLE_TYPE]) {
        return true;
      }
      if ('$$typeof' in target && '_owner' in target) {
        return false;
      }
      if (target['_isAMomentObject']) {
        return false;
      }
      if (target['_isJSONSchemaObject']) {
        return false;
      }
      if (isFn(target['toJS'])) {
        return false;
      }
      if (isFn(target['toJSON'])) {
        return false;
      }
      return true;
    }
    if (isMap(target) || isWeakMap(target) || isSet(target) || isWeakSet(target)) return true;
    return false;
  };
  var toJS = function (values) {
    var visited = new WeakSet();
    var _toJS = function (values) {
      if (visited.has(values)) {
        return values;
      }
      if (values && values[RAW_TYPE]) return values;
      if (isArr(values)) {
        if (isObservable(values)) {
          visited.add(values);
          var res_1 = [];
          values.forEach(function (item) {
            res_1.push(_toJS(item));
          });
          visited.delete(values);
          return res_1;
        }
      } else if (isPlainObj(values)) {
        if (isObservable(values)) {
          visited.add(values);
          var res = {};
          for (var key in values) {
            if (hasOwnProperty$2.call(values, key)) {
              res[key] = _toJS(values[key]);
            }
          }
          visited.delete(values);
          return res;
        }
      }
      return values;
    };
    return _toJS(values);
  };
  var contains = function (target, property) {
    var targetRaw = ProxyRaw.get(target) || target;
    var propertyRaw = ProxyRaw.get(property) || property;
    if (targetRaw === propertyRaw) return true;
    var targetNode = RawNode.get(targetRaw);
    var propertyNode = RawNode.get(propertyRaw);
    if (!targetNode) return false;
    if (!propertyNode) return false;
    return targetNode.contains(propertyNode);
  };

  var __read$9 =
    (undefined && undefined.__read) ||
    function (o, n) {
      var m = typeof Symbol === 'function' && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o),
        r,
        ar = [],
        e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error: error };
      } finally {
        try {
          if (r && !r.done && (m = i['return'])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
  var __spreadArray$4 =
    (undefined && undefined.__spreadArray) ||
    function (to, from, pack) {
      if (pack || arguments.length === 2)
        for (var i = 0, l = from.length, ar; i < l; i++) {
          if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
          }
        }
      return to.concat(ar || Array.prototype.slice.call(from));
    };
  var _a;
  var wellKnownSymbols = new Set(
    Object.getOwnPropertyNames(Symbol)
      .map(function (key) {
        return Symbol[key];
      })
      .filter(function (value) {
        return typeof value === 'symbol';
      }),
  );
  var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
  function findObservable(target, key, value) {
    var observableObj = RawProxy.get(value);
    if (observableObj) {
      return observableObj;
    }
    if (!isObservable(value) && isSupportObservable(value)) {
      return createObservable(target, key, value);
    }
    return value;
  }
  function patchIterator(target, key, iterator, isEntries) {
    var originalNext = iterator.next;
    iterator.next = function () {
      var _a = originalNext.call(iterator),
        done = _a.done,
        value = _a.value;
      if (!done) {
        if (isEntries) {
          value[1] = findObservable(target, key, value[1]);
        } else {
          value = findObservable(target, key, value);
        }
      }
      return { done: done, value: value };
    };
    return iterator;
  }
  var instrumentations =
    ((_a = {
      has: function (key) {
        var target = ProxyRaw.get(this);
        var proto = Reflect.getPrototypeOf(this);
        bindTargetKeyWithCurrentReaction({ target: target, key: key, type: 'has' });
        return proto.has.apply(target, arguments);
      },
      get: function (key) {
        var target = ProxyRaw.get(this);
        var proto = Reflect.getPrototypeOf(this);
        bindTargetKeyWithCurrentReaction({ target: target, key: key, type: 'get' });
        return findObservable(target, key, proto.get.apply(target, arguments));
      },
      add: function (key) {
        var target = ProxyRaw.get(this);
        var proto = Reflect.getPrototypeOf(this);
        var hadKey = proto.has.call(target, key);
        // forward the operation before queueing reactions
        var result = proto.add.apply(target, arguments);
        if (!hadKey) {
          runReactionsFromTargetKey({ target: target, key: key, value: key, type: 'add' });
        }
        return result;
      },
      set: function (key, value) {
        var target = ProxyRaw.get(this);
        var proto = Reflect.getPrototypeOf(this);
        var hadKey = proto.has.call(target, key);
        var oldValue = proto.get.call(target, key);
        // forward the operation before queueing reactions
        var result = proto.set.apply(target, arguments);
        if (!hadKey) {
          runReactionsFromTargetKey({ target: target, key: key, value: value, type: 'add' });
        } else if (value !== oldValue) {
          runReactionsFromTargetKey({ target: target, key: key, value: value, oldValue: oldValue, type: 'set' });
        }
        return result;
      },
      delete: function (key) {
        var target = ProxyRaw.get(this);
        var proto = Reflect.getPrototypeOf(this);
        var hadKey = proto.has.call(target, key);
        var oldValue = proto.get ? proto.get.call(target, key) : undefined;
        // forward the operation before queueing reactions
        var result = proto.delete.apply(target, arguments);
        if (hadKey) {
          runReactionsFromTargetKey({ target: target, key: key, oldValue: oldValue, type: 'delete' });
        }
        return result;
      },
      clear: function () {
        var target = ProxyRaw.get(this);
        var proto = Reflect.getPrototypeOf(this);
        var hadItems = target.size !== 0;
        var oldTarget = target instanceof Map ? new Map(target) : new Set(target);
        // forward the operation before queueing reactions
        var result = proto.clear.apply(target, arguments);
        if (hadItems) {
          runReactionsFromTargetKey({ target: target, oldTarget: oldTarget, type: 'clear' });
        }
        return result;
      },
      forEach: function (cb) {
        var _a;
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
          args[_i - 1] = arguments[_i];
        }
        var target = ProxyRaw.get(this);
        var proto = Reflect.getPrototypeOf(this);
        bindTargetKeyWithCurrentReaction({ target: target, type: 'iterate' });
        // swap out the raw values with their observable pairs
        // before passing them to the callback
        var wrappedCb = function (value, key) {
          var args = [];
          for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
          }
          return cb.apply(void 0, __spreadArray$4([findObservable(target, key, value), key], __read$9(args), false));
        };
        return (_a = proto.forEach).call.apply(_a, __spreadArray$4([target, wrappedCb], __read$9(args), false));
      },
      keys: function () {
        var target = ProxyRaw.get(this);
        var proto = Reflect.getPrototypeOf(this);
        bindTargetKeyWithCurrentReaction({ target: target, type: 'iterate' });
        return proto.keys.apply(target, arguments);
      },
      values: function () {
        var target = ProxyRaw.get(this);
        var proto = Reflect.getPrototypeOf(this);
        bindTargetKeyWithCurrentReaction({ target: target, type: 'iterate' });
        var iterator = proto.values.apply(target, arguments);
        return patchIterator(target, '', iterator, false);
      },
      entries: function () {
        var target = ProxyRaw.get(this);
        var proto = Reflect.getPrototypeOf(this);
        bindTargetKeyWithCurrentReaction({ target: target, type: 'iterate' });
        var iterator = proto.entries.apply(target, arguments);
        return patchIterator(target, '', iterator, true);
      },
    }),
    (_a[Symbol.iterator] = function () {
      var target = ProxyRaw.get(this);
      var proto = Reflect.getPrototypeOf(this);
      bindTargetKeyWithCurrentReaction({ target: target, type: 'iterate' });
      var iterator = proto[Symbol.iterator].apply(target, arguments);
      return patchIterator(target, '', iterator, target instanceof Map);
    }),
    Object.defineProperty(_a, 'size', {
      get: function () {
        var target = ProxyRaw.get(this);
        var proto = Reflect.getPrototypeOf(this);
        bindTargetKeyWithCurrentReaction({ target: target, type: 'iterate' });
        return Reflect.get(proto, 'size', target);
      },
      enumerable: false,
      configurable: true,
    }),
    _a);
  var collectionHandlers = {
    get: function (target, key, receiver) {
      // instrument methods and property accessors to be reactive
      target = hasOwnProperty$1.call(instrumentations, key) ? instrumentations : target;
      return Reflect.get(target, key, receiver);
    },
  };
  var baseHandlers = {
    get: function (target, key, receiver) {
      var result = target[key]; // use Reflect.get is too slow
      if (typeof key === 'symbol' && wellKnownSymbols.has(key)) {
        return result;
      }
      bindTargetKeyWithCurrentReaction({ target: target, key: key, receiver: receiver, type: 'get' });
      var observableResult = RawProxy.get(result);
      if (observableResult) {
        return observableResult;
      }
      if (!isObservable(result) && isSupportObservable(result)) {
        var descriptor = Reflect.getOwnPropertyDescriptor(target, key);
        if (!descriptor || !(descriptor.writable === false && descriptor.configurable === false)) {
          return createObservable(target, key, result);
        }
      }
      return result;
    },
    has: function (target, key) {
      var result = Reflect.has(target, key);
      bindTargetKeyWithCurrentReaction({ target: target, key: key, type: 'has' });
      return result;
    },
    ownKeys: function (target) {
      var keys = Reflect.ownKeys(target);
      bindTargetKeyWithCurrentReaction({ target: target, type: 'iterate' });
      return keys;
    },
    set: function (target, key, value, receiver) {
      var hadKey = hasOwnProperty$1.call(target, key);
      var newValue = createObservable(target, key, value);
      var oldValue = target[key];
      target[key] = newValue; // use Reflect.set is too slow
      batchStart();
      if (!hadKey) {
        runReactionsFromTargetKey({
          target: target,
          key: key,
          value: newValue,
          oldValue: oldValue,
          receiver: receiver,
          type: 'add',
        });
      } else if (value !== oldValue) {
        runReactionsFromTargetKey({
          target: target,
          key: key,
          value: newValue,
          oldValue: oldValue,
          receiver: receiver,
          type: 'set',
        });
      }
      batchEnd();
      return true;
    },
    deleteProperty: function (target, key) {
      var oldValue = target[key];
      delete target[key];
      runReactionsFromTargetKey({
        target: target,
        key: key,
        oldValue: oldValue,
        type: 'delete',
      });
      return true;
    },
  };

  var DataChange = /** @class */ (function () {
    function DataChange(operation, node) {
      this.key = operation.key;
      this.type = operation.type;
      this.object = operation.target;
      this.value = operation.value;
      this.oldValue = operation.oldValue;
      this.path = node.path.concat(operation.key);
    }
    return DataChange;
  })();
  var DataNode = /** @class */ (function () {
    function DataNode(target, key, value) {
      this.target = target;
      this.key = key;
      this.value = value;
    }
    Object.defineProperty(DataNode.prototype, 'path', {
      get: function () {
        if (!this.parent) return this.key ? [this.key] : [];
        return this.parent.path.concat(this.key);
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(DataNode.prototype, 'targetRaw', {
      get: function () {
        return ProxyRaw.get(this.target) || this.target;
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(DataNode.prototype, 'parent', {
      get: function () {
        if (!this.target) return;
        return RawNode.get(this.targetRaw);
      },
      enumerable: false,
      configurable: true,
    });
    DataNode.prototype.isEqual = function (node) {
      if (this.key) {
        return node.targetRaw === this.targetRaw && node.key === this.key;
      }
      return node.value === this.value;
    };
    DataNode.prototype.contains = function (node) {
      if (node === this) return true;
      var parent = node.parent;
      while (!!parent) {
        if (this.isEqual(parent)) return true;
        parent = parent.parent;
      }
      return false;
    };
    return DataNode;
  })();
  var buildDataTree = function (target, key, value) {
    var currentNode = RawNode.get(ProxyRaw.get(value) || value);
    if (currentNode) return currentNode;
    RawNode.set(value, new DataNode(target, key, value));
  };

  var createNormalProxy = function (target, shallow) {
    var proxy = new Proxy(target, baseHandlers);
    ProxyRaw.set(proxy, target);
    if (shallow) {
      RawShallowProxy.set(target, proxy);
    } else {
      RawProxy.set(target, proxy);
    }
    return proxy;
  };
  var createCollectionProxy = function (target, shallow) {
    var proxy = new Proxy(target, collectionHandlers);
    ProxyRaw.set(proxy, target);
    if (shallow) {
      RawShallowProxy.set(target, proxy);
    } else {
      RawProxy.set(target, proxy);
    }
    return proxy;
  };
  var createShallowProxy = function (target) {
    if (isNormalType(target)) return createNormalProxy(target, true);
    if (isCollectionType(target)) return createCollectionProxy(target, true);
    return target;
  };
  var createObservable = function (target, key, value, shallow) {
    if (typeof value !== 'object') return value;
    var raw = ProxyRaw.get(value);
    if (!!raw) {
      var node = RawNode.get(raw);
      node.key = key;
      return value;
    }
    if (!isSupportObservable(value)) return value;
    if (target) {
      var parentRaw = ProxyRaw.get(target) || target;
      var isShallowParent = RawShallowProxy.get(parentRaw);
      if (isShallowParent) return value;
    }
    buildDataTree(target, key, value);
    if (shallow) return createShallowProxy(value);
    if (isNormalType(value)) return createNormalProxy(value);
    if (isCollectionType(value)) return createCollectionProxy(value);
    return value;
  };
  var createAnnotation = function (maker) {
    var annotation = function (target) {
      return maker({ value: target });
    };
    if (isFn(maker)) {
      annotation[MakeObservableSymbol] = maker;
    }
    return annotation;
  };
  var getObservableMaker = function (target) {
    if (target[MakeObservableSymbol]) {
      if (!target[MakeObservableSymbol][MakeObservableSymbol]) {
        return target[MakeObservableSymbol];
      }
      return getObservableMaker(target[MakeObservableSymbol]);
    }
  };
  var createBoundaryFunction = function (start, end) {
    function boundary(fn) {
      var results;
      try {
        start();
        if (isFn(fn)) {
          results = fn();
        }
      } finally {
        end();
      }
      return results;
    }
    boundary.bound = createBindFunction(boundary);
    return boundary;
  };
  var createBindFunction = function (boundary) {
    function bind(callback, context) {
      return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        return boundary(function () {
          return callback.apply(context, args);
        });
      };
    }
    return bind;
  };
  var createBoundaryAnnotation = function (start, end) {
    var boundary = createBoundaryFunction(start, end);
    var annotation = createAnnotation(function (_a) {
      var target = _a.target,
        key = _a.key;
      target[key] = boundary.bound(target[key], target);
      return target;
    });
    boundary[MakeObservableSymbol] = annotation;
    boundary.bound[MakeObservableSymbol] = annotation;
    return boundary;
  };

  var batch = createBoundaryAnnotation(batchStart, batchEnd);
  batch.scope = createBoundaryAnnotation(batchScopeStart, batchScopeEnd);
  batch.endpoint = function (callback) {
    if (!isFn(callback)) return;
    if (BatchCount.value === 0) {
      callback();
    } else {
      BatchEndpoints.add(callback);
    }
  };

  var action = createBoundaryAnnotation(
    function () {
      batchStart();
      untrackStart();
    },
    function () {
      untrackEnd();
      batchEnd();
    },
  );
  action.scope = createBoundaryAnnotation(
    function () {
      batchScopeStart();
      untrackStart();
    },
    function () {
      untrackEnd();
      batchScopeEnd();
    },
  );

  createBoundaryFunction(untrackStart, untrackEnd);

  var observable$1 = createAnnotation(function (_a) {
    var target = _a.target,
      key = _a.key,
      value = _a.value;
    var store = {
      value: createObservable(target, key, target ? target[key] : value),
    };
    function get() {
      bindTargetKeyWithCurrentReaction({
        target: target,
        key: key,
        type: 'get',
      });
      return store.value;
    }
    function set(value) {
      var oldValue = store.value;
      value = createObservable(target, key, value);
      store.value = value;
      if (oldValue === value) return;
      runReactionsFromTargetKey({
        target: target,
        key: key,
        type: 'set',
        oldValue: oldValue,
        value: value,
      });
    }
    if (target) {
      Object.defineProperty(target, key, {
        set: set,
        get: get,
        enumerable: true,
        configurable: false,
      });
      return target;
    }
    return store.value;
  });

  var box = createAnnotation(function (_a) {
    var target = _a.target,
      key = _a.key,
      value = _a.value;
    var store = {
      value: target ? target[key] : value,
    };
    var proxy = {
      set: set,
      get: get,
    };
    ProxyRaw.set(proxy, store);
    RawProxy.set(store, proxy);
    buildDataTree(target, key, store);
    function get() {
      bindTargetKeyWithCurrentReaction({
        target: store,
        key: key,
        type: 'get',
      });
      return store.value;
    }
    function set(value) {
      var oldValue = store.value;
      store.value = value;
      if (oldValue !== value) {
        runReactionsFromTargetKey({
          target: store,
          key: key,
          type: 'set',
          oldValue: oldValue,
          value: value,
        });
      }
    }
    if (target) {
      Object.defineProperty(target, key, {
        value: proxy,
        enumerable: true,
        configurable: false,
        writable: false,
      });
      return target;
    }
    return proxy;
  });

  var ref = createAnnotation(function (_a) {
    var target = _a.target,
      key = _a.key,
      value = _a.value;
    var store = {
      value: target ? target[key] : value,
    };
    var proxy = {};
    var context = target ? target : store;
    var property = target ? key : 'value';
    buildDataTree(target, key, store);
    ProxyRaw.set(proxy, store);
    RawProxy.set(store, proxy);
    function get() {
      bindTargetKeyWithCurrentReaction({
        target: context,
        key: property,
        type: 'get',
      });
      return store.value;
    }
    function set(value) {
      var oldValue = store.value;
      store.value = value;
      if (oldValue !== value) {
        runReactionsFromTargetKey({
          target: context,
          key: property,
          type: 'set',
          oldValue: oldValue,
          value: value,
        });
      }
    }
    if (target) {
      Object.defineProperty(target, key, {
        get: get,
        set: set,
        enumerable: true,
        configurable: false,
      });
      return target;
    } else {
      Object.defineProperty(proxy, 'value', {
        set: set,
        get: get,
      });
    }
    return proxy;
  });

  var shallow = createAnnotation(function (_a) {
    var target = _a.target,
      key = _a.key,
      value = _a.value;
    var store = {
      value: createObservable(target, key, target ? target[key] : value, true),
    };
    function get() {
      bindTargetKeyWithCurrentReaction({
        target: target,
        key: key,
        type: 'get',
      });
      return store.value;
    }
    function set(value) {
      var oldValue = store.value;
      value = createObservable(target, key, value, true);
      store.value = value;
      if (oldValue === value) return;
      runReactionsFromTargetKey({
        target: target,
        key: key,
        type: 'set',
        oldValue: oldValue,
        value: value,
      });
    }
    if (target) {
      Object.defineProperty(target, key, {
        set: set,
        get: get,
        enumerable: true,
        configurable: false,
      });
      return target;
    }
    return store.value;
  });

  var computed = createAnnotation(function (_a) {
    var target = _a.target,
      key = _a.key,
      value = _a.value;
    var store = {};
    var proxy = {};
    var context = target ? target : store;
    var property = target ? key : 'value';
    var getter = getGetter(context);
    var setter = getSetter(context);
    function getGetter(target) {
      if (!target) {
        if (value === null || value === void 0 ? void 0 : value.get)
          return value === null || value === void 0 ? void 0 : value.get;
        return value;
      }
      var descriptor = Object.getOwnPropertyDescriptor(target, property);
      if (descriptor === null || descriptor === void 0 ? void 0 : descriptor.get) return descriptor.get;
      return getGetter(Object.getPrototypeOf(target));
    }
    function getSetter(target) {
      if (!target) {
        if (value === null || value === void 0 ? void 0 : value.set)
          return value === null || value === void 0 ? void 0 : value.set;
        return;
      }
      var descriptor = Object.getOwnPropertyDescriptor(target, property);
      if (descriptor === null || descriptor === void 0 ? void 0 : descriptor.set) return descriptor.set;
      return getSetter(Object.getPrototypeOf(target));
    }
    function compute() {
      var _a;
      store.value =
        (_a = getter === null || getter === void 0 ? void 0 : getter.call) === null || _a === void 0
          ? void 0
          : _a.call(getter, context);
    }
    function reaction() {
      if (ReactionStack.indexOf(reaction) === -1) {
        releaseBindingReactions(reaction);
        try {
          ReactionStack.push(reaction);
          compute();
        } finally {
          ReactionStack.pop();
        }
      }
    }
    reaction._name = 'ComputedReaction';
    reaction._scheduler = function () {
      reaction._dirty = true;
      batchStart();
      runReactionsFromTargetKey({
        target: context,
        key: property,
        value: store.value,
        type: 'set',
      });
      batchEnd();
    };
    reaction._isComputed = true;
    reaction._dirty = true;
    reaction._context = context;
    reaction._property = property;
    ProxyRaw.set(proxy, store);
    RawProxy.set(store, proxy);
    buildDataTree(target, key, store);
    function get() {
      if (hasRunningReaction()) {
        bindComputedReactions(reaction);
      }
      if (!isUntracking()) {
        //如果允许untracked过程中收集依赖，那么永远不会存在绑定，因为_dirty已经设置为false
        if (reaction._dirty) {
          reaction();
          reaction._dirty = false;
        }
      } else {
        compute();
      }
      bindTargetKeyWithCurrentReaction({
        target: context,
        key: property,
        type: 'get',
      });
      return store.value;
    }
    function set(value) {
      var _a;
      try {
        batchStart();
        (_a = setter === null || setter === void 0 ? void 0 : setter.call) === null || _a === void 0
          ? void 0
          : _a.call(setter, context, value);
      } finally {
        batchEnd();
      }
    }
    if (target) {
      Object.defineProperty(target, key, {
        get: get,
        set: set,
        enumerable: true,
        configurable: false,
      });
      return target;
    } else {
      Object.defineProperty(proxy, 'value', {
        set: set,
        get: get,
      });
    }
    return proxy;
  });

  function observable(target) {
    return createObservable(null, null, target);
  }
  observable.box = box;
  observable.ref = ref;
  observable.deep = observable$1;
  observable.shallow = shallow;
  observable.computed = computed;
  observable[MakeObservableSymbol] = observable$1;

  function define(target, annotations) {
    if (isObservable(target)) return target;
    if (!isSupportObservable(target)) return target;
    buildDataTree(undefined, undefined, target);
    ProxyRaw.set(target, target);
    RawProxy.set(target, target);
    for (var key in annotations) {
      var annotation = annotations[key];
      if (isAnnotation(annotation)) {
        getObservableMaker(annotation)({
          target: target,
          key: key,
        });
      }
    }
    return target;
  }

  var __assign$o =
    (undefined && undefined.__assign) ||
    function () {
      __assign$o =
        Object.assign ||
        function (t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
      return __assign$o.apply(this, arguments);
    };
  var autorun = function (tracker, name) {
    if (name === void 0) {
      name = 'AutoRun';
    }
    var reaction = function () {
      if (!isFn(tracker)) return;
      if (reaction._boundary > 0) return;
      if (ReactionStack.indexOf(reaction) === -1) {
        releaseBindingReactions(reaction);
        try {
          batchStart();
          ReactionStack.push(reaction);
          tracker();
        } finally {
          ReactionStack.pop();
          reaction._boundary++;
          batchEnd();
          reaction._boundary = 0;
          reaction._memos.cursor = 0;
          reaction._effects.cursor = 0;
        }
      }
    };
    var cleanRefs = function () {
      reaction._memos = {
        queue: [],
        cursor: 0,
      };
      reaction._effects = {
        queue: [],
        cursor: 0,
      };
    };
    reaction._boundary = 0;
    reaction._name = name;
    cleanRefs();
    reaction();
    return function () {
      disposeBindingReactions(reaction);
      disposeEffects(reaction);
      cleanRefs();
    };
  };
  autorun.memo = function (callback, dependencies) {
    if (!isFn(callback)) return;
    var current = ReactionStack[ReactionStack.length - 1];
    if (!current || !current._memos) throw new Error('autorun.memo must used in autorun function body.');
    var deps = toArray$1(dependencies || []);
    var id = current._memos.cursor++;
    var old = current._memos.queue[id];
    if (!old || hasDepsChange(deps, old.deps)) {
      var value = callback();
      current._memos.queue[id] = {
        value: value,
        deps: deps,
      };
      return value;
    }
    return old.value;
  };
  autorun.effect = function (callback, dependencies) {
    if (!isFn(callback)) return;
    var current = ReactionStack[ReactionStack.length - 1];
    if (!current || !current._effects) throw new Error('autorun.effect must used in autorun function body.');
    var effects = current._effects;
    var deps = toArray$1(dependencies || [{}]);
    var id = effects.cursor++;
    var old = effects.queue[id];
    if (!old || hasDepsChange(deps, old.deps)) {
      Promise.resolve(0).then(function () {
        if (current._disposed) return;
        var dispose = callback();
        if (isFn(dispose)) {
          effects.queue[id].dispose = dispose;
        }
      });
      effects.queue[id] = {
        deps: deps,
      };
    }
  };
  var reaction = function (tracker, subscriber, options) {
    var realOptions = __assign$o({ name: 'Reaction' }, options);
    var value = {};
    var dirtyCheck = function () {
      if (isFn(realOptions.equals)) return !realOptions.equals(value.oldValue, value.currentValue);
      return value.oldValue !== value.currentValue;
    };
    var fireAction = function () {
      try {
        batchStart();
        if (isFn(subscriber)) subscriber(value.currentValue, value.oldValue);
      } finally {
        batchEnd();
      }
    };
    var reaction = function () {
      if (ReactionStack.indexOf(reaction) === -1) {
        releaseBindingReactions(reaction);
        try {
          ReactionStack.push(reaction);
          value.currentValue = tracker();
        } finally {
          ReactionStack.pop();
        }
      }
    };
    reaction._scheduler = function (looping) {
      looping();
      if (dirtyCheck()) fireAction();
      value.oldValue = value.currentValue;
    };
    reaction._name = realOptions.name;
    reaction();
    value.oldValue = value.currentValue;
    if (realOptions.fireImmediately) {
      fireAction();
    }
    return function () {
      disposeBindingReactions(reaction);
    };
  };

  var Tracker = /** @class */ (function () {
    function Tracker(scheduler, name) {
      var _this = this;
      if (name === void 0) {
        name = 'TrackerReaction';
      }
      this.track = function (tracker) {
        if (!isFn(tracker)) return _this.results;
        if (_this.track._boundary > 0) return;
        if (ReactionStack.indexOf(_this.track) === -1) {
          releaseBindingReactions(_this.track);
          try {
            batchStart();
            ReactionStack.push(_this.track);
            _this.results = tracker();
          } finally {
            ReactionStack.pop();
            _this.track._boundary++;
            batchEnd();
            _this.track._boundary = 0;
          }
        }
        return _this.results;
      };
      this.dispose = function () {
        disposeBindingReactions(_this.track);
      };
      this.track._scheduler = function (callback) {
        if (_this.track._boundary === 0) _this.dispose();
        if (isFn(callback)) scheduler(callback);
      };
      this.track._name = name;
      this.track._boundary = 0;
    }
    return Tracker;
  })();

  var observe = function (target, observer, deep) {
    if (deep === void 0) {
      deep = true;
    }
    var addListener = function (target) {
      var raw = ProxyRaw.get(target) || target;
      var node = RawNode.get(raw);
      var listener = function (operation) {
        var targetRaw = ProxyRaw.get(operation.target) || operation.target;
        var targetNode = RawNode.get(targetRaw);
        if (deep) {
          if (node.contains(targetNode)) {
            observer(new DataChange(operation, targetNode));
            return;
          }
        }
        if (node === targetNode || (node.targetRaw === targetRaw && node.key === operation.key)) {
          observer(new DataChange(operation, targetNode));
        }
      };
      if (node && isFn(observer)) {
        ObserverListeners.add(listener);
      }
      return function () {
        ObserverListeners.delete(listener);
      };
    };
    if (target && typeof target !== 'object') throw Error('Can not observe ' + typeof target + ' type.');
    return addListener(target);
  };

  var isForm = function (node) {
    return node instanceof Form;
  };
  var isGeneralField = function (node) {
    return node instanceof Field$1 || node instanceof VoidField;
  };
  var isArrayField = function (node) {
    return node instanceof ArrayField;
  };
  var isObjectField = function (node) {
    return node instanceof ObjectField;
  };
  var isVoidField = function (node) {
    return node instanceof VoidField;
  };
  var isFormState = function (state) {
    if (isFn$2(state === null || state === void 0 ? void 0 : state.initialize)) return false;
    return (state === null || state === void 0 ? void 0 : state.displayName) === 'Form';
  };
  var isFieldState = function (state) {
    if (isFn$2(state === null || state === void 0 ? void 0 : state.initialize)) return false;
    return (state === null || state === void 0 ? void 0 : state.displayName) === 'Field';
  };
  var isArrayFieldState = function (state) {
    if (isFn$2(state === null || state === void 0 ? void 0 : state.initialize)) return false;
    return (state === null || state === void 0 ? void 0 : state.displayName) === 'ArrayField';
  };
  var isObjectFieldState = function (state) {
    if (isFn$2(state === null || state === void 0 ? void 0 : state.initialize)) return false;
    return (state === null || state === void 0 ? void 0 : state.displayName) === 'ObjectField';
  };
  var isQuery = function (query) {
    return query && query instanceof Query;
  };

  var Graph = /** @class */ (function () {
    function Graph(form) {
      var _this = this;
      this.getGraph = function () {
        var graph = {};
        graph[''] = _this.form.getState();
        each(_this.form.fields, function (field, identifier) {
          graph[identifier] = field.getState();
        });
        return graph;
      };
      this.setGraph = function (graph) {
        var form = _this.form;
        var createField = function (identifier, state) {
          var address = Path.parse(identifier);
          var name = address.segments[address.segments.length - 1];
          var basePath = address.parent();
          if (isFieldState(state)) {
            return _this.form.createField({ name: name, basePath: basePath });
          } else if (isArrayFieldState(state)) {
            return _this.form.createArrayField({ name: name, basePath: basePath });
          } else if (isObjectFieldState(state)) {
            return _this.form.createObjectField({ name: name, basePath: basePath });
          } else {
            return _this.form.createVoidField({ name: name, basePath: basePath });
          }
        };
        each(graph, function (state, address) {
          if (isFormState(state)) {
            form.setState(state);
          } else {
            var field = form.fields[address];
            if (field) {
              field.setState(state);
            } else {
              createField(address, state).setState(state);
            }
          }
        });
      };
      this.form = form;
      define(this, {
        setGraph: batch,
      });
    }
    return Graph;
  })();

  var output = function (field, taker) {
    if (!field) return;
    if (isFn$2(taker)) {
      return taker(field, field.address);
    }
    return field;
  };
  var Query = /** @class */ (function () {
    function Query(props) {
      var _this = this;
      this.addresses = [];
      this.pattern = Path.parse(props.pattern, props.base);
      this.form = props.form;
      if (!this.pattern.isMatchPattern) {
        var identifier = this.pattern.toString();
        var indexIdentifier = this.form.indexes[identifier];
        var absoluteField = this.form.fields[identifier];
        var indexField = this.form.fields[indexIdentifier];
        if (absoluteField) {
          this.addresses = [identifier];
        } else if (indexField) {
          this.addresses = [indexIdentifier];
        }
      } else {
        each(this.form.fields, function (field, address) {
          if (field.match(_this.pattern)) {
            _this.addresses.push(address);
          }
        });
      }
    }
    Query.prototype.take = function (taker) {
      return output(this.form.fields[this.addresses[0]], taker);
    };
    Query.prototype.map = function (iterator) {
      var _this = this;
      return this.addresses.map(function (address) {
        return output(_this.form.fields[address], iterator);
      });
    };
    Query.prototype.forEach = function (iterator) {
      var _this = this;
      return this.addresses.forEach(function (address) {
        return output(_this.form.fields[address], iterator);
      });
    };
    Query.prototype.reduce = function (reducer, initial) {
      var _this = this;
      return this.addresses.reduce(function (value, address) {
        return output(_this.form.fields[address], function (field, address) {
          return reducer(value, field, address);
        });
      }, initial);
    };
    Query.prototype.get = function (key) {
      var results = this.take();
      if (results) {
        return results[key];
      }
    };
    Query.prototype.getIn = function (pattern) {
      return Path.getIn(this.take(), pattern);
    };
    Query.prototype.value = function () {
      return this.form.getValuesIn(this.pattern);
    };
    Query.prototype.initialValue = function () {
      return this.form.getInitialValuesIn(this.pattern);
    };
    return Query;
  })();

  var isValidateResult = function (obj) {
    return !!obj['type'] && !!obj['message'];
  };

  var getIn = Path.getIn;
  var self$1 = globalThisPolyfill$1;
  var defaultLanguage = 'en';
  var getBrowserlanguage = function () {
    /* istanbul ignore next */
    if (!self$1.navigator) {
      return defaultLanguage;
    }
    return self$1.navigator.browserlanguage || self$1.navigator.language || defaultLanguage;
  };
  var registry$1 = {
    locales: {
      messages: {},
      language: getBrowserlanguage(),
    },
    formats: {},
    rules: {},
    template: null,
  };
  var getISOCode = function (language) {
    var isoCode = registry$1.locales.language;
    var lang = lowerCase(language);
    if (registry$1.locales.messages[language]) {
      return language;
    }
    each(registry$1.locales.messages, function (messages, key) {
      var target = lowerCase(key);
      if (target.indexOf(lang) > -1 || lang.indexOf(target) > -1) {
        isoCode = key;
        return false;
      }
    });
    return isoCode;
  };
  var getLocaleByPath = function (path, lang) {
    if (lang === void 0) {
      lang = registry$1.locales.language;
    }
    return getIn(registry$1.locales.messages, getISOCode(lang) + '.' + path);
  };
  var getValidateLocale = function (path) {
    var message = getLocaleByPath(path);
    return message || getLocaleByPath('pattern') || getLocaleByPath('pattern', defaultLanguage);
  };
  var getValidateMessageTemplateEngine = function () {
    return registry$1.template;
  };
  var getValidateFormats = function (key) {
    return key ? registry$1.formats[key] : registry$1.formats;
  };
  var getValidateRules = function (key) {
    return key ? registry$1.rules[key] : registry$1.rules;
  };
  var registerValidateLocale = function (locale) {
    registry$1.locales.messages = merge(registry$1.locales.messages, locale);
  };
  var registerValidateRules = function (rules) {
    each(rules, function (rule, key) {
      if (isFn$2(rule)) {
        registry$1.rules[key] = rule;
      }
    });
  };
  var registerValidateFormats = function (formats) {
    each(formats, function (pattern, key) {
      if (isStr$1(pattern) || pattern instanceof RegExp) {
        registry$1.formats[key] = new RegExp(pattern);
      }
    });
  };

  var render = function (result, rules) {
    var message = result.message;
    if (isStr$1(result.message)) {
      var template = getValidateMessageTemplateEngine();
      if (isFn$2(template)) {
        result.message = template(message, rules);
      }
      result.message = result.message.replace(/\{\{\s*([\w.]+)\s*\}\}/g, function (_, $0) {
        return Path.getIn(rules, $0);
      });
    }
    return result;
  };

  var __assign$n =
    (undefined && undefined.__assign) ||
    function () {
      __assign$n =
        Object.assign ||
        function (t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
      return __assign$n.apply(this, arguments);
    };
  var __awaiter$4 =
    (undefined && undefined.__awaiter) ||
    function (thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P
          ? value
          : new P(function (resolve) {
              resolve(value);
            });
      }
      return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator['throw'](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
  var __generator$4 =
    (undefined && undefined.__generator) ||
    function (thisArg, body) {
      var _ = {
          label: 0,
          sent: function () {
            if (t[0] & 1) throw t[1];
            return t[1];
          },
          trys: [],
          ops: [],
        },
        f,
        y,
        t,
        g;
      return (
        (g = { next: verb(0), throw: verb(1), return: verb(2) }),
        typeof Symbol === 'function' &&
          (g[Symbol.iterator] = function () {
            return this;
          }),
        g
      );
      function verb(n) {
        return function (v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f) throw new TypeError('Generator is already executing.');
        while (_)
          try {
            if (
              ((f = 1),
              y &&
                (t = op[0] & 2 ? y['return'] : op[0] ? y['throw'] || ((t = y['return']) && t.call(y), 0) : y.next) &&
                !(t = t.call(y, op[1])).done)
            )
              return t;
            if (((y = 0), t)) op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!((t = _.trys), (t = t.length > 0 && t[t.length - 1])) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2]) _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5) throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
  var getRuleMessage = function (rule, type) {
    if (rule.format) {
      return rule.message || getValidateLocale(rule.format);
    }
    return rule.message || getValidateLocale(type);
  };
  var parseValidatorDescription = function (description) {
    var rules = {};
    if (isStr$1(description)) {
      rules.format = description;
    } else if (isFn$2(description)) {
      rules.validator = description;
    } else {
      rules = Object.assign(rules, description);
    }
    rules.triggerType = rules.triggerType || 'onInput';
    return rules;
  };
  var parseValidatorDescriptions = function (validator) {
    var array = isArr$2(validator) ? validator : [validator];
    return array.map(function (description) {
      return parseValidatorDescription(description);
    });
  };
  var parseIValidatorRules = function (rules) {
    var rulesKeys = Object.keys(rules || {}).sort(function (key) {
      return key === 'validator' ? 1 : -1;
    });
    var getContext = function (context, value) {
      return __assign$n(__assign$n({}, rules), { value: value, context: context });
    };
    var createValidate = function (callback, message) {
      return function (value, context) {
        return __awaiter$4(void 0, void 0, void 0, function () {
          var context_, results, e_1;
          return __generator$4(this, function (_a) {
            switch (_a.label) {
              case 0:
                context_ = getContext(context, value);
                _a.label = 1;
              case 1:
                _a.trys.push([1, 3, , 4]);
                return [
                  4 /*yield*/,
                  callback(
                    value,
                    __assign$n(__assign$n({}, rules), { message: message }),
                    context_,
                    function (message, scope) {
                      var _a;
                      return (_a = render(
                        {
                          type: 'error',
                          message: message,
                        },
                        __assign$n(__assign$n({}, scope), context_),
                      )) === null || _a === void 0
                        ? void 0
                        : _a.message;
                    },
                  ),
                ];
              case 2:
                results = _a.sent();
                if (isBool(results)) {
                  if (!results) {
                    return [
                      2 /*return*/,
                      render(
                        {
                          type: 'error',
                          message: message,
                        },
                        context_,
                      ),
                    ];
                  }
                  return [
                    2 /*return*/,
                    {
                      type: 'error',
                      message: undefined,
                    },
                  ];
                } else if (results) {
                  if (isValidateResult(results)) {
                    return [2 /*return*/, render(results, context_)];
                  }
                  return [
                    2 /*return*/,
                    render(
                      {
                        type: 'error',
                        message: results,
                      },
                      context_,
                    ),
                  ];
                }
                return [
                  2 /*return*/,
                  {
                    type: 'error',
                    message: undefined,
                  },
                ];
              case 3:
                e_1 = _a.sent();
                return [
                  2 /*return*/,
                  {
                    type: 'error',
                    message: (e_1 === null || e_1 === void 0 ? void 0 : e_1.message) || e_1,
                  },
                ];
              case 4:
                return [2 /*return*/];
            }
          });
        });
      };
    };
    return rulesKeys.reduce(function (buf, key) {
      var callback = getValidateRules(key);
      return callback ? buf.concat(createValidate(callback, getRuleMessage(rules, key))) : buf;
    }, []);
  };
  var parseValidator = function (validator, options) {
    if (options === void 0) {
      options = {};
    }
    var array = isArr$2(validator) ? validator : [validator];
    var results = [];
    return array.reduce(function (buf, description) {
      var rules = parseValidatorDescription(description);
      if (
        (options === null || options === void 0 ? void 0 : options.triggerType) &&
        options.triggerType !== rules.triggerType
      )
        return buf;
      return rules ? buf.concat(parseIValidatorRules(rules)) : buf;
    }, results);
  };

  var locales = {
    en: {
      pattern: 'This field is invalid',
      invalid: 'This field is invalid',
      required: 'The field value is required',
      number: 'The field value is not a number',
      integer: 'The field value is not an integer number',
      url: 'The field value is a invalid url',
      email: 'The field value is not a email format',
      ipv6: 'The field value is not a ipv6 format',
      ipv4: 'The field value is not a ipv4 format',
      idcard: 'The field value is not an idcard format',
      qq: 'The field value is not a qq number format',
      phone: 'The field value is not a phone number format',
      money: 'The field value is not a currency format',
      zh: 'The field value is not a chinese string',
      date: 'The field value is not a valid date format',
      zip: 'The field value is not a zip format',
      len: 'The length or number of entries must be {{len}}',
      min: 'The length or number of entries must be at least {{min}}',
      minLength: 'The length or number of entries must be at least {{minLength}}',
      minItems: 'The length or number of entries must be at least {{minItems}}',
      maximum: 'The field value cannot be greater than {{maximum}}',
      exclusiveMaximum: 'The field value must be less than {{exclusiveMaximum}}',
      minimum: 'The field value cannot be less than {{minimum}}',
      exclusiveMinimum: 'The field value must be greater than {{exclusiveMinimum}}',
      max: 'The field length or number of entries must be at most {{max}}',
      maxLength: 'The field length or number of entries must be at most {{maxLength}}',
      maxItems: 'The field length or number of entries must be at most {{maxItems}}',
      whitespace: 'This field value cannot be blank string.',
      enum: 'The field value must be one of {{enum}}',
      const: 'The field value must be equal to {{const}}',
      multipleOf: 'The field value must be divisible by {{multipleOf}}',
      maxProperties: 'The number of field properties cannot be greater than {{maxProperties}}',
      minProperties: 'The number of field properties cannot be less than {{maxProperties}}',
      uniqueItems: 'Array elements are not unique',
    },
    zh: {
      pattern: '该字段不是一个合法的字段',
      invalid: '该字段不是一个合法的字段',
      required: '该字段是必填字段',
      number: '该字段不是合法的数字',
      integer: '该字段不是合法的整型数字',
      url: '该字段不是合法的url',
      email: '该字段不是合法的邮箱格式',
      ipv6: '该字段不是合法的ipv6格式',
      ipv4: '该字段不是合法的ipv4格式',
      idcard: '该字段不是合法的身份证格式',
      qq: '该字段不符合QQ号格式',
      phone: '该字段不是有效的手机号',
      money: '该字段不是有效货币格式',
      zh: '该字段不是合法的中文字符串',
      date: '该字段不是合法的日期格式',
      zip: '该字段不是合法的邮编格式',
      len: '长度或条目数必须为{{len}}',
      min: '长度或条目数不能小于{{min}}',
      minLength: '长度或条目数不能小于{{minLength}}',
      minItems: '长度或条目数不能小于{{minItems}}',
      max: '长度或条目数不能大于{{max}}',
      maxLength: '长度或条目数不能大于{{maxLength}}',
      maxItems: '长度或条目数不能大于{{maxItems}}',
      maximum: '数值不能大于{{maximum}}',
      exclusiveMaximum: '数值必须小于{{exclusiveMaximum}}',
      minimum: '数值不能小于{{minimum}}',
      exclusiveMinimum: '数值必须大于{{exclusiveMinimum}}',
      whitespace: '不能为纯空白字符串',
      enum: '字段值必须为{{enum}}其中一个',
      const: '字段值必须等于{{const}}',
      multipleOf: '字段值不能被{{multipleOf}}整除',
      maxProperties: '字段属性数量不能大于{{maxProperties}}',
      minProperties: '字段属性数量不能小于{{minProperties}}',
      uniqueItems: '数组元素不唯一',
    },
    'en-US': {
      pattern: 'This field is invalid',
      invalid: 'This field is invalid',
      required: 'The field value is required',
      number: 'The field value is not a number',
      integer: 'The field value is not an integer number',
      url: 'The field value is a invalid url',
      email: 'The field value is not a email format',
      ipv6: 'The field value is not a ipv6 format',
      ipv4: 'The field value is not a ipv4 format',
      idcard: 'The field value is not an idcard format',
      qq: 'The field value is not a qq number format',
      phone: 'The field value is not a phone number format',
      money: 'The field value is not a currency format',
      zh: 'The field value is not a chinese string',
      date: 'The field value is not a valid date format',
      zip: 'The field value is not a zip format',
      len: 'The length or number of entries must be {{len}}',
      min: 'The length or number of entries must be at least {{min}}',
      minLength: 'The length or number of entries must be at least {{minLength}}',
      minItems: 'The length or number of entries must be at least {{minItems}}',
      maximum: 'The field value cannot be greater than {{maximum}}',
      exclusiveMaximum: 'The field value must be less than {{exclusiveMaximum}}',
      minimum: 'The field value cannot be less than {{minimum}}',
      exclusiveMinimum: 'The field value must be greater than {{exclusiveMinimum}}',
      max: 'The field length or number of entries must be at most {{max}}',
      maxLength: 'The field length or number of entries must be at most {{maxLength}}',
      maxItems: 'The field length or number of entries must be at most {{maxItems}}',
      whitespace: 'This field value cannot be blank string.',
      enum: 'The field value must be one of {{enum}}',
      const: 'The field value must be equal to {{const}}',
      multipleOf: 'The field value must be divisible by {{multipleOf}}',
      maxProperties: 'The number of field properties cannot be greater than {{maxProperties}}',
      minProperties: 'The number of field properties cannot be less than {{maxProperties}}',
      uniqueItems: 'Array elements are not unique',
    },
    'zh-CN': {
      pattern: '该字段不是一个合法的字段',
      invalid: '该字段不是一个合法的字段',
      required: '该字段是必填字段',
      number: '该字段不是合法的数字',
      integer: '该字段不是合法的整型数字',
      url: '该字段不是合法的url',
      email: '该字段不是合法的邮箱格式',
      ipv6: '该字段不是合法的ipv6格式',
      ipv4: '该字段不是合法的ipv4格式',
      idcard: '该字段不是合法的身份证格式',
      qq: '该字段不符合QQ号格式',
      phone: '该字段不是有效的手机号',
      money: '该字段不是有效货币格式',
      zh: '该字段不是合法的中文字符串',
      date: '该字段不是合法的日期格式',
      zip: '该字段不是合法的邮编格式',
      len: '长度或条目数必须为{{len}}',
      min: '长度或条目数不能小于{{min}}',
      minLength: '长度或条目数不能小于{{minLength}}',
      minItems: '长度或条目数不能小于{{minItems}}',
      maxLength: '长度或条目数不能大于{{maxLength}}',
      maxItems: '长度或条目数不能大于{{maxItems}}',
      max: '长度或条目数不能大于{{max}}',
      maximum: '数值不能大于{{maximum}}',
      exclusiveMaximum: '数值必须小于{{exclusiveMaximum}}',
      minimum: '数值不能小于{{minimum}}',
      exclusiveMinimum: '数值必须大于{{exclusiveMinimum}}',
      whitespace: '不能为纯空白字符串',
      enum: '字段值必须为{{enum}}其中一个',
      const: '字段值必须等于{{const}}',
      multipleOf: '字段值不能被{{multipleOf}}整除',
      maxProperties: '字段属性数量不能大于{{maxProperties}}',
      minProperties: '字段属性数量不能小于{{minProperties}}',
      uniqueItems: '数组元素不唯一',
    },
    'zh-TW': {
      pattern: '該字段不是一個合法的字段',
      invalid: '該字段不是一個合法的字段',
      required: '該字段是必填字段',
      number: '該字段不是合法的數字',
      integer: '該字段不是合法的整型數字',
      url: '該字段不是合法的url',
      email: '該字段不是合法的郵箱格式',
      ipv6: '該字段不是合法的ipv6格式',
      ipv4: '該字段不是合法的ipv4格式',
      idcard: '該字段不是合法的身份證格式',
      qq: '該字段不符合QQ號格式',
      phone: '該字段不是有效的手機號',
      money: '該字段不是有效貨幣格式',
      zh: '該字段不是合法的中文字符串',
      date: '該字段不是合法的日期格式',
      zip: '該字段不是合法的郵編格式',
      len: '長度或條目數必須為{{len}}',
      min: '長度或條目數不能小於{{min}}',
      minItems: '長度或條目數不能小於{{minItems}}',
      minLength: '長度或條目數不能小於{{minLength}}',
      max: '長度或條目數不能大於{{max}}',
      maxItems: '長度或條目數不能大於{{maxItems}}',
      maxLength: '長度或條目數不能大於{{maxLength}}',
      maximum: '數值不能大於{{maximum}}',
      exclusiveMaximum: '數值必須小於{{exclusiveMaximum}}',
      minimum: '數值不能小於{{minimum}}',
      exclusiveMinimum: '數值必須大於{{exclusiveMinimum}}',
      whitespace: '不能為純空白字符串',
      enum: '字段值必須為{{enum}}其中一個',
      const: '字段值必須等於{{const}}',
      multipleOf: '字段值不能被{{multipleOf}}整除',
      maxProperties: '字段屬性數量不能大於{{maxProperties}}',
      minProperties: '字段屬性數量不能小於{{minProperties}}',
      uniqueItems: '數組元素不唯一',
    },
    ja: {
      url: 'このフィールドは無効なURLです',
      whitespace: 'このフィールドを空の文字列にすることはできません。',
      zh: 'このフィールドは中国語の文字列ではありません',
      zip: 'このフィールドはzip形式ではありません',
      date: 'このフィールドは有効な日付形式ではありません',
      email: 'このフィールドはメール形式ではありません',
      exclusiveMaximum: '値は{{exclusiveMaximum}}未満である必要があります',
      exclusiveMinimum: '値は{{exclusiveMinimum}}より大きい必要があります',
      idcard: 'このフィールドはIDカード形式ではありません',
      integer: 'このフィールドは整数ではありません',
      ipv4: 'このフィールドはIPv4形式ではありません',
      ipv6: 'このフィールドはIPv6形式ではありません',
      len: 'エントリの長さまたは数は{{len}}でなければなりません',
      max: 'エントリの長さまたは数は最大{{max}}でなければなりません',
      maxItems: 'エントリの長さまたは数は最大{{maxItems}}でなければなりません',
      maxLength: 'エントリの長さまたは数は最大{{maxLength}}でなければなりません',
      maximum: '値は{{最大}}を超えることはできません',
      min: 'エントリの長さまたは数は、少なくとも{{min}}である必要があります',
      minItems: 'エントリの長さまたは数は、少なくとも{{minItems}}である必要があります',
      minLength: 'エントリの長さまたは数は、少なくとも{{minLength}}である必要があります',
      minimum: '値は{{minimum}}以上にする必要があります',
      money: 'このフィールドは通貨形式ではありません',
      number: 'このフィールドは数値ではありません',
      pattern: 'このフィールドはどのパターンとも一致しません',
      invalid: 'このフィールドはどのパターンとも一致しません',
      phone: 'このフィールドは電話番号の形式ではありません',
      qq: 'このフィールドはqq数値形式ではありません',
      required: 'この項目は必須です',
      enum: 'フィールド値は{{enum}}のいずれかである必要があります',
      cons: 'フィールド値は{{const}}と等しくなければなりません',
      multipleOf: 'フィールド値を{{multipleOf}}で割り切れない',
      maxProperties: 'フィールドプロパティの数は{{maxProperties}}を超えることはできません',
      minProperties: 'フィールドプロパティの数は{{minProperties}}未満にすることはできません',
      uniqueItems: '配列要素は一意ではありません',
    },
  };

  var formats = {
    url: new RegExp(
      // protocol identifier
      '^(?:(?:(?:https?|ftp|rtmp):)?//)' +
        // user:pass authentication
        '(?:\\S+(?::\\S*)?@)?' +
        '(?:' +
        // IP address exclusion - private & local networks
        // Reference: https://www.arin.net/knowledge/address_filters.html
        // filter 10.*.*.* and 127.*.*.* adresses
        '(?!(?:10|127)(?:\\.\\d{1,3}){3})' +
        // filter 169.254.*.* and 192.168.*.*
        '(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})' +
        // filter 172.16.0.0 - 172.31.255.255
        // TODO: add test to validate that it invalides address in 16-31 range
        '(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})' +
        // IP address dotted notation octets
        // excludes loopback network 0.0.0.0
        // excludes reserved space >= 224.0.0.0
        // excludes network & broacast addresses
        // (first & last IP address of each class)
        // filter 1. part for 1-223
        '(?:22[0-3]|2[01]\\d|[1-9]\\d?|1\\d\\d)' +
        // filter 2. and 3. part for 0-255
        '(?:\\.(?:25[0-5]|2[0-4]\\d|1?\\d{1,2})){2}' +
        // filter 4. part for 1-254
        '(?:\\.(?:25[0-4]|2[0-4]\\d|1\\d\\d|[1-9]\\d?))' +
        '|' +
        // host name
        '(?:(?:[a-z\\u00a1-\\uffff0-9_]-*)*[a-z\\u00a1-\\uffff0-9_]+)' +
        // domain name
        '(?:\\.(?:[a-z\\u00a1-\\uffff0-9_]-*)*[a-z\\u00a1-\\uffff0-9_]+)*' +
        // TLD identifier
        '(?:\\.(?:[a-z\\u00a1-\\uffff_]{2,}))' +
        ')' +
        // port number
        '(?::\\d{2,5})?' +
        // resource path
        '(?:/?\\S*)?$',
    ),
    email: /^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/,
    ipv6: /^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/,
    ipv4: /^((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\.){3}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})$/,
    number: /^[+-]?\d+(\.\d+)?$/,
    integer: /^[+-]?\d+$/,
    qq: /^(\+?[1-9]\d*|0)$/,
    phone: /^\d{3}-\d{8}$|^\d{4}-\d{7}$|^\d{11}$/,
    idcard: /^\d{15}$|^\d{17}(\d|x|X)$/,
    money: /^([\u0024\u00A2\u00A3\u00A4\u20AC\u00A5\u20B1\20B9\uFFE5]\s*)(\d+,?)+\.?\d*\s*$/,
    zh: /^[\u4e00-\u9fa5]+$/,
    date: /^[0-9]+[./-][0-9]+[./-][0-9]+\s*(?:[0-9]+\s*:\s*[0-9]+\s*:\s*[0-9]+)?$/,
    zip: /^[0-9]{6}$/,
  };

  var __assign$m =
    (undefined && undefined.__assign) ||
    function () {
      __assign$m =
        Object.assign ||
        function (t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
      return __assign$m.apply(this, arguments);
    };
  var __awaiter$3 =
    (undefined && undefined.__awaiter) ||
    function (thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P
          ? value
          : new P(function (resolve) {
              resolve(value);
            });
      }
      return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator['throw'](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
  var __generator$3 =
    (undefined && undefined.__generator) ||
    function (thisArg, body) {
      var _ = {
          label: 0,
          sent: function () {
            if (t[0] & 1) throw t[1];
            return t[1];
          },
          trys: [],
          ops: [],
        },
        f,
        y,
        t,
        g;
      return (
        (g = { next: verb(0), throw: verb(1), return: verb(2) }),
        typeof Symbol === 'function' &&
          (g[Symbol.iterator] = function () {
            return this;
          }),
        g
      );
      function verb(n) {
        return function (v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f) throw new TypeError('Generator is already executing.');
        while (_)
          try {
            if (
              ((f = 1),
              y &&
                (t = op[0] & 2 ? y['return'] : op[0] ? y['throw'] || ((t = y['return']) && t.call(y), 0) : y.next) &&
                !(t = t.call(y, op[1])).done)
            )
              return t;
            if (((y = 0), t)) op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!((t = _.trys), (t = t.length > 0 && t[t.length - 1])) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2]) _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5) throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
  var __read$8 =
    (undefined && undefined.__read) ||
    function (o, n) {
      var m = typeof Symbol === 'function' && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o),
        r,
        ar = [],
        e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error: error };
      } finally {
        try {
          if (r && !r.done && (m = i['return'])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
  var __spreadArray$3 =
    (undefined && undefined.__spreadArray) ||
    function (to, from, pack) {
      if (pack || arguments.length === 2)
        for (var i = 0, l = from.length, ar; i < l; i++) {
          if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
          }
        }
      return to.concat(ar || Array.prototype.slice.call(from));
    };
  var isValidateEmpty = function (value) {
    var _a;
    if (isArr$2(value)) {
      for (var i = 0; i < value.length; i++) {
        if (isValid$4(value[i])) return false;
      }
      return true;
    } else {
      //compat to draft-js
      if (value === null || value === void 0 ? void 0 : value.getCurrentContent) {
        /* istanbul ignore next */
        return !((_a = value.getCurrentContent()) === null || _a === void 0 ? void 0 : _a.hasText());
      }
      return isEmpty(value);
    }
  };
  var getLength = function (value) {
    return isStr$1(value) ? stringLength(value) : value ? value.length : 0;
  };
  var extendSameRules = function (rules, names) {
    each(names, function (realName, name) {
      rules[name] = function (value, rule) {
        var _a;
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
          args[_i - 2] = arguments[_i];
        }
        return rules[realName].apply(
          rules,
          __spreadArray$3(
            [value, __assign$m(__assign$m({}, rule), ((_a = {}), (_a[realName] = rule[name]), _a))],
            __read$8(args),
            false,
          ),
        );
      };
    });
  };
  var RULES = {
    format: function (value, rule) {
      if (isValidateEmpty(value)) return '';
      return !new RegExp(getValidateFormats(rule.format) || '').test(value) ? rule.message : '';
    },
    required: function (value, rule) {
      if (rule.required === false) return '';
      return isValidateEmpty(value) ? rule.message : '';
    },
    max: function (value, rule) {
      if (isValidateEmpty(value)) return '';
      var length = isNum$1(value) ? value : getLength(value);
      var max = Number(rule.max);
      return length > max ? rule.message : '';
    },
    min: function (value, rule) {
      if (isValidateEmpty(value)) return '';
      var length = isNum$1(value) ? value : getLength(value);
      var min = Number(rule.min);
      return length < min ? rule.message : '';
    },
    exclusiveMaximum: function (value, rule) {
      if (isValidateEmpty(value)) return '';
      var length = isNum$1(value) ? value : getLength(value);
      var max = Number(rule.exclusiveMaximum);
      return length >= max ? rule.message : '';
    },
    exclusiveMinimum: function (value, rule) {
      if (isValidateEmpty(value)) return '';
      var length = isNum$1(value) ? value : getLength(value);
      var min = Number(rule.exclusiveMinimum);
      return length <= min ? rule.message : '';
    },
    len: function (value, rule) {
      if (isValidateEmpty(value)) return '';
      var length = getLength(value);
      var len = Number(rule.len);
      return length !== len ? rule.message : '';
    },
    pattern: function (value, rule) {
      if (isValidateEmpty(value)) return '';
      return !new RegExp(rule.pattern).test(value) ? rule.message : '';
    },
    validator: function (value, rule, context, format) {
      return __awaiter$3(this, void 0, void 0, function () {
        var response;
        return __generator$3(this, function (_a) {
          switch (_a.label) {
            case 0:
              if (!isFn$2(rule.validator)) return [3 /*break*/, 2];
              return [4 /*yield*/, Promise.resolve(rule.validator(value, rule, context, format))];
            case 1:
              response = _a.sent();
              if (isBool(response)) {
                return [2 /*return*/, !response ? rule.message : ''];
              } else {
                return [2 /*return*/, response];
              }
            case 2:
              /* istanbul ignore next */
              throw new Error("The rule's validator property must be a function.");
          }
        });
      });
    },
    whitespace: function (value, rule) {
      if (isValidateEmpty(value)) return '';
      if (rule.whitespace) {
        return /^\s+$/.test(value) ? rule.message : '';
      }
    },
    enum: function (value, rule) {
      if (isValidateEmpty(value)) return '';
      var enums = toArr$1(rule.enum);
      return enums.indexOf(value) === -1 ? rule.message : '';
    },
    const: function (value, rule) {
      if (isValidateEmpty(value)) return '';
      return rule.const !== value ? rule.message : '';
    },
    multipleOf: function (value, rule) {
      if (isValidateEmpty(value)) return '';
      return Number(value) % Number(rule.multipleOf) !== 0 ? rule.message : '';
    },
    uniqueItems: function (value, rule) {
      if (isValidateEmpty(value)) return '';
      value = toArr$1(value);
      return value.some(function (item, index) {
        for (var i = 0; i < value.length; i++) {
          if (i !== index && !isEqual$1(value[i], item)) {
            return false;
          }
        }
        return true;
      })
        ? ''
        : rule.message;
    },
    maxProperties: function (value, rule) {
      if (isValidateEmpty(value)) return '';
      return Object.keys(value || {}).length <= Number(rule.maxProperties) ? '' : rule.message;
    },
    minProperties: function (value, rule) {
      if (isValidateEmpty(value)) return '';
      return Object.keys(value || {}).length >= Number(rule.minProperties) ? '' : rule.message;
    },
  };
  extendSameRules(RULES, {
    maximum: 'max',
    minimum: 'min',
    maxItems: 'max',
    minItems: 'min',
    maxLength: 'max',
    minLength: 'min',
  });

  var __awaiter$2 =
    (undefined && undefined.__awaiter) ||
    function (thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P
          ? value
          : new P(function (resolve) {
              resolve(value);
            });
      }
      return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator['throw'](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
  var __generator$2 =
    (undefined && undefined.__generator) ||
    function (thisArg, body) {
      var _ = {
          label: 0,
          sent: function () {
            if (t[0] & 1) throw t[1];
            return t[1];
          },
          trys: [],
          ops: [],
        },
        f,
        y,
        t,
        g;
      return (
        (g = { next: verb(0), throw: verb(1), return: verb(2) }),
        typeof Symbol === 'function' &&
          (g[Symbol.iterator] = function () {
            return this;
          }),
        g
      );
      function verb(n) {
        return function (v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f) throw new TypeError('Generator is already executing.');
        while (_)
          try {
            if (
              ((f = 1),
              y &&
                (t = op[0] & 2 ? y['return'] : op[0] ? y['throw'] || ((t = y['return']) && t.call(y), 0) : y.next) &&
                !(t = t.call(y, op[1])).done)
            )
              return t;
            if (((y = 0), t)) op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!((t = _.trys), (t = t.length > 0 && t[t.length - 1])) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2]) _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5) throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
  registerValidateRules(RULES);
  registerValidateLocale(locales);
  registerValidateFormats(formats);
  var validate = function (value, validator, options) {
    return __awaiter$2(void 0, void 0, void 0, function () {
      var validates, results, i, result, type, message;
      return __generator$2(this, function (_a) {
        switch (_a.label) {
          case 0:
            validates = parseValidator(validator, options);
            results = {
              error: [],
              success: [],
              warning: [],
            };
            i = 0;
            _a.label = 1;
          case 1:
            if (!(i < validates.length)) return [3 /*break*/, 4];
            return [
              4 /*yield*/,
              validates[i](value, options === null || options === void 0 ? void 0 : options.context),
            ];
          case 2:
            result = _a.sent();
            (type = result.type), (message = result.message);
            results[type] = results[type] || [];
            if (message) {
              results[type].push(message);
              if (options === null || options === void 0 ? void 0 : options.validateFirst) return [3 /*break*/, 4];
            }
            _a.label = 3;
          case 3:
            i++;
            return [3 /*break*/, 1];
          case 4:
            return [2 /*return*/, results];
        }
      });
    });
  };

  var LifeCycleTypes;
  (function (LifeCycleTypes) {
    /**
     * Form LifeCycle
     **/
    LifeCycleTypes['ON_FORM_INIT'] = 'onFormInit';
    LifeCycleTypes['ON_FORM_MOUNT'] = 'onFormMount';
    LifeCycleTypes['ON_FORM_UNMOUNT'] = 'onFormUnmount';
    LifeCycleTypes['ON_FORM_INPUT_CHANGE'] = 'onFormInputChange';
    LifeCycleTypes['ON_FORM_VALUES_CHANGE'] = 'onFormValuesChange';
    LifeCycleTypes['ON_FORM_INITIAL_VALUES_CHANGE'] = 'onFormInitialValuesChange';
    LifeCycleTypes['ON_FORM_SUBMIT'] = 'onFormSubmit';
    LifeCycleTypes['ON_FORM_RESET'] = 'onFormReset';
    LifeCycleTypes['ON_FORM_SUBMIT_START'] = 'onFormSubmitStart';
    LifeCycleTypes['ON_FORM_SUBMITTING'] = 'onFormSubmitting';
    LifeCycleTypes['ON_FORM_SUBMIT_END'] = 'onFormSubmitEnd';
    LifeCycleTypes['ON_FORM_SUBMIT_VALIDATE_START'] = 'onFormSubmitValidateStart';
    LifeCycleTypes['ON_FORM_SUBMIT_VALIDATE_SUCCESS'] = 'onFormSubmitValidateSuccess';
    LifeCycleTypes['ON_FORM_SUBMIT_VALIDATE_FAILED'] = 'onFormSubmitValidateFailed';
    LifeCycleTypes['ON_FORM_SUBMIT_VALIDATE_END'] = 'onFormSubmitValidateEnd';
    LifeCycleTypes['ON_FORM_SUBMIT_SUCCESS'] = 'onFormSubmitSuccess';
    LifeCycleTypes['ON_FORM_SUBMIT_FAILED'] = 'onFormSubmitFailed';
    LifeCycleTypes['ON_FORM_VALIDATE_START'] = 'onFormValidateStart';
    LifeCycleTypes['ON_FORM_VALIDATING'] = 'onFormValidating';
    LifeCycleTypes['ON_FORM_VALIDATE_SUCCESS'] = 'onFormValidateSuccess';
    LifeCycleTypes['ON_FORM_VALIDATE_FAILED'] = 'onFormValidateFailed';
    LifeCycleTypes['ON_FORM_VALIDATE_END'] = 'onFormValidateEnd';
    LifeCycleTypes['ON_FORM_GRAPH_CHANGE'] = 'onFormGraphChange';
    LifeCycleTypes['ON_FORM_LOADING'] = 'onFormLoading';
    /**
     * Field LifeCycle
     **/
    LifeCycleTypes['ON_FIELD_INIT'] = 'onFieldInit';
    LifeCycleTypes['ON_FIELD_INPUT_VALUE_CHANGE'] = 'onFieldInputValueChange';
    LifeCycleTypes['ON_FIELD_VALUE_CHANGE'] = 'onFieldValueChange';
    LifeCycleTypes['ON_FIELD_INITIAL_VALUE_CHANGE'] = 'onFieldInitialValueChange';
    LifeCycleTypes['ON_FIELD_SUBMIT'] = 'onFieldSubmit';
    LifeCycleTypes['ON_FIELD_SUBMIT_START'] = 'onFieldSubmitStart';
    LifeCycleTypes['ON_FIELD_SUBMITTING'] = 'onFieldSubmitting';
    LifeCycleTypes['ON_FIELD_SUBMIT_END'] = 'onFieldSubmitEnd';
    LifeCycleTypes['ON_FIELD_SUBMIT_VALIDATE_START'] = 'onFieldSubmitValidateStart';
    LifeCycleTypes['ON_FIELD_SUBMIT_VALIDATE_SUCCESS'] = 'onFieldSubmitValidateSuccess';
    LifeCycleTypes['ON_FIELD_SUBMIT_VALIDATE_FAILED'] = 'onFieldSubmitValidateFailed';
    LifeCycleTypes['ON_FIELD_SUBMIT_VALIDATE_END'] = 'onFieldSubmitValidateEnd';
    LifeCycleTypes['ON_FIELD_SUBMIT_SUCCESS'] = 'onFieldSubmitSuccess';
    LifeCycleTypes['ON_FIELD_SUBMIT_FAILED'] = 'onFieldSubmitFailed';
    LifeCycleTypes['ON_FIELD_VALIDATE_START'] = 'onFieldValidateStart';
    LifeCycleTypes['ON_FIELD_VALIDATING'] = 'onFieldValidating';
    LifeCycleTypes['ON_FIELD_VALIDATE_SUCCESS'] = 'onFieldValidateSuccess';
    LifeCycleTypes['ON_FIELD_VALIDATE_FAILED'] = 'onFieldValidateFailed';
    LifeCycleTypes['ON_FIELD_VALIDATE_END'] = 'onFieldValidateEnd';
    LifeCycleTypes['ON_FIELD_LOADING'] = 'onFieldLoading';
    LifeCycleTypes['ON_FIELD_RESET'] = 'onFieldReset';
    LifeCycleTypes['ON_FIELD_MOUNT'] = 'onFieldMount';
    LifeCycleTypes['ON_FIELD_UNMOUNT'] = 'onFieldUnmount';
  })(LifeCycleTypes || (LifeCycleTypes = {}));

  var ReservedProperties = {
    form: true,
    parent: true,
    props: true,
    caches: true,
    requests: true,
    disposers: true,
    heart: true,
    graph: true,
    indexes: true,
    fields: true,
    lifecycles: true,
    componentType: true,
    componentProps: true,
    decoratorType: true,
    decoratorProps: true,
  };
  var ReadOnlyProperties = {
    address: true,
    path: true,
    valid: true,
    invalid: true,
    selfValid: true,
    selfInvalid: true,
    errors: true,
    successes: true,
    warnings: true,
    validateStatus: true,
  };
  var SELF_DISPLAY = 'selfDisplay';
  var SELF_PATTERN = 'selfPattern';
  var MutuallyExclusiveProperties = {
    pattern: SELF_PATTERN,
    editable: SELF_PATTERN,
    readOnly: SELF_PATTERN,
    readPretty: SELF_PATTERN,
    disabled: SELF_PATTERN,
    display: SELF_DISPLAY,
    hidden: SELF_DISPLAY,
    visible: SELF_DISPLAY,
  };
  var RESPONSE_REQUEST_DURATION = 100;
  var GlobalState = {
    lifecycles: [],
    context: [],
    effectStart: false,
    effectEnd: false,
    initializing: false,
  };
  var NumberIndexReg = /^\.(\d+)/;

  var __assign$l =
    (undefined && undefined.__assign) ||
    function () {
      __assign$l =
        Object.assign ||
        function (t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
      return __assign$l.apply(this, arguments);
    };
  var __awaiter$1 =
    (undefined && undefined.__awaiter) ||
    function (thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P
          ? value
          : new P(function (resolve) {
              resolve(value);
            });
      }
      return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator['throw'](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
  var __generator$1 =
    (undefined && undefined.__generator) ||
    function (thisArg, body) {
      var _ = {
          label: 0,
          sent: function () {
            if (t[0] & 1) throw t[1];
            return t[1];
          },
          trys: [],
          ops: [],
        },
        f,
        y,
        t,
        g;
      return (
        (g = { next: verb(0), throw: verb(1), return: verb(2) }),
        typeof Symbol === 'function' &&
          (g[Symbol.iterator] = function () {
            return this;
          }),
        g
      );
      function verb(n) {
        return function (v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f) throw new TypeError('Generator is already executing.');
        while (_)
          try {
            if (
              ((f = 1),
              y &&
                (t = op[0] & 2 ? y['return'] : op[0] ? y['throw'] || ((t = y['return']) && t.call(y), 0) : y.next) &&
                !(t = t.call(y, op[1])).done)
            )
              return t;
            if (((y = 0), t)) op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!((t = _.trys), (t = t.length > 0 && t[t.length - 1])) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2]) _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5) throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var notify = function (target, formType, fieldType) {
    if (isForm(target)) {
      target.notify(formType);
    } else {
      target.notify(fieldType);
    }
  };
  var isHTMLInputEvent = function (event, stopPropagation) {
    var _a;
    if (stopPropagation === void 0) {
      stopPropagation = true;
    }
    if (event === null || event === void 0 ? void 0 : event.target) {
      if (isValid$4(event.target.value) || isValid$4(event.target.checked)) return true;
      if (
        event.target.tagName &&
        event.target.tagName !== 'INPUT' &&
        event.target.tagName !== 'TEXTAREA' &&
        event.target.tagName !== 'SELECT'
      ) {
        return false;
      }
      if (stopPropagation) (_a = event.stopPropagation) === null || _a === void 0 ? void 0 : _a.call(event);
      return true;
    }
    return false;
  };
  var getValuesFromEvent = function (args) {
    return args.map(function (event) {
      if (event === null || event === void 0 ? void 0 : event.target) {
        if (isValid$4(event.target.value)) return event.target.value;
        if (isValid$4(event.target.checked)) return event.target.checked;
        return;
      }
      return event;
    });
  };
  var buildFieldPath = function (field) {
    var prevArray = false;
    var fields = field.form.fields;
    var segments = field.address.segments;
    var path = segments.reduce(function (path, key, index) {
      var currentPath = path.concat(key);
      var currentAddress = segments.slice(0, index + 1);
      var current = fields[currentAddress.join('.')];
      if (prevArray) {
        prevArray = false;
        return path;
      }
      if (index >= segments.length - 1) {
        if (isVoidField(field)) {
          return currentPath;
        }
        return currentPath;
      }
      if (isVoidField(current)) {
        var parentAddress = segments.slice(0, index);
        var parent_1 = fields[parentAddress.join('.')];
        if (isArrayField(parent_1) && isNumberLike$1(key)) {
          prevArray = true;
          return currentPath;
        }
        return path;
      } else {
        prevArray = false;
      }
      return currentPath;
    }, []);
    return new Path(path);
  };
  var buildNodeIndexes = function (field, address) {
    field.address = Path.parse(address);
    field.path = buildFieldPath(field);
    field.form.indexes[field.path.toString()] = field.address.toString();
    return field;
  };
  var patchFieldStates = function (target, patches) {
    patches.forEach(function (_a) {
      var _b;
      var type = _a.type,
        address = _a.address,
        oldAddress = _a.oldAddress,
        payload = _a.payload;
      if (type === 'remove') {
        (_b = target[address]) === null || _b === void 0 ? void 0 : _b.dispose();
        delete target[address];
      } else if (type === 'update') {
        if (payload) {
          target[address] = payload;
          if (target[oldAddress] === payload) delete target[oldAddress];
        }
        if (address && payload) {
          buildNodeIndexes(payload, address);
        }
      }
    });
  };
  var patchFormValues = function (form, path, source) {
    var update = function (path, source) {
      if (path.length) {
        form.setValuesIn(path, clone(source));
      } else {
        Object.assign(form.values, clone(source));
      }
    };
    var patch = function (source, path) {
      if (path === void 0) {
        path = [];
      }
      var targetValue = form.getValuesIn(path);
      var targetField = form.query(path).take();
      if (allowAssignDefaultValue(targetValue, source)) {
        update(path, source);
      } else {
        if (isEmpty(source)) return;
        if (GlobalState.initializing) return;
        if (isPlainObj$1(targetValue) && isPlainObj$1(source)) {
          each(source, function (value, key) {
            patch(value, path.concat(key));
          });
        } else {
          if (targetField) {
            if (!isVoidField(targetField) && !targetField.modified) {
              update(path, source);
            }
          } else if (form.initialized) {
            update(path, source);
          }
        }
      }
    };
    patch(source, path);
  };
  var matchFeedback = function (search, feedback) {
    if (!search || !feedback) return false;
    if (search.type && search.type !== feedback.type) return false;
    if (search.code && search.code !== feedback.code) return false;
    if (search.path && feedback.path) {
      if (!Path.parse(search.path).match(feedback.path)) return false;
    }
    if (search.address && feedback.address) {
      if (!Path.parse(search.address).match(feedback.address)) return false;
    }
    if (search.triggerType && search.triggerType !== feedback.triggerType) return false;
    return true;
  };
  var queryFeedbacks = function (field, search) {
    return field.feedbacks.filter(function (feedback) {
      var _a, _b, _c;
      if (!((_a = feedback.messages) === null || _a === void 0 ? void 0 : _a.length)) return false;
      return matchFeedback(
        search,
        __assign$l(__assign$l({}, feedback), {
          address: (_b = field.address) === null || _b === void 0 ? void 0 : _b.toString(),
          path: (_c = field.path) === null || _c === void 0 ? void 0 : _c.toString(),
        }),
      );
    });
  };
  var queryFeedbackMessages = function (field, search) {
    return queryFeedbacks(field, search).reduce(function (buf, info) {
      return isEmpty(info.messages) ? buf : buf.concat(info.messages);
    }, []);
  };
  var updateFeedback = function (field, feedback) {
    if (!feedback) return;
    return batch(function () {
      var _a, _b;
      if (!field.feedbacks.length) {
        if (!((_a = feedback.messages) === null || _a === void 0 ? void 0 : _a.length)) {
          return;
        }
        field.feedbacks = [feedback];
      } else {
        var searched_1 = queryFeedbacks(field, feedback);
        if (searched_1.length) {
          field.feedbacks = field.feedbacks.reduce(function (buf, item) {
            var _a;
            if (searched_1.includes(item)) {
              if ((_a = feedback.messages) === null || _a === void 0 ? void 0 : _a.length) {
                item.messages = feedback.messages;
                return buf.concat(item);
              } else {
                return buf;
              }
            } else {
              return buf.concat(item);
            }
          }, []);
          return;
        } else if ((_b = feedback.messages) === null || _b === void 0 ? void 0 : _b.length) {
          field.feedbacks = field.feedbacks.concat(feedback);
        }
      }
    });
  };
  var validateToFeedbacks = function (field, triggerType) {
    return __awaiter$1(void 0, void 0, void 0, function () {
      var results;
      return __generator$1(this, function (_a) {
        switch (_a.label) {
          case 0:
            return [
              4 /*yield*/,
              validate(field.value, field.validator, {
                triggerType: triggerType,
                validateFirst: field.props.validateFirst || field.form.props.validateFirst,
                context: field,
              }),
            ];
          case 1:
            results = _a.sent();
            batch(function () {
              each(results, function (messages, type) {
                field.setFeedback({
                  triggerType: triggerType,
                  type: type,
                  code: pascalCase('validate-' + type),
                  messages: messages,
                });
              });
            });
            return [2 /*return*/, results];
        }
      });
    });
  };
  var setValidatorRule = function (field, name, value) {
    var _a, _b, _c, _d;
    if (!isValid$4(value)) return;
    var hasRule = parseValidatorDescriptions(field.validator).some(function (desc) {
      return name in desc;
    });
    var rule = ((_a = {}), (_a[name] = value), _a);
    if (hasRule) {
      if (isArr$2(field.validator)) {
        field.validator = field.validator.map(function (desc) {
          if (hasOwnProperty.call(desc, name)) {
            desc[name] = value;
            return desc;
          }
          return desc;
        });
      } else if (isPlainObj$1(field.validator)) {
        field.validator[name] = value;
      } else {
        field.validator = ((_b = {}), (_b[name] = value), _b);
      }
    } else {
      if (isArr$2(field.validator)) {
        if (name === 'required') {
          field.validator.unshift(rule);
        } else {
          field.validator.push(rule);
        }
      } else if (isPlainObj$1(field.validator)) {
        field.validator[name] = value;
      } else if (field.validator) {
        if (name === 'required') {
          field.validator = [((_c = {}), (_c[name] = value), _c), field.validator];
        } else {
          field.validator = [field.validator, ((_d = {}), (_d[name] = value), _d)];
        }
      } else {
        field.validator = [rule];
      }
    }
  };
  var spliceArrayState = function (field, props) {
    var _a = __assign$l({ startIndex: 0, deleteCount: 0, insertCount: 0 }, props),
      startIndex = _a.startIndex,
      deleteCount = _a.deleteCount,
      insertCount = _a.insertCount;
    var address = field.address.toString();
    var addrLength = address.length;
    var fields = field.form.fields;
    var fieldPatches = [];
    var offset = insertCount - deleteCount;
    var isArrayChildren = function (identifier) {
      return identifier.indexOf(address) === 0 && identifier.length > addrLength;
    };
    var isAfterNode = function (identifier) {
      var _a;
      var afterStr = identifier.substring(addrLength);
      var number = (_a = afterStr.match(NumberIndexReg)) === null || _a === void 0 ? void 0 : _a[1];
      if (number === undefined) return false;
      var index = Number(number);
      return index > startIndex + deleteCount - 1;
    };
    var isInsertNode = function (identifier) {
      var _a;
      var afterStr = identifier.substring(addrLength);
      var number = (_a = afterStr.match(NumberIndexReg)) === null || _a === void 0 ? void 0 : _a[1];
      if (number === undefined) return false;
      var index = Number(number);
      return index >= startIndex && index < startIndex + insertCount;
    };
    var isDeleteNode = function (identifier) {
      var _a;
      var preStr = identifier.substring(0, addrLength);
      var afterStr = identifier.substring(addrLength);
      var number = (_a = afterStr.match(NumberIndexReg)) === null || _a === void 0 ? void 0 : _a[1];
      if (number === undefined) return false;
      var index = Number(number);
      return index >= startIndex && !fields['' + preStr + afterStr.replace(/^\.\d+/, '.' + (index + deleteCount))];
    };
    var moveIndex = function (identifier) {
      var _a;
      if (offset === 0) return identifier;
      var preStr = identifier.substring(0, addrLength);
      var afterStr = identifier.substring(addrLength);
      var number = (_a = afterStr.match(NumberIndexReg)) === null || _a === void 0 ? void 0 : _a[1];
      if (number === undefined) return identifier;
      var index = Number(number) + offset;
      return '' + preStr + afterStr.replace(/^\.\d+/, '.' + index);
    };
    batch(function () {
      each(fields, function (field, identifier) {
        if (isArrayChildren(identifier)) {
          if (isAfterNode(identifier)) {
            var newIdentifier = moveIndex(identifier);
            fieldPatches.push({
              type: 'update',
              address: newIdentifier,
              oldAddress: identifier,
              payload: field,
            });
          }
          if (isInsertNode(identifier) || isDeleteNode(identifier)) {
            fieldPatches.push({ type: 'remove', address: identifier });
          }
        }
      });
      patchFieldStates(fields, fieldPatches);
    });
    field.form.notify(LifeCycleTypes.ON_FORM_GRAPH_CHANGE);
  };
  var exchangeArrayState = function (field, props) {
    var _a = __assign$l({ fromIndex: 0, toIndex: 0 }, props),
      fromIndex = _a.fromIndex,
      toIndex = _a.toIndex;
    var address = field.address.toString();
    var fields = field.form.fields;
    var addrLength = address.length;
    var fieldPatches = [];
    var isArrayChildren = function (identifier) {
      return identifier.indexOf(address) === 0 && identifier.length > addrLength;
    };
    var isDown = fromIndex < toIndex;
    var isMoveNode = function (identifier) {
      var _a;
      var afterStr = identifier.slice(address.length);
      var number = (_a = afterStr.match(NumberIndexReg)) === null || _a === void 0 ? void 0 : _a[1];
      if (number === undefined) return false;
      var index = Number(number);
      return isDown ? index > fromIndex && index <= toIndex : index < fromIndex && index >= toIndex;
    };
    var isFromNode = function (identifier) {
      var _a;
      var afterStr = identifier.substring(addrLength);
      var number = (_a = afterStr.match(NumberIndexReg)) === null || _a === void 0 ? void 0 : _a[1];
      if (number === undefined) return false;
      var index = Number(number);
      return index === fromIndex;
    };
    var moveIndex = function (identifier) {
      var preStr = identifier.substring(0, addrLength);
      var afterStr = identifier.substring(addrLength);
      var number = afterStr.match(NumberIndexReg)[1];
      var current = Number(number);
      var index = current;
      if (index === fromIndex) {
        index = toIndex;
      } else {
        index += isDown ? -1 : 1;
      }
      return '' + preStr + afterStr.replace(/^\.\d+/, '.' + index);
    };
    batch(function () {
      each(fields, function (field, identifier) {
        if (isArrayChildren(identifier)) {
          if (isMoveNode(identifier) || isFromNode(identifier)) {
            var newIdentifier = moveIndex(identifier);
            fieldPatches.push({
              type: 'update',
              address: newIdentifier,
              oldAddress: identifier,
              payload: field,
            });
            if (!fields[newIdentifier]) {
              fieldPatches.push({
                type: 'remove',
                address: identifier,
              });
            }
          }
        }
      });
      patchFieldStates(fields, fieldPatches);
    });
    field.form.notify(LifeCycleTypes.ON_FORM_GRAPH_CHANGE);
  };
  var cleanupArrayChildren = function (field, start) {
    var address = field.address.toString();
    var fields = field.form.fields;
    var isArrayChildren = function (identifier) {
      return identifier.indexOf(address) === 0 && identifier.length > address.length;
    };
    var isNeedCleanup = function (identifier) {
      var _a;
      var afterStr = identifier.slice(address.length);
      var number = (_a = afterStr.match(NumberIndexReg)) === null || _a === void 0 ? void 0 : _a[1];
      if (number === undefined) return false;
      var index = Number(number);
      return index >= start;
    };
    batch(function () {
      each(fields, function (field, identifier) {
        if (isArrayChildren(identifier) && isNeedCleanup(identifier)) {
          field.destroy();
        }
      });
    });
  };
  var cleanupObjectChildren = function (field, keys) {
    if (keys.length === 0) return;
    var address = field.address.toString();
    var fields = field.form.fields;
    var isObjectChildren = function (identifier) {
      return identifier.indexOf(address) === 0 && identifier.length > address.length;
    };
    var isNeedCleanup = function (identifier) {
      var _a;
      var afterStr = identifier.slice(address.length);
      var key = (_a = afterStr.match(/^\.([^.]+)/)) === null || _a === void 0 ? void 0 : _a[1];
      if (key === undefined) return false;
      return keys.includes(key);
    };
    batch(function () {
      each(fields, function (field, identifier) {
        if (isObjectChildren(identifier) && isNeedCleanup(identifier)) {
          field.destroy();
        }
      });
    });
  };
  var initFieldUpdate = batch.scope.bound(function (field) {
    var form = field.form;
    var updates = Path.ensureIn(form, 'requests.updates', []);
    var indexes = Path.ensureIn(form, 'requests.updateIndexes', {});
    for (var index = 0; index < updates.length; index++) {
      var _a = updates[index],
        pattern = _a.pattern,
        callbacks = _a.callbacks;
      var removed = false;
      if (field.match(pattern)) {
        callbacks.forEach(function (callback) {
          field.setState(callback);
        });
        if (!pattern.isWildMatchPattern && !pattern.isMatchPattern) {
          updates.splice(index--, 1);
          removed = true;
        }
      }
      if (!removed) {
        indexes[pattern.toString()] = index;
      } else {
        delete indexes[pattern.toString()];
      }
    }
  });
  var subscribeUpdate = function (form, pattern, callback) {
    var updates = Path.ensureIn(form, 'requests.updates', []);
    var indexes = Path.ensureIn(form, 'requests.updateIndexes', {});
    var id = pattern.toString();
    var current = indexes[id];
    if (isValid$4(current)) {
      if (
        updates[current] &&
        !updates[current].callbacks.some(function (fn) {
          return fn.toString() === callback.toString() ? fn === callback : false;
        })
      ) {
        updates[current].callbacks.push(callback);
      }
    } else {
      indexes[id] = updates.length;
      updates.push({
        pattern: pattern,
        callbacks: [callback],
      });
    }
  };
  var deserialize = function (model, setter) {
    if (!model) return;
    if (isFn$2(setter)) {
      setter(model);
    } else {
      for (var key in setter) {
        if (!hasOwnProperty.call(setter, key)) continue;
        if (ReadOnlyProperties[key] || ReservedProperties[key]) continue;
        var MutuallyExclusiveKey = MutuallyExclusiveProperties[key];
        if (
          MutuallyExclusiveKey &&
          hasOwnProperty.call(setter, MutuallyExclusiveKey) &&
          !isValid$4(setter[MutuallyExclusiveKey])
        )
          continue;
        var value = setter[key];
        if (isFn$2(value)) continue;
        model[key] = value;
      }
    }
    return model;
  };
  var serialize = function (model, getter) {
    if (isFn$2(getter)) {
      return getter(model);
    } else {
      var results = {};
      for (var key in model) {
        if (!hasOwnProperty.call(model, key)) continue;
        if (ReservedProperties[key]) continue;
        if (key === 'address' || key === 'path') {
          results[key] = model[key].toString();
          continue;
        }
        var value = model[key];
        if (isFn$2(value)) continue;
        results[key] = toJS(value);
      }
      return results;
    }
  };
  var createChildrenFeedbackFilter = function (field) {
    var _a;
    var identifier = (_a = field.address) === null || _a === void 0 ? void 0 : _a.toString();
    return function (_a) {
      var address = _a.address;
      return address.indexOf(identifier) === 0;
    };
  };
  var createStateSetter = function (model) {
    return batch.bound(function (setter) {
      return deserialize(model, setter);
    });
  };
  var createStateGetter = function (model) {
    return function (getter) {
      return serialize(model, getter);
    };
  };
  var createBatchStateSetter = function (form) {
    return batch.bound(function (pattern, payload) {
      if (isQuery(pattern)) {
        pattern.forEach(function (field) {
          field.setState(payload);
        });
      } else if (isGeneralField(pattern)) {
        pattern.setState(payload);
      } else {
        var matchCount_1 = 0,
          path = Path.parse(pattern);
        form.query(path).forEach(function (field) {
          field.setState(payload);
          matchCount_1++;
        });
        if (matchCount_1 === 0 || path.isWildMatchPattern) {
          subscribeUpdate(form, path, payload);
        }
      }
    });
  };
  var createBatchStateGetter = function (form) {
    return function (pattern, payload) {
      if (isQuery(pattern)) {
        return pattern.take(payload);
      } else if (isGeneralField(pattern)) {
        return pattern.getState(payload);
      } else {
        return form.query(pattern).take(function (field) {
          return field.getState(payload);
        });
      }
    };
  };
  var triggerFormInitialValuesChange = function (form, change) {
    var path = change.path;
    if (Array.isArray(change.object) && change.key === 'length') return;
    if (contains(form.initialValues, change.object) || contains(form.initialValues, change.value)) {
      if (change.type === 'add' || change.type === 'set') {
        patchFormValues(form, path.slice(1), change.value);
      }
      if (form.initialized) {
        form.notify(LifeCycleTypes.ON_FORM_INITIAL_VALUES_CHANGE);
      }
    }
  };
  var triggerFormValuesChange = function (form, change) {
    if (Array.isArray(change.object) && change.key === 'length') return;
    if ((contains(form.values, change.object) || contains(form.values, change.value)) && form.initialized) {
      form.notify(LifeCycleTypes.ON_FORM_VALUES_CHANGE);
    }
  };
  var setValidating = function (target, validating) {
    clearTimeout(target.requests.validate);
    if (validating) {
      target.requests.validate = setTimeout(function () {
        batch(function () {
          target.validating = validating;
          notify(target, LifeCycleTypes.ON_FORM_VALIDATING, LifeCycleTypes.ON_FIELD_VALIDATING);
        });
      }, RESPONSE_REQUEST_DURATION);
      notify(target, LifeCycleTypes.ON_FORM_VALIDATE_START, LifeCycleTypes.ON_FIELD_VALIDATE_START);
    } else {
      if (target.validating !== validating) {
        target.validating = validating;
      }
      notify(target, LifeCycleTypes.ON_FORM_VALIDATE_END, LifeCycleTypes.ON_FIELD_VALIDATE_END);
    }
  };
  var setSubmitting = function (target, submitting) {
    clearTimeout(target.requests.submit);
    if (submitting) {
      target.requests.submit = setTimeout(function () {
        batch(function () {
          target.submitting = submitting;
          notify(target, LifeCycleTypes.ON_FORM_SUBMITTING, LifeCycleTypes.ON_FIELD_SUBMITTING);
        });
      }, RESPONSE_REQUEST_DURATION);
      notify(target, LifeCycleTypes.ON_FORM_SUBMIT_START, LifeCycleTypes.ON_FIELD_SUBMIT_START);
    } else {
      if (target.submitting !== submitting) {
        target.submitting = submitting;
      }
      notify(target, LifeCycleTypes.ON_FORM_SUBMIT_END, LifeCycleTypes.ON_FIELD_SUBMIT_END);
    }
  };
  var setLoading = function (target, loading) {
    clearTimeout(target.requests.loading);
    if (loading) {
      target.requests.loading = setTimeout(function () {
        batch(function () {
          target.loading = loading;
          notify(target, LifeCycleTypes.ON_FORM_LOADING, LifeCycleTypes.ON_FIELD_LOADING);
        });
      }, RESPONSE_REQUEST_DURATION);
    } else if (target.loading !== loading) {
      target.loading = loading;
    }
  };
  var batchSubmit = function (target, onSubmit) {
    return __awaiter$1(void 0, void 0, void 0, function () {
      var getValues, results, e_2;
      return __generator$1(this, function (_a) {
        switch (_a.label) {
          case 0:
            getValues = function (target) {
              if (isForm(target)) {
                return toJS(target.values);
              }
              return toJS(target.value);
            };
            target.setSubmitting(true);
            _a.label = 1;
          case 1:
            _a.trys.push([1, 3, , 4]);
            notify(target, LifeCycleTypes.ON_FORM_SUBMIT_VALIDATE_START, LifeCycleTypes.ON_FIELD_SUBMIT_VALIDATE_START);
            return [4 /*yield*/, target.validate()];
          case 2:
            _a.sent();
            notify(
              target,
              LifeCycleTypes.ON_FORM_SUBMIT_VALIDATE_SUCCESS,
              LifeCycleTypes.ON_FIELD_SUBMIT_VALIDATE_SUCCESS,
            );
            return [3 /*break*/, 4];
          case 3:
            _a.sent();
            notify(
              target,
              LifeCycleTypes.ON_FORM_SUBMIT_VALIDATE_FAILED,
              LifeCycleTypes.ON_FIELD_SUBMIT_VALIDATE_FAILED,
            );
            return [3 /*break*/, 4];
          case 4:
            notify(target, LifeCycleTypes.ON_FORM_SUBMIT_VALIDATE_END, LifeCycleTypes.ON_FIELD_SUBMIT_VALIDATE_END);
            _a.label = 5;
          case 5:
            _a.trys.push([5, 9, , 10]);
            if (target.invalid) {
              throw target.errors;
            }
            if (!isFn$2(onSubmit)) return [3 /*break*/, 7];
            return [4 /*yield*/, onSubmit(getValues(target))];
          case 6:
            results = _a.sent();
            return [3 /*break*/, 8];
          case 7:
            results = getValues(target);
            _a.label = 8;
          case 8:
            notify(target, LifeCycleTypes.ON_FORM_SUBMIT_SUCCESS, LifeCycleTypes.ON_FIELD_SUBMIT_SUCCESS);
            return [3 /*break*/, 10];
          case 9:
            e_2 = _a.sent();
            target.setSubmitting(false);
            notify(target, LifeCycleTypes.ON_FORM_SUBMIT_FAILED, LifeCycleTypes.ON_FIELD_SUBMIT_FAILED);
            notify(target, LifeCycleTypes.ON_FORM_SUBMIT, LifeCycleTypes.ON_FIELD_SUBMIT);
            throw e_2;
          case 10:
            target.setSubmitting(false);
            notify(target, LifeCycleTypes.ON_FORM_SUBMIT, LifeCycleTypes.ON_FIELD_SUBMIT);
            return [2 /*return*/, results];
        }
      });
    });
  };
  var batchValidate = function (target, pattern, triggerType) {
    return __awaiter$1(void 0, void 0, void 0, function () {
      var tasks;
      return __generator$1(this, function (_a) {
        switch (_a.label) {
          case 0:
            if (isForm(target)) target.setValidating(true);
            else {
              if (target.pattern !== 'editable' || target.display !== 'visible') return [2 /*return*/];
            }
            tasks = [];
            target.query(pattern).forEach(function (field) {
              if (!isVoidField(field)) {
                tasks.push(validateSelf(field, triggerType, field === target));
              }
            });
            return [4 /*yield*/, Promise.all(tasks)];
          case 1:
            _a.sent();
            if (isForm(target)) target.setValidating(false);
            if (target.invalid) {
              notify(target, LifeCycleTypes.ON_FORM_VALIDATE_FAILED, LifeCycleTypes.ON_FIELD_VALIDATE_FAILED);
              throw target.errors;
            }
            notify(target, LifeCycleTypes.ON_FORM_VALIDATE_SUCCESS, LifeCycleTypes.ON_FIELD_VALIDATE_SUCCESS);
            return [2 /*return*/];
        }
      });
    });
  };
  var batchReset = function (target, pattern, options) {
    return __awaiter$1(void 0, void 0, void 0, function () {
      var tasks;
      return __generator$1(this, function (_a) {
        switch (_a.label) {
          case 0:
            tasks = [];
            target.query(pattern).forEach(function (field) {
              if (!isVoidField(field)) {
                tasks.push(resetSelf(field, options, target === field));
              }
            });
            notify(target, LifeCycleTypes.ON_FORM_RESET, LifeCycleTypes.ON_FIELD_RESET);
            return [4 /*yield*/, Promise.all(tasks)];
          case 1:
            _a.sent();
            return [2 /*return*/];
        }
      });
    });
  };
  var validateSelf = batch.bound(function (target, triggerType, noEmit) {
    if (noEmit === void 0) {
      noEmit = false;
    }
    return __awaiter$1(void 0, void 0, void 0, function () {
      var start, end, allTriggerTypes, results_1, i, payload, results;
      return __generator$1(this, function (_a) {
        switch (_a.label) {
          case 0:
            start = function () {
              setValidating(target, true);
            };
            end = function () {
              setValidating(target, false);
              if (noEmit) return;
              if (target.selfValid) {
                target.notify(LifeCycleTypes.ON_FIELD_VALIDATE_SUCCESS);
              } else {
                target.notify(LifeCycleTypes.ON_FIELD_VALIDATE_FAILED);
              }
            };
            if (target.pattern !== 'editable' || target.display !== 'visible') return [2 /*return*/, {}];
            start();
            if (!!triggerType) return [3 /*break*/, 5];
            allTriggerTypes = parseValidatorDescriptions(target.validator).map(function (desc) {
              return desc.triggerType;
            });
            results_1 = {};
            i = 0;
            _a.label = 1;
          case 1:
            if (!(i < allTriggerTypes.length)) return [3 /*break*/, 4];
            return [4 /*yield*/, validateToFeedbacks(target, allTriggerTypes[i])];
          case 2:
            payload = _a.sent();
            each(payload, function (result, key) {
              results_1[key] = results_1[key] || [];
              results_1[key] = results_1[key].concat(result);
            });
            _a.label = 3;
          case 3:
            i++;
            return [3 /*break*/, 1];
          case 4:
            end();
            return [2 /*return*/, results_1];
          case 5:
            return [4 /*yield*/, validateToFeedbacks(target, triggerType)];
          case 6:
            results = _a.sent();
            end();
            return [2 /*return*/, results];
        }
      });
    });
  });
  var resetSelf = batch.bound(function (target, options, noEmit) {
    if (noEmit === void 0) {
      noEmit = false;
    }
    return __awaiter$1(void 0, void 0, void 0, function () {
      return __generator$1(this, function (_a) {
        switch (_a.label) {
          case 0:
            target.modified = false;
            target.visited = false;
            target.feedbacks = [];
            target.inputValue = undefined;
            target.inputValues = [];
            target.caches = {};
            if (options === null || options === void 0 ? void 0 : options.forceClear) {
              if (isArrayField(target)) {
                target.value = [];
              } else if (isObjectField(target)) {
                target.value = {};
              } else {
                target.value = undefined;
              }
            } else if (isValid$4(target.value)) {
              target.value = toJS(target.initialValue);
            }
            if (!noEmit) {
              target.notify(LifeCycleTypes.ON_FIELD_RESET);
            }
            if (!(options === null || options === void 0 ? void 0 : options.validate)) return [3 /*break*/, 2];
            return [4 /*yield*/, validateSelf(target)];
          case 1:
            return [2 /*return*/, _a.sent()];
          case 2:
            return [2 /*return*/];
        }
      });
    });
  });
  var getValidFormValues = function (values) {
    if (isObservable(values)) return values;
    return clone(values || {});
  };
  var getValidFieldDefaultValue = function (value, initialValue) {
    if (allowAssignDefaultValue(value, initialValue)) return clone(initialValue);
    return value;
  };
  var allowAssignDefaultValue = function (target, source) {
    var isEmptyTarget = isEmpty(target);
    var isEmptySource = isEmpty(source);
    var isValidTarget = isValid$4(target);
    var isValidSource = isValid$4(source);
    if (!isValidTarget) {
      if (isValidSource) {
        return true;
      }
      return false;
    }
    if (isEmptyTarget) {
      if (isEmptySource) {
        return false;
      } else {
        return true;
      }
    }
    return false;
  };
  var createReactions = function (field) {
    var reactions = toArr$1(field.props.reactions);
    field.form.addEffects(field, function () {
      reactions.forEach(function (reaction) {
        if (isFn$2(reaction)) {
          field.disposers.push(
            autorun(
              batch.scope.bound(function () {
                return reaction(field);
              }),
            ),
          );
        }
      });
    });
  };
  var initializeStart = function () {
    GlobalState.initializing = true;
  };
  var initializeEnd = function () {
    batch.endpoint(function () {
      GlobalState.initializing = false;
    });
  };

  var BaseField = /** @class */ (function () {
    function BaseField() {
      var _this = this;
      this.disposers = [];
      this.setTitle = function (title) {
        _this.title = title;
      };
      this.setDescription = function (description) {
        _this.description = description;
      };
      this.setDisplay = function (type) {
        _this.display = type;
      };
      this.setPattern = function (type) {
        _this.pattern = type;
      };
      this.setComponent = function (component, props) {
        if (component) {
          _this.componentType = component;
        }
        if (props) {
          _this.componentProps = _this.componentProps || {};
          Object.assign(_this.componentProps, props);
        }
      };
      this.setComponentProps = function (props) {
        if (props) {
          _this.componentProps = _this.componentProps || {};
          Object.assign(_this.componentProps, props);
        }
      };
      this.setDecorator = function (component, props) {
        if (component) {
          _this.decoratorType = component;
        }
        if (props) {
          _this.decoratorProps = _this.decoratorProps || {};
          Object.assign(_this.decoratorProps, props);
        }
      };
      this.setDecoratorProps = function (props) {
        if (props) {
          _this.decoratorProps = _this.decoratorProps || {};
          Object.assign(_this.decoratorProps, props);
        }
      };
      this.onInit = function () {
        _this.initialized = true;
        initFieldUpdate(_this);
        _this.notify(LifeCycleTypes.ON_FIELD_INIT);
      };
      this.onMount = function () {
        _this.mounted = true;
        _this.unmounted = false;
        _this.notify(LifeCycleTypes.ON_FIELD_MOUNT);
      };
      this.onUnmount = function () {
        _this.mounted = false;
        _this.unmounted = true;
        _this.notify(LifeCycleTypes.ON_FIELD_UNMOUNT);
      };
      this.query = function (pattern) {
        return new Query({
          pattern: pattern,
          base: _this.address,
          form: _this.form,
        });
      };
      this.notify = function (type, payload) {
        return _this.form.notify(type, payload !== null && payload !== void 0 ? payload : _this);
      };
      this.dispose = function () {
        _this.disposers.forEach(function (dispose) {
          dispose();
        });
        _this.form.removeEffects(_this);
      };
      this.destroy = function () {
        _this.dispose();
        delete _this.form.fields[_this.address.toString()];
      };
      this.match = function (pattern) {
        return Path.parse(pattern).matchAliasGroup(_this.address, _this.path);
      };
    }
    BaseField.prototype.makeIndexes = function (address) {
      this.form.fields[address.toString()] = this;
      buildNodeIndexes(this, address);
    };
    Object.defineProperty(BaseField.prototype, 'component', {
      get: function () {
        return [this.componentType, this.componentProps];
      },
      set: function (value) {
        var component = toArr$1(value);
        this.componentType = component[0];
        this.componentProps = component[1] || {};
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(BaseField.prototype, 'decorator', {
      get: function () {
        return [this.decoratorType, this.decoratorProps];
      },
      set: function (value) {
        var decorator = toArr$1(value);
        this.decoratorType = decorator[0];
        this.decoratorProps = decorator[1] || {};
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(BaseField.prototype, 'parent', {
      get: function () {
        var parent = this.address.parent();
        var identifier = parent.toString();
        while (!this.form.fields[identifier]) {
          parent = parent.parent();
          identifier = parent.toString();
          if (!identifier) return;
        }
        return this.form.fields[identifier];
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(BaseField.prototype, 'display', {
      get: function () {
        var _a;
        var parentDisplay = (_a = this.parent) === null || _a === void 0 ? void 0 : _a.display;
        if (parentDisplay && parentDisplay !== 'visible') {
          if (this.selfDisplay && this.selfDisplay !== 'visible') return this.selfDisplay;
          return parentDisplay;
        }
        if (isValid$4(this.selfDisplay)) return this.selfDisplay;
        return parentDisplay || this.form.display || 'visible';
      },
      set: function (display) {
        this.selfDisplay = display;
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(BaseField.prototype, 'pattern', {
      get: function () {
        var _a;
        var parentPattern = (_a = this.parent) === null || _a === void 0 ? void 0 : _a.pattern;
        if (isValid$4(this.selfPattern)) return this.selfPattern;
        return parentPattern || this.form.pattern || 'editable';
      },
      set: function (pattern) {
        this.selfPattern = pattern;
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(BaseField.prototype, 'editable', {
      get: function () {
        return this.pattern === 'editable';
      },
      set: function (editable) {
        if (!isValid$4(editable)) return;
        if (editable) {
          this.pattern = 'editable';
        } else {
          this.pattern = 'readPretty';
        }
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(BaseField.prototype, 'disabled', {
      get: function () {
        return this.pattern === 'disabled';
      },
      set: function (disabled) {
        if (!isValid$4(disabled)) return;
        if (disabled) {
          this.pattern = 'disabled';
        } else {
          this.pattern = 'editable';
        }
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(BaseField.prototype, 'readOnly', {
      get: function () {
        return this.pattern === 'readOnly';
      },
      set: function (readOnly) {
        if (!isValid$4(readOnly)) return;
        if (readOnly) {
          this.pattern = 'readOnly';
        } else {
          this.pattern = 'editable';
        }
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(BaseField.prototype, 'readPretty', {
      get: function () {
        return this.pattern === 'readPretty';
      },
      set: function (readPretty) {
        if (!isValid$4(readPretty)) return;
        if (readPretty) {
          this.pattern = 'readPretty';
        } else {
          this.pattern = 'editable';
        }
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(BaseField.prototype, 'hidden', {
      get: function () {
        return this.display === 'hidden';
      },
      set: function (hidden) {
        if (!isValid$4(hidden)) return;
        if (hidden) {
          this.display = 'hidden';
        } else {
          this.display = 'visible';
        }
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(BaseField.prototype, 'visible', {
      get: function () {
        return this.display === 'visible';
      },
      set: function (visible) {
        if (!isValid$4(visible)) return;
        if (visible) {
          this.display = 'visible';
        } else {
          this.display = 'none';
        }
      },
      enumerable: false,
      configurable: true,
    });
    return BaseField;
  })();

  var __extends$3 =
    (undefined && undefined.__extends) ||
    (function () {
      var extendStatics = function (d, b) {
        extendStatics =
          Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array &&
            function (d, b) {
              d.__proto__ = b;
            }) ||
          function (d, b) {
            for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
          };
        return extendStatics(d, b);
      };
      return function (d, b) {
        if (typeof b !== 'function' && b !== null)
          throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
      };
    })();
  var __awaiter =
    (undefined && undefined.__awaiter) ||
    function (thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P
          ? value
          : new P(function (resolve) {
              resolve(value);
            });
      }
      return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator['throw'](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
  var __generator =
    (undefined && undefined.__generator) ||
    function (thisArg, body) {
      var _ = {
          label: 0,
          sent: function () {
            if (t[0] & 1) throw t[1];
            return t[1];
          },
          trys: [],
          ops: [],
        },
        f,
        y,
        t,
        g;
      return (
        (g = { next: verb(0), throw: verb(1), return: verb(2) }),
        typeof Symbol === 'function' &&
          (g[Symbol.iterator] = function () {
            return this;
          }),
        g
      );
      function verb(n) {
        return function (v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f) throw new TypeError('Generator is already executing.');
        while (_)
          try {
            if (
              ((f = 1),
              y &&
                (t = op[0] & 2 ? y['return'] : op[0] ? y['throw'] || ((t = y['return']) && t.call(y), 0) : y.next) &&
                !(t = t.call(y, op[1])).done)
            )
              return t;
            if (((y = 0), t)) op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!((t = _.trys), (t = t.length > 0 && t[t.length - 1])) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2]) _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5) throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
  var Field$1 = /** @class */ (function (_super) {
    __extends$3(Field, _super);
    function Field(address, props, form, designable) {
      var _this = _super.call(this) || this;
      _this.displayName = 'Field';
      _this.caches = {};
      _this.requests = {};
      _this.setDataSource = function (dataSource) {
        _this.dataSource = dataSource;
      };
      _this.setFeedback = function (feedback) {
        updateFeedback(_this, feedback);
      };
      _this.setSelfErrors = function (messages) {
        _this.selfErrors = messages;
      };
      _this.setSelfWarnings = function (messages) {
        _this.selfWarnings = messages;
      };
      _this.setSelfSuccesses = function (messages) {
        _this.selfSuccesses = messages;
      };
      _this.setValidator = function (validator) {
        _this.validator = validator;
      };
      _this.setValidatorRule = function (name, value) {
        setValidatorRule(_this, name, value);
      };
      _this.setRequired = function (required) {
        _this.required = required;
      };
      _this.setValue = function (value) {
        _this.value = value;
      };
      _this.setInitialValue = function (initialValue) {
        _this.initialValue = initialValue;
      };
      _this.setLoading = function (loading) {
        setLoading(_this, loading);
      };
      _this.setValidating = function (validating) {
        setValidating(_this, validating);
      };
      _this.setSubmitting = function (submitting) {
        setSubmitting(_this, submitting);
      };
      _this.setState = createStateSetter(_this);
      _this.getState = createStateGetter(_this);
      _this.onInput = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        return __awaiter(_this, void 0, void 0, function () {
          var values, value;
          var _a;
          return __generator(this, function (_b) {
            switch (_b.label) {
              case 0:
                if ((_a = args[0]) === null || _a === void 0 ? void 0 : _a.target) {
                  if (!isHTMLInputEvent(args[0])) return [2 /*return*/];
                }
                values = getValuesFromEvent(args);
                value = values[0];
                this.caches.inputting = true;
                this.inputValue = value;
                this.inputValues = values;
                this.value = value;
                this.modified = true;
                this.form.modified = true;
                this.notify(LifeCycleTypes.ON_FIELD_INPUT_VALUE_CHANGE);
                this.notify(LifeCycleTypes.ON_FORM_INPUT_CHANGE, this.form);
                return [4 /*yield*/, validateSelf(this, 'onInput')];
              case 1:
                _b.sent();
                this.caches.inputting = false;
                return [2 /*return*/];
            }
          });
        });
      };
      _this.onFocus = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        return __awaiter(_this, void 0, void 0, function () {
          var _a;
          return __generator(this, function (_b) {
            switch (_b.label) {
              case 0:
                if ((_a = args[0]) === null || _a === void 0 ? void 0 : _a.target) {
                  if (!isHTMLInputEvent(args[0], false)) return [2 /*return*/];
                }
                this.active = true;
                this.visited = true;
                return [4 /*yield*/, validateSelf(this, 'onFocus')];
              case 1:
                _b.sent();
                return [2 /*return*/];
            }
          });
        });
      };
      _this.onBlur = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        return __awaiter(_this, void 0, void 0, function () {
          var _a;
          return __generator(this, function (_b) {
            switch (_b.label) {
              case 0:
                if ((_a = args[0]) === null || _a === void 0 ? void 0 : _a.target) {
                  if (!isHTMLInputEvent(args[0], false)) return [2 /*return*/];
                }
                this.active = false;
                return [4 /*yield*/, validateSelf(this, 'onBlur')];
              case 1:
                _b.sent();
                return [2 /*return*/];
            }
          });
        });
      };
      _this.validate = function (triggerType) {
        return batchValidate(_this, _this.address + '.**', triggerType);
      };
      _this.submit = function (onSubmit) {
        return batchSubmit(_this, onSubmit);
      };
      _this.reset = function (options) {
        return batchReset(_this, _this.address + '.**', options);
      };
      _this.queryFeedbacks = function (search) {
        return queryFeedbacks(_this, search);
      };
      _this.form = form;
      _this.props = props;
      _this.designable = designable;
      initializeStart();
      _this.makeIndexes(address);
      _this.initialize();
      _this.makeObservable();
      _this.makeReactive();
      _this.onInit();
      initializeEnd();
      return _this;
    }
    Field.prototype.initialize = function () {
      this.initialized = false;
      this.loading = false;
      this.validating = false;
      this.submitting = false;
      this.modified = false;
      this.active = false;
      this.visited = false;
      this.mounted = false;
      this.unmounted = false;
      this.inputValues = [];
      this.inputValue = null;
      this.feedbacks = [];
      this.title = this.props.title;
      this.description = this.props.description;
      this.display = this.props.display;
      this.pattern = this.props.pattern;
      this.editable = this.props.editable;
      this.disabled = this.props.disabled;
      this.readOnly = this.props.readOnly;
      this.readPretty = this.props.readPretty;
      this.visible = this.props.visible;
      this.hidden = this.props.hidden;
      this.dataSource = this.props.dataSource;
      this.validator = this.props.validator;
      this.required = this.props.required;
      this.content = this.props.content;
      this.value = getValidFieldDefaultValue(this.props.value, this.props.initialValue);
      this.initialValue = this.props.initialValue;
      this.data = this.props.data;
      this.decorator = toArr$1(this.props.decorator);
      this.component = toArr$1(this.props.component);
    };
    Field.prototype.makeObservable = function () {
      if (this.designable) return;
      define(this, {
        title: observable.ref,
        description: observable.ref,
        dataSource: observable.ref,
        selfDisplay: observable.ref,
        selfPattern: observable.ref,
        loading: observable.ref,
        validating: observable.ref,
        submitting: observable.ref,
        modified: observable.ref,
        active: observable.ref,
        visited: observable.ref,
        initialized: observable.ref,
        mounted: observable.ref,
        unmounted: observable.ref,
        inputValue: observable.ref,
        inputValues: observable.ref,
        decoratorType: observable.ref,
        componentType: observable.ref,
        content: observable.ref,
        decoratorProps: observable,
        componentProps: observable,
        validator: observable.shallow,
        feedbacks: observable.shallow,
        data: observable.shallow,
        component: observable.computed,
        decorator: observable.computed,
        errors: observable.computed,
        warnings: observable.computed,
        successes: observable.computed,
        valid: observable.computed,
        invalid: observable.computed,
        selfErrors: observable.computed,
        selfWarnings: observable.computed,
        selfSuccesses: observable.computed,
        selfValid: observable.computed,
        selfInvalid: observable.computed,
        validateStatus: observable.computed,
        value: observable.computed,
        initialValue: observable.computed,
        display: observable.computed,
        pattern: observable.computed,
        required: observable.computed,
        hidden: observable.computed,
        visible: observable.computed,
        disabled: observable.computed,
        readOnly: observable.computed,
        readPretty: observable.computed,
        editable: observable.computed,
        setDisplay: action,
        setTitle: action,
        setDescription: action,
        setDataSource: action,
        setValue: action,
        setPattern: action,
        setInitialValue: action,
        setLoading: action,
        setValidating: action,
        setFeedback: action,
        setSelfErrors: action,
        setSelfWarnings: action,
        setSelfSuccesses: action,
        setValidator: action,
        setRequired: action,
        setComponent: action,
        setComponentProps: action,
        setDecorator: action,
        setDecoratorProps: action,
        validate: action,
        reset: action,
        onInit: batch,
        onInput: batch,
        onMount: batch,
        onUnmount: batch,
        onFocus: batch,
        onBlur: batch,
      });
    };
    Field.prototype.makeReactive = function () {
      var _this = this;
      if (this.designable) return;
      this.disposers.push(
        reaction(
          function () {
            return _this.value;
          },
          function (value) {
            _this.notify(LifeCycleTypes.ON_FIELD_VALUE_CHANGE);
            if (isValid$4(value) && _this.modified && !_this.caches.inputting) {
              validateSelf(_this);
            }
          },
        ),
        reaction(
          function () {
            return _this.initialValue;
          },
          function () {
            _this.notify(LifeCycleTypes.ON_FIELD_INITIAL_VALUE_CHANGE);
          },
        ),
        reaction(
          function () {
            return _this.display;
          },
          function (display) {
            var value = _this.value;
            if (display === 'visible') {
              if (isEmpty(value)) {
                _this.setValue(_this.caches.value);
                _this.caches.value = undefined;
              }
            } else {
              _this.caches.value = toJS(value);
              if (display === 'none') {
                _this.form.deleteValuesIn(_this.path);
              }
            }
            if (display === 'none' || display === 'hidden') {
              _this.setFeedback({
                type: 'error',
                messages: [],
              });
            }
          },
        ),
        reaction(
          function () {
            return _this.pattern;
          },
          function (pattern) {
            if (pattern !== 'editable') {
              _this.setFeedback({
                type: 'error',
                messages: [],
              });
            }
          },
        ),
      );
      createReactions(this);
    };
    Object.defineProperty(Field.prototype, 'selfErrors', {
      get: function () {
        return queryFeedbackMessages(this, {
          type: 'error',
        });
      },
      set: function (messages) {
        this.setFeedback({
          type: 'error',
          code: 'EffectError',
          messages: messages,
        });
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(Field.prototype, 'errors', {
      get: function () {
        return this.form.errors.filter(createChildrenFeedbackFilter(this));
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(Field.prototype, 'selfWarnings', {
      get: function () {
        return queryFeedbackMessages(this, {
          type: 'warning',
        });
      },
      set: function (messages) {
        this.setFeedback({
          type: 'warning',
          code: 'EffectWarning',
          messages: messages,
        });
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(Field.prototype, 'warnings', {
      get: function () {
        return this.form.warnings.filter(createChildrenFeedbackFilter(this));
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(Field.prototype, 'selfSuccesses', {
      get: function () {
        return queryFeedbackMessages(this, {
          type: 'success',
        });
      },
      set: function (messages) {
        this.setFeedback({
          type: 'success',
          code: 'EffectSuccess',
          messages: messages,
        });
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(Field.prototype, 'successes', {
      get: function () {
        return this.form.successes.filter(createChildrenFeedbackFilter(this));
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(Field.prototype, 'selfValid', {
      get: function () {
        return !this.selfErrors.length;
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(Field.prototype, 'valid', {
      get: function () {
        return !this.errors.length;
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(Field.prototype, 'selfInvalid', {
      get: function () {
        return !this.selfValid;
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(Field.prototype, 'invalid', {
      get: function () {
        return !this.valid;
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(Field.prototype, 'value', {
      get: function () {
        return this.form.getValuesIn(this.path);
      },
      set: function (value) {
        if (!this.initialized) {
          if (this.display === 'none') {
            this.caches.value = value;
            return;
          }
          if (!allowAssignDefaultValue(this.value, value) && !this.designable) {
            return;
          }
        }
        this.form.setValuesIn(this.path, value);
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(Field.prototype, 'initialValue', {
      get: function () {
        return this.form.getInitialValuesIn(this.path);
      },
      set: function (initialValue) {
        if (!this.initialized) {
          if (!allowAssignDefaultValue(this.initialValue, initialValue) && !this.designable) {
            return;
          }
        }
        this.form.setInitialValuesIn(this.path, initialValue);
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(Field.prototype, 'required', {
      get: function () {
        return parseValidatorDescriptions(this.validator).some(function (desc) {
          return desc.required;
        });
      },
      set: function (required) {
        if (this.required === required) return;
        this.setValidatorRule('required', required);
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(Field.prototype, 'validateStatus', {
      get: function () {
        if (this.validating) return 'validating';
        if (this.selfInvalid) return 'error';
        if (this.selfWarnings.length) return 'warning';
        if (this.selfSuccesses.length) return 'success';
      },
      enumerable: false,
      configurable: true,
    });
    return Field;
  })(BaseField);

  var __read$7 =
    (undefined && undefined.__read) ||
    function (o, n) {
      var m = typeof Symbol === 'function' && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o),
        r,
        ar = [],
        e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error: error };
      } finally {
        try {
          if (r && !r.done && (m = i['return'])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
  var __spreadArray$2 =
    (undefined && undefined.__spreadArray) ||
    function (to, from, pack) {
      if (pack || arguments.length === 2)
        for (var i = 0, l = from.length, ar; i < l; i++) {
          if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
          }
        }
      return to.concat(ar || Array.prototype.slice.call(from));
    };
  var createEffectHook = function (type, callback) {
    return function () {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      if (GlobalState.effectStart) {
        GlobalState.lifecycles.push(
          new LifeCycle(type, function (payload, ctx) {
            if (isFn$2(callback)) {
              callback
                .apply(void 0, __spreadArray$2([payload, ctx], __read$7(GlobalState.context), false))
                .apply(void 0, __spreadArray$2([], __read$7(args), false));
            }
          }),
        );
      } else {
        throw new Error('Effect hooks cannot be used in asynchronous function body');
      }
    };
  };
  var createEffectContext = function (defaultValue) {
    var index;
    return {
      provide: function (value) {
        if (GlobalState.effectStart) {
          index = GlobalState.context.length;
          GlobalState.context[index] = isValid$4(value) ? value : defaultValue;
        } else {
          throw new Error('Provide method cannot be used in asynchronous function body');
        }
      },
      consume: function () {
        if (!GlobalState.effectStart) {
          throw new Error('Consume method cannot be used in asynchronous function body');
        }
        return GlobalState.context[index];
      },
    };
  };
  var FormEffectContext = createEffectContext();
  var runEffects = function (context) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      args[_i - 1] = arguments[_i];
    }
    GlobalState.lifecycles = [];
    GlobalState.context = [];
    GlobalState.effectStart = true;
    GlobalState.effectEnd = false;
    if (isForm(context)) {
      FormEffectContext.provide(context);
    }
    args.forEach(function (effects) {
      if (isFn$2(effects)) {
        effects(context);
      }
    });
    GlobalState.context = [];
    GlobalState.effectStart = false;
    GlobalState.effectEnd = true;
    return GlobalState.lifecycles;
  };

  var __extends$2 =
    (undefined && undefined.__extends) ||
    (function () {
      var extendStatics = function (d, b) {
        extendStatics =
          Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array &&
            function (d, b) {
              d.__proto__ = b;
            }) ||
          function (d, b) {
            for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
          };
        return extendStatics(d, b);
      };
      return function (d, b) {
        if (typeof b !== 'function' && b !== null)
          throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
      };
    })();
  var __read$6 =
    (undefined && undefined.__read) ||
    function (o, n) {
      var m = typeof Symbol === 'function' && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o),
        r,
        ar = [],
        e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error: error };
      } finally {
        try {
          if (r && !r.done && (m = i['return'])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
  var __spreadArray$1 =
    (undefined && undefined.__spreadArray) ||
    function (to, from, pack) {
      if (pack || arguments.length === 2)
        for (var i = 0, l = from.length, ar; i < l; i++) {
          if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
          }
        }
      return to.concat(ar || Array.prototype.slice.call(from));
    };
  var ArrayField = /** @class */ (function (_super) {
    __extends$2(ArrayField, _super);
    function ArrayField(address, props, form, designable) {
      var _this = _super.call(this, address, props, form, designable) || this;
      _this.displayName = 'ArrayField';
      _this.push = function () {
        var items = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          items[_i] = arguments[_i];
        }
        return action(function () {
          var _a;
          if (!isArr$2(_this.value)) {
            _this.value = [];
          }
          (_a = _this.value).push.apply(_a, __spreadArray$1([], __read$6(items), false));
          return _this.onInput(_this.value);
        });
      };
      _this.pop = function () {
        if (!isArr$2(_this.value)) return;
        return action(function () {
          var index = _this.value.length - 1;
          spliceArrayState(_this, {
            startIndex: index,
            deleteCount: 1,
          });
          _this.value.pop();
          return _this.onInput(_this.value);
        });
      };
      _this.insert = function (index) {
        var items = [];
        for (var _i = 1; _i < arguments.length; _i++) {
          items[_i - 1] = arguments[_i];
        }
        return action(function () {
          var _a;
          if (!isArr$2(_this.value)) {
            _this.value = [];
          }
          spliceArrayState(_this, {
            startIndex: index,
            insertCount: items.length,
          });
          (_a = _this.value).splice.apply(_a, __spreadArray$1([index, 0], __read$6(items), false));
          return _this.onInput(_this.value);
        });
      };
      _this.remove = function (index) {
        if (!isArr$2(_this.value)) return;
        return action(function () {
          spliceArrayState(_this, {
            startIndex: index,
            deleteCount: 1,
          });
          _this.value.splice(index, 1);
          return _this.onInput(_this.value);
        });
      };
      _this.shift = function () {
        if (!isArr$2(_this.value)) return;
        return action(function () {
          _this.value.shift();
          return _this.onInput(_this.value);
        });
      };
      _this.unshift = function () {
        var items = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          items[_i] = arguments[_i];
        }
        return action(function () {
          var _a;
          if (!isArr$2(_this.value)) {
            _this.value = [];
          }
          spliceArrayState(_this, {
            startIndex: 0,
            insertCount: items.length,
          });
          (_a = _this.value).unshift.apply(_a, __spreadArray$1([], __read$6(items), false));
          return _this.onInput(_this.value);
        });
      };
      _this.move = function (fromIndex, toIndex) {
        if (!isArr$2(_this.value)) return;
        if (fromIndex === toIndex) return;
        return action(function () {
          var fromItem = _this.value[fromIndex];
          _this.value.splice(fromIndex, 1);
          _this.value.splice(toIndex, 0, fromItem);
          exchangeArrayState(_this, {
            fromIndex: fromIndex,
            toIndex: toIndex,
          });
          return _this.onInput(_this.value);
        });
      };
      _this.moveUp = function (index) {
        if (!isArr$2(_this.value)) return;
        return _this.move(index, index - 1 < 0 ? _this.value.length - 1 : index - 1);
      };
      _this.moveDown = function (index) {
        if (!isArr$2(_this.value)) return;
        return _this.move(index, index + 1 >= _this.value.length ? 0 : index + 1);
      };
      _this.makeAutoCleanable();
      return _this;
    }
    ArrayField.prototype.makeAutoCleanable = function () {
      var _this = this;
      this.disposers.push(
        reaction(
          function () {
            var _a;
            return (_a = _this.value) === null || _a === void 0 ? void 0 : _a.length;
          },
          function (newLength, oldLength) {
            if (oldLength && !newLength) {
              cleanupArrayChildren(_this, 0);
            } else if (newLength < oldLength) {
              cleanupArrayChildren(_this, newLength);
            }
          },
        ),
      );
    };
    return ArrayField;
  })(Field$1);

  var __extends$1 =
    (undefined && undefined.__extends) ||
    (function () {
      var extendStatics = function (d, b) {
        extendStatics =
          Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array &&
            function (d, b) {
              d.__proto__ = b;
            }) ||
          function (d, b) {
            for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
          };
        return extendStatics(d, b);
      };
      return function (d, b) {
        if (typeof b !== 'function' && b !== null)
          throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
      };
    })();
  var ObjectField = /** @class */ (function (_super) {
    __extends$1(ObjectField, _super);
    function ObjectField(address, props, form, designable) {
      var _this = _super.call(this, address, props, form, designable) || this;
      _this.displayName = 'ObjectField';
      _this.additionalProperties = [];
      _this.addProperty = function (key, value) {
        _this.form.setValuesIn(_this.path.concat(key), value);
        _this.additionalProperties.push(key);
        return _this.onInput(_this.value);
      };
      _this.removeProperty = function (key) {
        _this.form.deleteValuesIn(_this.path.concat(key));
        _this.additionalProperties.splice(_this.additionalProperties.indexOf(key), 1);
        return _this.onInput(_this.value);
      };
      _this.existProperty = function (key) {
        return _this.form.existValuesIn(_this.path.concat(key));
      };
      _this.makeAutoCleanable();
      return _this;
    }
    ObjectField.prototype.makeAutoCleanable = function () {
      var _this = this;
      this.disposers.push(
        reaction(
          function () {
            return Object.keys(_this.value || {});
          },
          function (newKeys) {
            var filterKeys = _this.additionalProperties.filter(function (key) {
              return !newKeys.includes(key);
            });
            cleanupObjectChildren(_this, filterKeys);
          },
        ),
      );
    };
    return ObjectField;
  })(Field$1);

  var __extends =
    (undefined && undefined.__extends) ||
    (function () {
      var extendStatics = function (d, b) {
        extendStatics =
          Object.setPrototypeOf ||
          ({ __proto__: [] } instanceof Array &&
            function (d, b) {
              d.__proto__ = b;
            }) ||
          function (d, b) {
            for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
          };
        return extendStatics(d, b);
      };
      return function (d, b) {
        if (typeof b !== 'function' && b !== null)
          throw new TypeError('Class extends value ' + String(b) + ' is not a constructor or null');
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
      };
    })();
  var VoidField = /** @class */ (function (_super) {
    __extends(VoidField, _super);
    function VoidField(address, props, form, designable) {
      var _this = _super.call(this) || this;
      _this.displayName = 'VoidField';
      _this.setState = createStateSetter(_this);
      _this.getState = createStateGetter(_this);
      _this.form = form;
      _this.props = props;
      _this.designable = designable;
      initializeStart();
      _this.makeIndexes(address);
      _this.initialize();
      _this.makeObservable();
      _this.makeReactive();
      _this.onInit();
      initializeEnd();
      return _this;
    }
    VoidField.prototype.initialize = function () {
      this.mounted = false;
      this.unmounted = false;
      this.initialized = false;
      this.title = this.props.title;
      this.description = this.props.description;
      this.pattern = this.props.pattern;
      this.display = this.props.display;
      this.hidden = this.props.hidden;
      this.editable = this.props.editable;
      this.disabled = this.props.disabled;
      this.readOnly = this.props.readOnly;
      this.readPretty = this.props.readPretty;
      this.visible = this.props.visible;
      this.content = this.props.content;
      this.data = this.props.data;
      this.decorator = toArr$1(this.props.decorator);
      this.component = toArr$1(this.props.component);
    };
    VoidField.prototype.makeObservable = function () {
      if (this.designable) return;
      define(this, {
        title: observable.ref,
        description: observable.ref,
        selfDisplay: observable.ref,
        selfPattern: observable.ref,
        initialized: observable.ref,
        mounted: observable.ref,
        unmounted: observable.ref,
        decoratorType: observable.ref,
        componentType: observable.ref,
        content: observable.ref,
        data: observable.shallow,
        decoratorProps: observable,
        componentProps: observable,
        display: observable.computed,
        pattern: observable.computed,
        hidden: observable.computed,
        visible: observable.computed,
        disabled: observable.computed,
        readOnly: observable.computed,
        readPretty: observable.computed,
        editable: observable.computed,
        component: observable.computed,
        decorator: observable.computed,
        setTitle: action,
        setDescription: action,
        setDisplay: action,
        setPattern: action,
        setComponent: action,
        setComponentProps: action,
        setDecorator: action,
        setDecoratorProps: action,
        onInit: batch,
        onMount: batch,
        onUnmount: batch,
      });
    };
    VoidField.prototype.makeReactive = function () {
      if (this.designable) return;
      createReactions(this);
    };
    return VoidField;
  })(BaseField);

  var __assign$k =
    (undefined && undefined.__assign) ||
    function () {
      __assign$k =
        Object.assign ||
        function (t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
      return __assign$k.apply(this, arguments);
    };
  var DEV_TOOLS_HOOK = '__FORMILY_DEV_TOOLS_HOOK__';
  var Form = /** @class */ (function () {
    function Form(props) {
      var _this = this;
      this.displayName = 'Form';
      this.fields = {};
      this.requests = {};
      this.indexes = {};
      this.disposers = [];
      /** 创建字段 **/
      this.createField = function (props) {
        var address = Path.parse(props.basePath).concat(props.name);
        var identifier = address.toString();
        if (!identifier) return;
        if (!_this.fields[identifier] || _this.props.designable) {
          batch(function () {
            new Field$1(address, props, _this, _this.props.designable);
          });
          _this.notify(LifeCycleTypes.ON_FORM_GRAPH_CHANGE);
        }
        return _this.fields[identifier];
      };
      this.createArrayField = function (props) {
        var address = Path.parse(props.basePath).concat(props.name);
        var identifier = address.toString();
        if (!identifier) return;
        if (!_this.fields[identifier] || _this.props.designable) {
          batch(function () {
            new ArrayField(
              address,
              __assign$k(__assign$k({}, props), { value: isArr$2(props.value) ? props.value : [] }),
              _this,
              _this.props.designable,
            );
          });
          _this.notify(LifeCycleTypes.ON_FORM_GRAPH_CHANGE);
        }
        return _this.fields[identifier];
      };
      this.createObjectField = function (props) {
        var address = Path.parse(props.basePath).concat(props.name);
        var identifier = address.toString();
        if (!identifier) return;
        if (!_this.fields[identifier] || _this.props.designable) {
          batch(function () {
            new ObjectField(
              address,
              __assign$k(__assign$k({}, props), { value: isObj$1(props.value) ? props.value : {} }),
              _this,
              _this.props.designable,
            );
          });
          _this.notify(LifeCycleTypes.ON_FORM_GRAPH_CHANGE);
        }
        return _this.fields[identifier];
      };
      this.createVoidField = function (props) {
        var address = Path.parse(props.basePath).concat(props.name);
        var identifier = address.toString();
        if (!identifier) return;
        if (!_this.fields[identifier] || _this.props.designable) {
          batch(function () {
            new VoidField(address, props, _this, _this.props.designable);
          });
          _this.notify(LifeCycleTypes.ON_FORM_GRAPH_CHANGE);
        }
        return _this.fields[identifier];
      };
      /** 状态操作模型 **/
      this.setValues = function (values, strategy) {
        if (strategy === void 0) {
          strategy = 'merge';
        }
        if (!isPlainObj$1(values)) return;
        if (strategy === 'merge' || strategy === 'deepMerge') {
          _this.values = merge(_this.values, values, {
            arrayMerge: function (target, source) {
              return source;
            },
          });
        } else if (strategy === 'shallowMerge') {
          _this.values = Object.assign(_this.values, values);
        } else {
          _this.values = values;
        }
      };
      this.setInitialValues = function (initialValues, strategy) {
        if (strategy === void 0) {
          strategy = 'merge';
        }
        if (!isPlainObj$1(initialValues)) return;
        if (strategy === 'merge' || strategy === 'deepMerge') {
          _this.initialValues = merge(_this.initialValues, initialValues, {
            arrayMerge: function (target, source) {
              return source;
            },
          });
        } else if (strategy === 'shallowMerge') {
          _this.initialValues = Object.assign(_this.initialValues, initialValues);
        } else {
          _this.initialValues = initialValues;
        }
      };
      this.setValuesIn = function (pattern, value) {
        Path.setIn(_this.values, pattern, value);
      };
      this.deleteValuesIn = function (pattern) {
        Path.deleteIn(_this.values, pattern);
      };
      this.existValuesIn = function (pattern) {
        return Path.existIn(_this.values, pattern);
      };
      this.getValuesIn = function (pattern) {
        return Path.getIn(_this.values, pattern);
      };
      this.setInitialValuesIn = function (pattern, initialValue) {
        Path.setIn(_this.initialValues, pattern, initialValue);
      };
      this.deleteInitialValuesIn = function (pattern) {
        Path.deleteIn(_this.initialValues, pattern);
      };
      this.existInitialValuesIn = function (pattern) {
        return Path.existIn(_this.initialValues, pattern);
      };
      this.getInitialValuesIn = function (pattern) {
        return Path.getIn(_this.initialValues, pattern);
      };
      this.setLoading = function (loading) {
        setLoading(_this, loading);
      };
      this.setSubmitting = function (submitting) {
        setSubmitting(_this, submitting);
      };
      this.setValidating = function (validating) {
        setValidating(_this, validating);
      };
      this.setDisplay = function (display) {
        _this.display = display;
      };
      this.setPattern = function (pattern) {
        _this.pattern = pattern;
      };
      this.addEffects = function (id, effects) {
        if (!_this.heart.hasLifeCycles(id)) {
          _this.heart.addLifeCycles(id, runEffects(_this, effects));
        }
      };
      this.removeEffects = function (id) {
        _this.heart.removeLifeCycles(id);
      };
      this.setEffects = function (effects) {
        _this.heart.setLifeCycles(runEffects(_this, effects));
      };
      this.clearErrors = function (pattern) {
        if (pattern === void 0) {
          pattern = '*';
        }
        _this.query(pattern).forEach(function (field) {
          if (!isVoidField(field)) {
            field.setFeedback({
              type: 'error',
              messages: [],
            });
          }
        });
      };
      this.clearWarnings = function (pattern) {
        if (pattern === void 0) {
          pattern = '*';
        }
        _this.query(pattern).forEach(function (field) {
          if (!isVoidField(field)) {
            field.setFeedback({
              type: 'warning',
              messages: [],
            });
          }
        });
      };
      this.clearSuccesses = function (pattern) {
        if (pattern === void 0) {
          pattern = '*';
        }
        _this.query(pattern).forEach(function (field) {
          if (!isVoidField(field)) {
            field.setFeedback({
              type: 'success',
              messages: [],
            });
          }
        });
      };
      this.query = function (pattern) {
        return new Query({
          pattern: pattern,
          base: '',
          form: _this,
        });
      };
      this.queryFeedbacks = function (search) {
        return _this.query(search.address || search.path || '*').reduce(function (messages, field) {
          if (isVoidField(field)) return messages;
          return messages.concat(
            field
              .queryFeedbacks(search)
              .map(function (feedback) {
                return __assign$k(__assign$k({}, feedback), {
                  address: field.address.toString(),
                  path: field.path.toString(),
                });
              })
              .filter(function (feedback) {
                return feedback.messages.length > 0;
              }),
          );
        }, []);
      };
      this.notify = function (type, payload) {
        _this.heart.publish(type, payload !== null && payload !== void 0 ? payload : _this);
      };
      this.subscribe = function (subscriber) {
        return _this.heart.subscribe(subscriber);
      };
      this.unsubscribe = function (id) {
        _this.heart.unsubscribe(id);
      };
      /**事件钩子**/
      this.onInit = function () {
        _this.initialized = true;
        _this.notify(LifeCycleTypes.ON_FORM_INIT);
      };
      this.onMount = function () {
        _this.mounted = true;
        _this.notify(LifeCycleTypes.ON_FORM_MOUNT);
        if (globalThisPolyfill$1[DEV_TOOLS_HOOK] && !_this.props.designable) {
          globalThisPolyfill$1[DEV_TOOLS_HOOK].inject(_this.id, _this);
        }
      };
      this.onUnmount = function () {
        _this.notify(LifeCycleTypes.ON_FORM_UNMOUNT);
        _this.query('*').forEach(function (field) {
          return field.destroy();
        });
        _this.disposers.forEach(function (dispose) {
          return dispose();
        });
        _this.unmounted = true;
        _this.indexes = {};
        _this.heart.clear();
        if (globalThisPolyfill$1[DEV_TOOLS_HOOK] && !_this.props.designable) {
          globalThisPolyfill$1[DEV_TOOLS_HOOK].unmount(_this.id);
        }
      };
      this.setState = createStateSetter(this);
      this.getState = createStateGetter(this);
      this.setFormState = createStateSetter(this);
      this.getFormState = createStateGetter(this);
      this.setFieldState = createBatchStateSetter(this);
      this.getFieldState = createBatchStateGetter(this);
      this.getFormGraph = function () {
        return _this.graph.getGraph();
      };
      this.setFormGraph = function (graph) {
        _this.graph.setGraph(graph);
      };
      this.clearFormGraph = function (pattern) {
        if (pattern === void 0) {
          pattern = '*';
        }
        _this.query(pattern).forEach(function (field) {
          field.destroy();
        });
      };
      this.validate = function (pattern) {
        if (pattern === void 0) {
          pattern = '*';
        }
        return batchValidate(_this, pattern);
      };
      this.submit = function (onSubmit) {
        return batchSubmit(_this, onSubmit);
      };
      this.reset = function (pattern, options) {
        if (pattern === void 0) {
          pattern = '*';
        }
        return batchReset(_this, pattern, options);
      };
      this.initialize(props);
      this.makeObservable();
      this.makeReactive();
      this.makeValues();
      this.onInit();
    }
    Form.prototype.initialize = function (props) {
      this.id = uid();
      this.props = __assign$k({}, props);
      this.initialized = false;
      this.submitting = false;
      this.validating = false;
      this.loading = false;
      this.modified = false;
      this.mounted = false;
      this.unmounted = false;
      this.display = this.props.display || 'visible';
      this.pattern = this.props.pattern || 'editable';
      this.editable = this.props.editable;
      this.disabled = this.props.disabled;
      this.readOnly = this.props.readOnly;
      this.readPretty = this.props.readPretty;
      this.visible = this.props.visible;
      this.hidden = this.props.hidden;
      this.graph = new Graph(this);
      this.heart = new Heart({
        lifecycles: this.lifecycles,
        context: this,
      });
    };
    Form.prototype.makeValues = function () {
      this.values = getValidFormValues(this.props.values);
      this.initialValues = getValidFormValues(this.props.initialValues);
    };
    Form.prototype.makeObservable = function () {
      define(this, {
        fields: observable.shallow,
        initialized: observable.ref,
        validating: observable.ref,
        submitting: observable.ref,
        loading: observable.ref,
        modified: observable.ref,
        pattern: observable.ref,
        display: observable.ref,
        mounted: observable.ref,
        unmounted: observable.ref,
        values: observable,
        initialValues: observable,
        valid: observable.computed,
        invalid: observable.computed,
        errors: observable.computed,
        warnings: observable.computed,
        successes: observable.computed,
        hidden: observable.computed,
        visible: observable.computed,
        editable: observable.computed,
        readOnly: observable.computed,
        readPretty: observable.computed,
        disabled: observable.computed,
        setValues: action,
        setValuesIn: action,
        setInitialValues: action,
        setInitialValuesIn: action,
        setPattern: action,
        setDisplay: action,
        setState: action,
        deleteInitialValuesIn: action,
        deleteValuesIn: action,
        setSubmitting: action,
        setValidating: action,
        setFormGraph: action,
        clearFormGraph: action,
        reset: action,
        submit: action,
        validate: action,
        onMount: batch,
        onUnmount: batch,
        onInit: batch,
      });
    };
    Form.prototype.makeReactive = function () {
      var _this = this;
      this.disposers.push(
        observe(
          this,
          function (change) {
            triggerFormInitialValuesChange(_this, change);
            triggerFormValuesChange(_this, change);
          },
          true,
        ),
      );
    };
    Object.defineProperty(Form.prototype, 'valid', {
      get: function () {
        return !this.invalid;
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(Form.prototype, 'invalid', {
      get: function () {
        return this.errors.length > 0;
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(Form.prototype, 'errors', {
      get: function () {
        return this.queryFeedbacks({
          type: 'error',
        });
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(Form.prototype, 'warnings', {
      get: function () {
        return this.queryFeedbacks({
          type: 'warning',
        });
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(Form.prototype, 'successes', {
      get: function () {
        return this.queryFeedbacks({
          type: 'success',
        });
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(Form.prototype, 'lifecycles', {
      get: function () {
        return runEffects(this, this.props.effects);
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(Form.prototype, 'hidden', {
      get: function () {
        return this.display === 'hidden';
      },
      set: function (hidden) {
        if (!isValid$4(hidden)) return;
        if (hidden) {
          this.display = 'hidden';
        } else {
          this.display = 'visible';
        }
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(Form.prototype, 'visible', {
      get: function () {
        return this.display === 'visible';
      },
      set: function (visible) {
        if (!isValid$4(visible)) return;
        if (visible) {
          this.display = 'visible';
        } else {
          this.display = 'none';
        }
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(Form.prototype, 'editable', {
      get: function () {
        return this.pattern === 'editable';
      },
      set: function (editable) {
        if (!isValid$4(editable)) return;
        if (editable) {
          this.pattern = 'editable';
        } else {
          this.pattern = 'readPretty';
        }
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(Form.prototype, 'readOnly', {
      get: function () {
        return this.pattern === 'readOnly';
      },
      set: function (readOnly) {
        if (!isValid$4(readOnly)) return;
        if (readOnly) {
          this.pattern = 'readOnly';
        } else {
          this.pattern = 'editable';
        }
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(Form.prototype, 'disabled', {
      get: function () {
        return this.pattern === 'disabled';
      },
      set: function (disabled) {
        if (!isValid$4(disabled)) return;
        if (disabled) {
          this.pattern = 'disabled';
        } else {
          this.pattern = 'editable';
        }
      },
      enumerable: false,
      configurable: true,
    });
    Object.defineProperty(Form.prototype, 'readPretty', {
      get: function () {
        return this.pattern === 'readPretty';
      },
      set: function (readPretty) {
        if (!isValid$4(readPretty)) return;
        if (readPretty) {
          this.pattern = 'readPretty';
        } else {
          this.pattern = 'editable';
        }
      },
      enumerable: false,
      configurable: true,
    });
    return Form;
  })();

  var createForm = function (options) {
    return new Form(options);
  };

  function createFormEffect(type) {
    return createEffectHook(type, function (form) {
      return function (callback) {
        batch(function () {
          callback(form);
        });
      };
    });
  }
  createFormEffect(LifeCycleTypes.ON_FORM_INIT);
  createFormEffect(LifeCycleTypes.ON_FORM_MOUNT);
  createFormEffect(LifeCycleTypes.ON_FORM_UNMOUNT);
  createFormEffect(LifeCycleTypes.ON_FORM_VALUES_CHANGE);
  createFormEffect(LifeCycleTypes.ON_FORM_INITIAL_VALUES_CHANGE);
  createFormEffect(LifeCycleTypes.ON_FORM_INPUT_CHANGE);
  createFormEffect(LifeCycleTypes.ON_FORM_SUBMIT);
  createFormEffect(LifeCycleTypes.ON_FORM_RESET);
  createFormEffect(LifeCycleTypes.ON_FORM_SUBMIT_START);
  createFormEffect(LifeCycleTypes.ON_FORM_SUBMIT_END);
  createFormEffect(LifeCycleTypes.ON_FORM_SUBMIT_SUCCESS);
  createFormEffect(LifeCycleTypes.ON_FORM_SUBMIT_FAILED);
  createFormEffect(LifeCycleTypes.ON_FORM_SUBMIT_VALIDATE_START);
  createFormEffect(LifeCycleTypes.ON_FORM_SUBMIT_VALIDATE_SUCCESS);
  createFormEffect(LifeCycleTypes.ON_FORM_SUBMIT_VALIDATE_FAILED);
  createFormEffect(LifeCycleTypes.ON_FORM_SUBMIT_VALIDATE_END);
  createFormEffect(LifeCycleTypes.ON_FORM_VALIDATE_START);
  createFormEffect(LifeCycleTypes.ON_FORM_VALIDATE_SUCCESS);
  createFormEffect(LifeCycleTypes.ON_FORM_VALIDATE_FAILED);
  createFormEffect(LifeCycleTypes.ON_FORM_VALIDATE_END);
  createFormEffect(LifeCycleTypes.ON_FORM_GRAPH_CHANGE);
  createFormEffect(LifeCycleTypes.ON_FORM_LOADING);

  function createFieldEffect(type) {
    return createEffectHook(type, function (field, form) {
      return function (pattern, callback) {
        if (Path.parse(pattern).matchAliasGroup(field.address, field.path)) {
          batch(function () {
            callback(field, form);
          });
        }
      };
    });
  }
  createFieldEffect(LifeCycleTypes.ON_FIELD_INIT);
  createFieldEffect(LifeCycleTypes.ON_FIELD_MOUNT);
  createFieldEffect(LifeCycleTypes.ON_FIELD_UNMOUNT);
  createFieldEffect(LifeCycleTypes.ON_FIELD_VALUE_CHANGE);
  createFieldEffect(LifeCycleTypes.ON_FIELD_INITIAL_VALUE_CHANGE);
  createFieldEffect(LifeCycleTypes.ON_FIELD_INPUT_VALUE_CHANGE);
  createFieldEffect(LifeCycleTypes.ON_FIELD_VALIDATE_START);
  createFieldEffect(LifeCycleTypes.ON_FIELD_VALIDATE_END);
  createFieldEffect(LifeCycleTypes.ON_FIELD_VALIDATING);
  createFieldEffect(LifeCycleTypes.ON_FIELD_VALIDATE_FAILED);
  createFieldEffect(LifeCycleTypes.ON_FIELD_VALIDATE_SUCCESS);
  createFieldEffect(LifeCycleTypes.ON_FIELD_SUBMIT);
  createFieldEffect(LifeCycleTypes.ON_FIELD_SUBMIT_START);
  createFieldEffect(LifeCycleTypes.ON_FIELD_SUBMIT_END);
  createFieldEffect(LifeCycleTypes.ON_FIELD_SUBMIT_VALIDATE_START);
  createFieldEffect(LifeCycleTypes.ON_FIELD_SUBMIT_VALIDATE_END);
  createFieldEffect(LifeCycleTypes.ON_FIELD_SUBMIT_SUCCESS);
  createFieldEffect(LifeCycleTypes.ON_FIELD_SUBMIT_FAILED);
  createFieldEffect(LifeCycleTypes.ON_FIELD_SUBMIT_VALIDATE_SUCCESS);
  createFieldEffect(LifeCycleTypes.ON_FIELD_SUBMIT_VALIDATE_FAILED);
  createFieldEffect(LifeCycleTypes.ON_FIELD_RESET);
  createFieldEffect(LifeCycleTypes.ON_FIELD_LOADING);

  var __assign$j =
    (undefined && undefined.__assign) ||
    function () {
      __assign$j =
        Object.assign ||
        function (t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
      return __assign$j.apply(this, arguments);
    };
  (undefined && undefined.__read) ||
    function (o, n) {
      var m = typeof Symbol === 'function' && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o),
        r,
        ar = [],
        e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error: error };
      } finally {
        try {
          if (r && !r.done && (m = i['return'])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };

  var __assign$i =
    (undefined && undefined.__assign) ||
    function () {
      __assign$i =
        Object.assign ||
        function (t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
      return __assign$i.apply(this, arguments);
    };
  var polyfills = {};
  var registerPolyfills = function (version, patch) {
    if (version && isFn$2(patch)) {
      polyfills[version] = polyfills[version] || [];
      polyfills[version].push(patch);
    }
  };

  var __assign$h =
    (undefined && undefined.__assign) ||
    function () {
      __assign$h =
        Object.assign ||
        function (t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
      return __assign$h.apply(this, arguments);
    };
  (undefined && undefined.__read) ||
    function (o, n) {
      var m = typeof Symbol === 'function' && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o),
        r,
        ar = [],
        e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error: error };
      } finally {
        try {
          if (r && !r.done && (m = i['return'])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
  (undefined && undefined.__spreadArray) ||
    function (to, from, pack) {
      if (pack || arguments.length === 2)
        for (var i = 0, l = from.length, ar; i < l; i++) {
          if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
          }
        }
      return to.concat(ar || Array.prototype.slice.call(from));
    };
  var VOID_COMPONENTS = ['card', 'block', 'grid-col', 'grid-row', 'grid', 'layout', 'step', 'tab', 'text-box'];
  var TYPE_DEFAULT_COMPONENTS = {};
  var transformCondition = function (condition) {
    if (isStr$1(condition)) {
      return condition.replace(/\$value/, '$self.value');
    }
  };
  var transformXLinkage = function (linkages) {
    if (isArr$2(linkages)) {
      return linkages.reduce(function (buf, item) {
        if (!item) return buf;
        if (item.type === 'value:visible') {
          return buf.concat({
            target: item.target,
            when: transformCondition(item.condition),
            fulfill: {
              state: {
                visible: true,
              },
            },
            otherwise: {
              state: {
                visible: false,
              },
            },
          });
        } else if (item.type === 'value:schema') {
          return buf.concat({
            target: item.target,
            when: transformCondition(item.condition),
            fulfill: {
              schema: SpecificationV1Polyfill(__assign$h({ version: '1.0' }, item.schema)),
            },
            otherwise: {
              schema: SpecificationV1Polyfill(__assign$h({ version: '1.0' }, item.otherwise)),
            },
          });
        } else if (item.type === 'value:state') {
          return buf.concat({
            target: item.target,
            when: transformCondition(item.condition),
            fulfill: {
              state: item.state,
            },
            otherwise: {
              state: item.otherwise,
            },
          });
        }
      }, []);
    }
    return [];
  };
  var SpecificationV1Polyfill = function (schema) {
    if (isValid$4(schema['editable'])) {
      schema['x-editable'] = schema['x-editable'] || schema['editable'];
      delete schema['editable'];
    }
    if (isValid$4(schema['visible'])) {
      schema['x-visible'] = schema['x-visible'] || schema['visible'];
      delete schema['visible'];
    }
    if (isValid$4(schema['display'])) {
      schema['x-display'] = schema['x-display'] || (schema['display'] ? 'visible' : 'hidden');
      delete schema['display'];
    }
    if (isValid$4(schema['x-props'])) {
      schema['x-decorator-props'] = schema['x-decorator-props'] || schema['x-props'];
      delete schema['display'];
    }
    if (schema['x-linkages']) {
      schema['x-reactions'] = toArr$1(schema['x-reactions']).concat(transformXLinkage(schema['x-linkages']));
      delete schema['x-linkages'];
    }
    if (schema['x-component']) {
      if (
        VOID_COMPONENTS.some(function (component) {
          return lowerCase(component) === lowerCase(schema['x-component']);
        })
      ) {
        schema['type'] = 'void';
      }
    } else {
      if (TYPE_DEFAULT_COMPONENTS[schema['type']]) {
        schema['x-component'] = TYPE_DEFAULT_COMPONENTS[schema['type']];
      }
    }
    if (!schema['x-decorator'] && schema['type'] !== 'void' && schema['type'] !== 'object') {
      schema['x-decorator'] = schema['x-decorator'] || 'FormItem';
    }
    if (schema['x-rules']) {
      schema['x-validator'] = [].concat(schema['x-validator'] || []).concat(schema['x-rules']);
    }
    return schema;
  };
  registerPolyfills('1.0', SpecificationV1Polyfill);

  var useAttach = function (target) {
    var oldTargetRef = React.useRef(null);
    React.useEffect(
      function () {
        if (oldTargetRef.current && target !== oldTargetRef.current) {
          oldTargetRef.current.onUnmount();
        }
        oldTargetRef.current = target;
        target.onMount();
        return function () {
          target.onUnmount();
        };
      },
      [target],
    );
    return target;
  };

  var createContextCleaner = function () {
    var contexts = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      contexts[_i] = arguments[_i];
    }
    return function (_a) {
      var children = _a.children;
      return contexts.reduce(function (buf, ctx) {
        return React__default['default'].createElement(ctx.Provider, { value: undefined }, buf);
      }, children);
    };
  };
  var FormContext = React.createContext(null);
  var FieldContext = React.createContext(null);
  var SchemaMarkupContext = React.createContext(null);
  var SchemaContext = React.createContext(null);
  var SchemaExpressionScopeContext = React.createContext(null);
  var SchemaOptionsContext = React.createContext(null);
  var ContextCleaner = createContextCleaner(
    FieldContext,
    SchemaMarkupContext,
    SchemaContext,
    SchemaExpressionScopeContext,
    SchemaOptionsContext,
  );

  /* istanbul ignore next */
  function globalSelf() {
    try {
      if (typeof self !== 'undefined') {
        return self;
      }
    } catch (e) {}
    try {
      if (typeof window !== 'undefined') {
        return window;
      }
    } catch (e) {}
    try {
      if (typeof global !== 'undefined') {
        return global;
      }
    } catch (e) {}
    return Function('return this')();
  }
  var globalThisPolyfill = globalSelf();

  var registry =
    globalThisPolyfill['FinalizationRegistry'] &&
    new globalThisPolyfill['FinalizationRegistry'](function (token) {
      var _a;
      return (_a = token === null || token === void 0 ? void 0 : token.clean) === null || _a === void 0
        ? void 0
        : _a.call(token);
    });
  var GarbageCollector = /** @class */ (function () {
    function GarbageCollector(clean, expireTime) {
      if (expireTime === void 0) {
        expireTime = 10000;
      }
      this.token = {
        clean: clean,
      };
      this.expireTime = expireTime;
    }
    GarbageCollector.prototype.open = function (target) {
      var _this = this;
      if (registry) {
        registry.register(target, this.token, this.token);
      } else {
        this.request = setTimeout(function () {
          var _a, _b;
          (_b = (_a = _this.token) === null || _a === void 0 ? void 0 : _a.clean) === null || _b === void 0
            ? void 0
            : _b.call(_a);
        }, this.expireTime);
      }
    };
    GarbageCollector.prototype.close = function () {
      if (registry) {
        registry.unregister(this.token);
      } else {
        clearTimeout(this.request);
      }
    };
    return GarbageCollector;
  })();

  var immediate = function (callback) {
    var disposed = false;
    Promise.resolve(0).then(function () {
      if (disposed) {
        disposed = false;
        return;
      }
      callback();
    });
    return function () {
      disposed = true;
    };
  };

  var useDidUpdate = function (callback) {
    var request = React.useRef(null);
    request.current = immediate(callback);
    React.useLayoutEffect(function () {
      request.current();
      callback();
    });
  };

  var __read$5 =
    (undefined && undefined.__read) ||
    function (o, n) {
      var m = typeof Symbol === 'function' && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o),
        r,
        ar = [],
        e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error: error };
      } finally {
        try {
          if (r && !r.done && (m = i['return'])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
  var EMPTY_ARRAY = [];
  var RENDER_COUNT = { value: 0 };
  var RENDER_QUEUE = new Set();
  function useForceUpdate() {
    var _a = __read$5(React.useState([]), 2),
      setState = _a[1];
    var unMountRef = React.useRef(false);
    React.useEffect(function () {
      unMountRef.current = false;
      return function () {
        unMountRef.current = true;
      };
    }, EMPTY_ARRAY);
    var update = React.useCallback(function () {
      if (unMountRef.current) return;
      setState([]);
    }, EMPTY_ARRAY);
    var scheduler = React.useCallback(function () {
      if (RENDER_COUNT.value === 0) {
        update();
      } else {
        RENDER_QUEUE.add(update);
      }
    }, EMPTY_ARRAY);
    RENDER_COUNT.value++;
    useDidUpdate(function () {
      if (RENDER_COUNT.value > 0) {
        RENDER_COUNT.value--;
      }
      if (RENDER_COUNT.value === 0) {
        RENDER_QUEUE.forEach(function (update) {
          RENDER_QUEUE.delete(update);
          update();
        });
      }
    });
    return scheduler;
  }

  var __read$4 =
    (undefined && undefined.__read) ||
    function (o, n) {
      var m = typeof Symbol === 'function' && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o),
        r,
        ar = [],
        e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error: error };
      } finally {
        try {
          if (r && !r.done && (m = i['return'])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
  var ObjectToBeRetainedByReact = /** @class */ (function () {
    function ObjectToBeRetainedByReact() {}
    return ObjectToBeRetainedByReact;
  })();
  function objectToBeRetainedByReactFactory() {
    return new ObjectToBeRetainedByReact();
  }
  var useObserver = function (view, options) {
    var forceUpdate = useForceUpdate();
    var unMountRef = React__default['default'].useRef(false);
    var trackerRef = React__default['default'].useRef(null);
    var gcRef = React__default['default'].useRef();
    var _a = __read$4(React__default['default'].useState(objectToBeRetainedByReactFactory), 1),
      objectRetainedByReact = _a[0];
    if (!trackerRef.current) {
      trackerRef.current = new Tracker(
        function () {
          if (typeof (options === null || options === void 0 ? void 0 : options.scheduler) === 'function') {
            options.scheduler(forceUpdate);
          } else {
            forceUpdate();
          }
        },
        options === null || options === void 0 ? void 0 : options.displayName,
      );
    }
    //StrictMode/ConcurrentMode会导致组件无法正确触发UnMount，所以只能自己做垃圾回收
    if (!gcRef.current) {
      gcRef.current = new GarbageCollector(function () {
        if (trackerRef.current) {
          trackerRef.current.dispose();
        }
      });
      gcRef.current.open(objectRetainedByReact);
    }
    React__default['default'].useEffect(function () {
      unMountRef.current = false;
      gcRef.current.close();
      return function () {
        unMountRef.current = true;
        if (trackerRef.current) {
          trackerRef.current.dispose();
          trackerRef.current = null;
        }
      };
    }, []);
    return trackerRef.current.track(view);
  };

  var __assign$g =
    (undefined && undefined.__assign) ||
    function () {
      __assign$g =
        Object.assign ||
        function (t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
      return __assign$g.apply(this, arguments);
    };
  function observer(component, options) {
    var realOptions = __assign$g({ forwardRef: false }, options);
    var wrappedComponent = realOptions.forwardRef
      ? React.forwardRef(function (props, ref) {
          return useObserver(function () {
            return component(__assign$g(__assign$g({}, props), { ref: ref }));
          }, realOptions);
        })
      : function (props) {
          return useObserver(function () {
            return component(props);
          }, realOptions);
        };
    var memoComponent = React.memo(wrappedComponent);
    hoistNonReactStatics_cjs(memoComponent, component);
    if (realOptions.displayName) {
      memoComponent.displayName = realOptions.displayName;
    }
    return memoComponent;
  }
  observer(function (props) {
    var children = typeof props.children === 'function' ? props.children() : props.children;
    return React__default['default'].createElement(React.Fragment, {}, children);
  });

  var useForm = function () {
    return React.useContext(FormContext);
  };

  var useField = function () {
    return React.useContext(FieldContext);
  };

  var useParentForm = function () {
    var field = useField();
    var form = useForm();
    var findObjectParent = function (field) {
      if (!field) return form;
      if (isObjectField(field)) return field;
      return findObjectParent(field === null || field === void 0 ? void 0 : field.parent);
    };
    return findObjectParent(field);
  };

  var __assign$f =
    (undefined && undefined.__assign) ||
    function () {
      __assign$f =
        Object.assign ||
        function (t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
      return __assign$f.apply(this, arguments);
    };
  function mapProps() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    return function (target) {
      return observer(
        function (props) {
          var field = useField();
          var results = args.reduce(function (props, mapper) {
            if (isFn$2(mapper)) {
              props = Object.assign(props, mapper(props, field));
            } else {
              each(mapper, function (to, extract) {
                var extractValue = Path.getIn(field, extract);
                var targetValue = isStr$1(to) ? to : extract;
                var originalValue = Path.getIn(props, targetValue);
                if (extract === 'value') {
                  if (to !== extract) {
                    delete props.value;
                  }
                }
                if (isValid$4(originalValue) && !isValid$4(extractValue)) return;
                Path.setIn(props, targetValue, extractValue);
              });
            }
            return props;
          }, __assign$f({}, props));
          return React__default['default'].createElement(target, results);
        },
        {
          forwardRef: true,
        },
      );
    };
  }
  function mapReadPretty(component, readPrettyProps) {
    return function (target) {
      return observer(
        function (props) {
          var field = useField();
          if (!isVoidField(field) && (field === null || field === void 0 ? void 0 : field.pattern) === 'readPretty') {
            return React__default['default'].createElement(
              component,
              __assign$f(__assign$f({}, readPrettyProps), props),
            );
          }
          return React__default['default'].createElement(target, props);
        },
        {
          forwardRef: true,
        },
      );
    };
  }
  function connect(target) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      args[_i - 1] = arguments[_i];
    }
    var Target = args.reduce(function (target, mapper) {
      return mapper(target);
    }, target);
    var Destination = React__default['default'].forwardRef(function (props, ref) {
      return React__default['default'].createElement(Target, __assign$f(__assign$f({}, props), { ref: ref }));
    });
    if (target) hoistNonReactStatics_cjs(Destination, target);
    return Destination;
  }

  var FormProvider = function (props) {
    var form = useAttach(props.form);
    return React__default['default'].createElement(
      ContextCleaner,
      null,
      React__default['default'].createElement(FormContext.Provider, { value: form }, props.children),
    );
  };
  FormProvider.displayName = 'FormProvider';

  var FormConsumer = observer(function (props) {
    var children = isFn$2(props.children) ? props.children(useForm()) : null;
    return React__default['default'].createElement(React.Fragment, null, children);
  });
  FormConsumer.displayName = 'FormConsumer';

  var __assign$e =
    (undefined && undefined.__assign) ||
    function () {
      __assign$e =
        Object.assign ||
        function (t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
      return __assign$e.apply(this, arguments);
    };
  var __read$3 =
    (undefined && undefined.__read) ||
    function (o, n) {
      var m = typeof Symbol === 'function' && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o),
        r,
        ar = [],
        e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error: error };
      } finally {
        try {
          if (r && !r.done && (m = i['return'])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
  var __spreadArray =
    (undefined && undefined.__spreadArray) ||
    function (to, from, pack) {
      if (pack || arguments.length === 2)
        for (var i = 0, l = from.length, ar; i < l; i++) {
          if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
          }
        }
      return to.concat(ar || Array.prototype.slice.call(from));
    };
  var mergeChildren = function (children, content) {
    if (!children && !content) return;
    return React__default['default'].createElement(React.Fragment, null, children, content);
  };
  var renderChildren = function (children) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      args[_i - 1] = arguments[_i];
    }
    return isFn$2(children) ? children.apply(void 0, __spreadArray([], __read$3(args), false)) : children;
  };
  var ReactiveInternal = function (props) {
    var _a;
    var options = React.useContext(SchemaOptionsContext);
    if (!props.field) {
      return React__default['default'].createElement(React.Fragment, null, renderChildren(props.children));
    }
    var field = props.field;
    var content = mergeChildren(
      renderChildren(props.children, field, field.form),
      (_a = field.content) !== null && _a !== void 0 ? _a : field.component[1].children,
    );
    if (field.display !== 'visible') return null;
    var renderDecorator = function (children) {
      var _a;
      if (!field.decorator[0]) {
        return React__default['default'].createElement(React.Fragment, null, children);
      }
      var finalComponent =
        (_a = Path.getIn(options === null || options === void 0 ? void 0 : options.components, field.decorator[0])) !==
          null && _a !== void 0
          ? _a
          : field.decorator[0];
      return React__default['default'].createElement(finalComponent, toJS(field.decorator[1]), children);
    };
    var renderComponent = function () {
      var _a, _b, _c, _d;
      if (!field.component[0]) return content;
      var value = !isVoidField(field) ? field.value : undefined;
      var onChange = !isVoidField(field)
        ? function () {
            var _a, _b;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }
            field.onInput.apply(field, __spreadArray([], __read$3(args), false));
            (_b = (_a = field.component[1]) === null || _a === void 0 ? void 0 : _a.onChange) === null || _b === void 0
              ? void 0
              : _b.call.apply(_b, __spreadArray([_a], __read$3(args), false));
          }
        : (_a = field.component[1]) === null || _a === void 0
        ? void 0
        : _a.onChange;
      var onFocus = !isVoidField(field)
        ? function () {
            var _a, _b;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }
            field.onFocus.apply(field, __spreadArray([], __read$3(args), false));
            (_b = (_a = field.component[1]) === null || _a === void 0 ? void 0 : _a.onFocus) === null || _b === void 0
              ? void 0
              : _b.call.apply(_b, __spreadArray([_a], __read$3(args), false));
          }
        : (_b = field.component[1]) === null || _b === void 0
        ? void 0
        : _b.onFocus;
      var onBlur = !isVoidField(field)
        ? function () {
            var _a, _b;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }
            field.onBlur.apply(field, __spreadArray([], __read$3(args), false));
            (_b = (_a = field.component[1]) === null || _a === void 0 ? void 0 : _a.onBlur) === null || _b === void 0
              ? void 0
              : _b.call.apply(_b, __spreadArray([_a], __read$3(args), false));
          }
        : (_c = field.component[1]) === null || _c === void 0
        ? void 0
        : _c.onBlur;
      var disabled = !isVoidField(field) ? field.pattern === 'disabled' || field.pattern === 'readPretty' : undefined;
      var readOnly = !isVoidField(field) ? field.pattern === 'readOnly' : undefined;
      var finalComponent =
        (_d = Path.getIn(options === null || options === void 0 ? void 0 : options.components, field.component[0])) !==
          null && _d !== void 0
          ? _d
          : field.component[0];
      return React__default['default'].createElement(
        finalComponent,
        __assign$e(__assign$e({ disabled: disabled, readOnly: readOnly }, toJS(field.component[1])), {
          value: value,
          onChange: onChange,
          onFocus: onFocus,
          onBlur: onBlur,
        }),
        content,
      );
    };
    return renderDecorator(renderComponent());
  };
  ReactiveInternal.displayName = 'ReactiveField';
  var ReactiveField = observer(ReactiveInternal, {
    forwardRef: true,
  });

  var __assign$d =
    (undefined && undefined.__assign) ||
    function () {
      __assign$d =
        Object.assign ||
        function (t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
      return __assign$d.apply(this, arguments);
    };

  var __assign$c =
    (undefined && undefined.__assign) ||
    function () {
      __assign$c =
        Object.assign ||
        function (t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
      return __assign$c.apply(this, arguments);
    };

  var __assign$b =
    (undefined && undefined.__assign) ||
    function () {
      __assign$b =
        Object.assign ||
        function (t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
      return __assign$b.apply(this, arguments);
    };

  var __assign$a =
    (undefined && undefined.__assign) ||
    function () {
      __assign$a =
        Object.assign ||
        function (t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
      return __assign$a.apply(this, arguments);
    };
  var Field = function (props) {
    var form = useForm();
    var parent = useField();
    var field = useAttach(
      form.createField(__assign$a({ basePath: parent === null || parent === void 0 ? void 0 : parent.address }, props)),
    );
    return React__default['default'].createElement(
      FieldContext.Provider,
      { value: field },
      React__default['default'].createElement(ReactiveField, { field: field }, props.children),
    );
  };
  Field.displayName = 'Field';

  var __assign$9 =
    (undefined && undefined.__assign) ||
    function () {
      __assign$9 =
        Object.assign ||
        function (t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
      return __assign$9.apply(this, arguments);
    };

  var __assign$8 =
    (undefined && undefined.__assign) ||
    function () {
      __assign$8 =
        Object.assign ||
        function (t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
      return __assign$8.apply(this, arguments);
    };

  var IconContext = /*#__PURE__*/ React.createContext({});
  var Context = IconContext;

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true,
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);

      if (enumerableOnly) {
        symbols = symbols.filter(function (sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
      }

      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys(Object(source), true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArrayLimit(arr, i) {
    var _i = arr == null ? null : (typeof Symbol !== 'undefined' && arr[Symbol.iterator]) || arr['@@iterator'];

    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;

    var _s, _e;

    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i['return'] != null) _i['return']();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  }

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === 'string') return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === 'Object' && o.constructor) n = o.constructor.name;
    if (n === 'Map' || n === 'Set') return Array.from(o);
    if (n === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }

  function _nonIterableRest() {
    throw new TypeError(
      'Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.',
    );
  }

  function _slicedToArray(arr, i) {
    return (
      _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest()
    );
  }

  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }

  function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;

    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }

    return target;
  }

  function _typeof(obj) {
    '@babel/helpers - typeof';

    if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {
      _typeof = function _typeof(obj) {
        return typeof obj;
      };
    } else {
      _typeof = function _typeof(obj) {
        return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype
          ? 'symbol'
          : typeof obj;
      };
    }

    return _typeof(obj);
  }

  /**
   * Take input from [0, n] and return it as [0, 1]
   * @hidden
   */
  function bound01(n, max) {
    if (isOnePointZero(n)) {
      n = '100%';
    }
    var isPercent = isPercentage(n);
    n = max === 360 ? n : Math.min(max, Math.max(0, parseFloat(n)));
    // Automatically convert percentage into number
    if (isPercent) {
      n = parseInt(String(n * max), 10) / 100;
    }
    // Handle floating point rounding errors
    if (Math.abs(n - max) < 0.000001) {
      return 1;
    }
    // Convert into [0, 1] range if it isn't already
    if (max === 360) {
      // If n is a hue given in degrees,
      // wrap around out-of-range values into [0, 360] range
      // then convert into [0, 1].
      n = (n < 0 ? (n % max) + max : n % max) / parseFloat(String(max));
    } else {
      // If n not a hue given in degrees
      // Convert into [0, 1] range if it isn't already.
      n = (n % max) / parseFloat(String(max));
    }
    return n;
  }
  /**
   * Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1
   * <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>
   * @hidden
   */
  function isOnePointZero(n) {
    return typeof n === 'string' && n.indexOf('.') !== -1 && parseFloat(n) === 1;
  }
  /**
   * Check to see if string passed in is a percentage
   * @hidden
   */
  function isPercentage(n) {
    return typeof n === 'string' && n.indexOf('%') !== -1;
  }
  /**
   * Return a valid alpha value [0,1] with all invalid values being set to 1
   * @hidden
   */
  function boundAlpha(a) {
    a = parseFloat(a);
    if (isNaN(a) || a < 0 || a > 1) {
      a = 1;
    }
    return a;
  }
  /**
   * Replace a decimal with it's percentage value
   * @hidden
   */
  function convertToPercentage(n) {
    if (n <= 1) {
      return Number(n) * 100 + '%';
    }
    return n;
  }
  /**
   * Force a hex value to have 2 characters
   * @hidden
   */
  function pad2(c) {
    return c.length === 1 ? '0' + c : String(c);
  }

  // `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:
  // <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>
  /**
   * Handle bounds / percentage checking to conform to CSS color spec
   * <http://www.w3.org/TR/css3-color/>
   * *Assumes:* r, g, b in [0, 255] or [0, 1]
   * *Returns:* { r, g, b } in [0, 255]
   */
  function rgbToRgb(r, g, b) {
    return {
      r: bound01(r, 255) * 255,
      g: bound01(g, 255) * 255,
      b: bound01(b, 255) * 255,
    };
  }
  function hue2rgb(p, q, t) {
    if (t < 0) {
      t += 1;
    }
    if (t > 1) {
      t -= 1;
    }
    if (t < 1 / 6) {
      return p + (q - p) * (6 * t);
    }
    if (t < 1 / 2) {
      return q;
    }
    if (t < 2 / 3) {
      return p + (q - p) * (2 / 3 - t) * 6;
    }
    return p;
  }
  /**
   * Converts an HSL color value to RGB.
   *
   * *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]
   * *Returns:* { r, g, b } in the set [0, 255]
   */
  function hslToRgb(h, s, l) {
    var r;
    var g;
    var b;
    h = bound01(h, 360);
    s = bound01(s, 100);
    l = bound01(l, 100);
    if (s === 0) {
      // achromatic
      g = l;
      b = l;
      r = l;
    } else {
      var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
      var p = 2 * l - q;
      r = hue2rgb(p, q, h + 1 / 3);
      g = hue2rgb(p, q, h);
      b = hue2rgb(p, q, h - 1 / 3);
    }
    return { r: r * 255, g: g * 255, b: b * 255 };
  }
  /**
   * Converts an RGB color value to HSV
   *
   * *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]
   * *Returns:* { h, s, v } in [0,1]
   */
  function rgbToHsv(r, g, b) {
    r = bound01(r, 255);
    g = bound01(g, 255);
    b = bound01(b, 255);
    var max = Math.max(r, g, b);
    var min = Math.min(r, g, b);
    var h = 0;
    var v = max;
    var d = max - min;
    var s = max === 0 ? 0 : d / max;
    if (max === min) {
      h = 0; // achromatic
    } else {
      switch (max) {
        case r:
          h = (g - b) / d + (g < b ? 6 : 0);
          break;
        case g:
          h = (b - r) / d + 2;
          break;
        case b:
          h = (r - g) / d + 4;
          break;
      }
      h /= 6;
    }
    return { h: h, s: s, v: v };
  }
  /**
   * Converts an HSV color value to RGB.
   *
   * *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]
   * *Returns:* { r, g, b } in the set [0, 255]
   */
  function hsvToRgb(h, s, v) {
    h = bound01(h, 360) * 6;
    s = bound01(s, 100);
    v = bound01(v, 100);
    var i = Math.floor(h);
    var f = h - i;
    var p = v * (1 - s);
    var q = v * (1 - f * s);
    var t = v * (1 - (1 - f) * s);
    var mod = i % 6;
    var r = [v, q, p, p, t, v][mod];
    var g = [t, v, v, q, p, p][mod];
    var b = [p, p, t, v, v, q][mod];
    return { r: r * 255, g: g * 255, b: b * 255 };
  }
  /**
   * Converts an RGB color to hex
   *
   * Assumes r, g, and b are contained in the set [0, 255]
   * Returns a 3 or 6 character hex
   */
  function rgbToHex(r, g, b, allow3Char) {
    var hex = [pad2(Math.round(r).toString(16)), pad2(Math.round(g).toString(16)), pad2(Math.round(b).toString(16))];
    // Return a 3 character hex if possible
    if (
      allow3Char &&
      hex[0].startsWith(hex[0].charAt(1)) &&
      hex[1].startsWith(hex[1].charAt(1)) &&
      hex[2].startsWith(hex[2].charAt(1))
    ) {
      return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);
    }
    return hex.join('');
  }
  /** Converts a hex value to a decimal */
  function convertHexToDecimal(h) {
    return parseIntFromHex(h) / 255;
  }
  /** Parse a base-16 hex value into a base-10 integer */
  function parseIntFromHex(val) {
    return parseInt(val, 16);
  }

  // https://github.com/bahamas10/css-color-names/blob/master/css-color-names.json
  /**
   * @hidden
   */
  var names = {
    aliceblue: '#f0f8ff',
    antiquewhite: '#faebd7',
    aqua: '#00ffff',
    aquamarine: '#7fffd4',
    azure: '#f0ffff',
    beige: '#f5f5dc',
    bisque: '#ffe4c4',
    black: '#000000',
    blanchedalmond: '#ffebcd',
    blue: '#0000ff',
    blueviolet: '#8a2be2',
    brown: '#a52a2a',
    burlywood: '#deb887',
    cadetblue: '#5f9ea0',
    chartreuse: '#7fff00',
    chocolate: '#d2691e',
    coral: '#ff7f50',
    cornflowerblue: '#6495ed',
    cornsilk: '#fff8dc',
    crimson: '#dc143c',
    cyan: '#00ffff',
    darkblue: '#00008b',
    darkcyan: '#008b8b',
    darkgoldenrod: '#b8860b',
    darkgray: '#a9a9a9',
    darkgreen: '#006400',
    darkgrey: '#a9a9a9',
    darkkhaki: '#bdb76b',
    darkmagenta: '#8b008b',
    darkolivegreen: '#556b2f',
    darkorange: '#ff8c00',
    darkorchid: '#9932cc',
    darkred: '#8b0000',
    darksalmon: '#e9967a',
    darkseagreen: '#8fbc8f',
    darkslateblue: '#483d8b',
    darkslategray: '#2f4f4f',
    darkslategrey: '#2f4f4f',
    darkturquoise: '#00ced1',
    darkviolet: '#9400d3',
    deeppink: '#ff1493',
    deepskyblue: '#00bfff',
    dimgray: '#696969',
    dimgrey: '#696969',
    dodgerblue: '#1e90ff',
    firebrick: '#b22222',
    floralwhite: '#fffaf0',
    forestgreen: '#228b22',
    fuchsia: '#ff00ff',
    gainsboro: '#dcdcdc',
    ghostwhite: '#f8f8ff',
    goldenrod: '#daa520',
    gold: '#ffd700',
    gray: '#808080',
    green: '#008000',
    greenyellow: '#adff2f',
    grey: '#808080',
    honeydew: '#f0fff0',
    hotpink: '#ff69b4',
    indianred: '#cd5c5c',
    indigo: '#4b0082',
    ivory: '#fffff0',
    khaki: '#f0e68c',
    lavenderblush: '#fff0f5',
    lavender: '#e6e6fa',
    lawngreen: '#7cfc00',
    lemonchiffon: '#fffacd',
    lightblue: '#add8e6',
    lightcoral: '#f08080',
    lightcyan: '#e0ffff',
    lightgoldenrodyellow: '#fafad2',
    lightgray: '#d3d3d3',
    lightgreen: '#90ee90',
    lightgrey: '#d3d3d3',
    lightpink: '#ffb6c1',
    lightsalmon: '#ffa07a',
    lightseagreen: '#20b2aa',
    lightskyblue: '#87cefa',
    lightslategray: '#778899',
    lightslategrey: '#778899',
    lightsteelblue: '#b0c4de',
    lightyellow: '#ffffe0',
    lime: '#00ff00',
    limegreen: '#32cd32',
    linen: '#faf0e6',
    magenta: '#ff00ff',
    maroon: '#800000',
    mediumaquamarine: '#66cdaa',
    mediumblue: '#0000cd',
    mediumorchid: '#ba55d3',
    mediumpurple: '#9370db',
    mediumseagreen: '#3cb371',
    mediumslateblue: '#7b68ee',
    mediumspringgreen: '#00fa9a',
    mediumturquoise: '#48d1cc',
    mediumvioletred: '#c71585',
    midnightblue: '#191970',
    mintcream: '#f5fffa',
    mistyrose: '#ffe4e1',
    moccasin: '#ffe4b5',
    navajowhite: '#ffdead',
    navy: '#000080',
    oldlace: '#fdf5e6',
    olive: '#808000',
    olivedrab: '#6b8e23',
    orange: '#ffa500',
    orangered: '#ff4500',
    orchid: '#da70d6',
    palegoldenrod: '#eee8aa',
    palegreen: '#98fb98',
    paleturquoise: '#afeeee',
    palevioletred: '#db7093',
    papayawhip: '#ffefd5',
    peachpuff: '#ffdab9',
    peru: '#cd853f',
    pink: '#ffc0cb',
    plum: '#dda0dd',
    powderblue: '#b0e0e6',
    purple: '#800080',
    rebeccapurple: '#663399',
    red: '#ff0000',
    rosybrown: '#bc8f8f',
    royalblue: '#4169e1',
    saddlebrown: '#8b4513',
    salmon: '#fa8072',
    sandybrown: '#f4a460',
    seagreen: '#2e8b57',
    seashell: '#fff5ee',
    sienna: '#a0522d',
    silver: '#c0c0c0',
    skyblue: '#87ceeb',
    slateblue: '#6a5acd',
    slategray: '#708090',
    slategrey: '#708090',
    snow: '#fffafa',
    springgreen: '#00ff7f',
    steelblue: '#4682b4',
    tan: '#d2b48c',
    teal: '#008080',
    thistle: '#d8bfd8',
    tomato: '#ff6347',
    turquoise: '#40e0d0',
    violet: '#ee82ee',
    wheat: '#f5deb3',
    white: '#ffffff',
    whitesmoke: '#f5f5f5',
    yellow: '#ffff00',
    yellowgreen: '#9acd32',
  };

  /**
   * Given a string or object, convert that input to RGB
   *
   * Possible string inputs:
   * ```
   * "red"
   * "#f00" or "f00"
   * "#ff0000" or "ff0000"
   * "#ff000000" or "ff000000"
   * "rgb 255 0 0" or "rgb (255, 0, 0)"
   * "rgb 1.0 0 0" or "rgb (1, 0, 0)"
   * "rgba (255, 0, 0, 1)" or "rgba 255, 0, 0, 1"
   * "rgba (1.0, 0, 0, 1)" or "rgba 1.0, 0, 0, 1"
   * "hsl(0, 100%, 50%)" or "hsl 0 100% 50%"
   * "hsla(0, 100%, 50%, 1)" or "hsla 0 100% 50%, 1"
   * "hsv(0, 100%, 100%)" or "hsv 0 100% 100%"
   * ```
   */
  function inputToRGB(color) {
    var rgb = { r: 0, g: 0, b: 0 };
    var a = 1;
    var s = null;
    var v = null;
    var l = null;
    var ok = false;
    var format = false;
    if (typeof color === 'string') {
      color = stringInputToObject(color);
    }
    if (typeof color === 'object') {
      if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {
        rgb = rgbToRgb(color.r, color.g, color.b);
        ok = true;
        format = String(color.r).substr(-1) === '%' ? 'prgb' : 'rgb';
      } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {
        s = convertToPercentage(color.s);
        v = convertToPercentage(color.v);
        rgb = hsvToRgb(color.h, s, v);
        ok = true;
        format = 'hsv';
      } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {
        s = convertToPercentage(color.s);
        l = convertToPercentage(color.l);
        rgb = hslToRgb(color.h, s, l);
        ok = true;
        format = 'hsl';
      }
      if (Object.prototype.hasOwnProperty.call(color, 'a')) {
        a = color.a;
      }
    }
    a = boundAlpha(a);
    return {
      ok: ok,
      format: color.format || format,
      r: Math.min(255, Math.max(rgb.r, 0)),
      g: Math.min(255, Math.max(rgb.g, 0)),
      b: Math.min(255, Math.max(rgb.b, 0)),
      a: a,
    };
  }
  // <http://www.w3.org/TR/css3-values/#integers>
  var CSS_INTEGER = '[-\\+]?\\d+%?';
  // <http://www.w3.org/TR/css3-values/#number-value>
  var CSS_NUMBER = '[-\\+]?\\d*\\.\\d+%?';
  // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.
  var CSS_UNIT = '(?:' + CSS_NUMBER + ')|(?:' + CSS_INTEGER + ')';
  // Actual matching.
  // Parentheses and commas are optional, but not required.
  // Whitespace can take the place of commas or opening paren
  var PERMISSIVE_MATCH3 = '[\\s|\\(]+(' + CSS_UNIT + ')[,|\\s]+(' + CSS_UNIT + ')[,|\\s]+(' + CSS_UNIT + ')\\s*\\)?';
  var PERMISSIVE_MATCH4 =
    '[\\s|\\(]+(' +
    CSS_UNIT +
    ')[,|\\s]+(' +
    CSS_UNIT +
    ')[,|\\s]+(' +
    CSS_UNIT +
    ')[,|\\s]+(' +
    CSS_UNIT +
    ')\\s*\\)?';
  var matchers = {
    CSS_UNIT: new RegExp(CSS_UNIT),
    rgb: new RegExp('rgb' + PERMISSIVE_MATCH3),
    rgba: new RegExp('rgba' + PERMISSIVE_MATCH4),
    hsl: new RegExp('hsl' + PERMISSIVE_MATCH3),
    hsla: new RegExp('hsla' + PERMISSIVE_MATCH4),
    hsv: new RegExp('hsv' + PERMISSIVE_MATCH3),
    hsva: new RegExp('hsva' + PERMISSIVE_MATCH4),
    hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
    hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
    hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
    hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
  };
  /**
   * Permissive string parsing.  Take in a number of formats, and output an object
   * based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`
   */
  function stringInputToObject(color) {
    color = color.trim().toLowerCase();
    if (color.length === 0) {
      return false;
    }
    var named = false;
    if (names[color]) {
      color = names[color];
      named = true;
    } else if (color === 'transparent') {
      return { r: 0, g: 0, b: 0, a: 0, format: 'name' };
    }
    // Try to match string input using regular expressions.
    // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]
    // Just return an object and let the conversion functions handle that.
    // This way the result will be the same whether the tinycolor is initialized with string or object.
    var match = matchers.rgb.exec(color);
    if (match) {
      return { r: match[1], g: match[2], b: match[3] };
    }
    match = matchers.rgba.exec(color);
    if (match) {
      return { r: match[1], g: match[2], b: match[3], a: match[4] };
    }
    match = matchers.hsl.exec(color);
    if (match) {
      return { h: match[1], s: match[2], l: match[3] };
    }
    match = matchers.hsla.exec(color);
    if (match) {
      return { h: match[1], s: match[2], l: match[3], a: match[4] };
    }
    match = matchers.hsv.exec(color);
    if (match) {
      return { h: match[1], s: match[2], v: match[3] };
    }
    match = matchers.hsva.exec(color);
    if (match) {
      return { h: match[1], s: match[2], v: match[3], a: match[4] };
    }
    match = matchers.hex8.exec(color);
    if (match) {
      return {
        r: parseIntFromHex(match[1]),
        g: parseIntFromHex(match[2]),
        b: parseIntFromHex(match[3]),
        a: convertHexToDecimal(match[4]),
        format: named ? 'name' : 'hex8',
      };
    }
    match = matchers.hex6.exec(color);
    if (match) {
      return {
        r: parseIntFromHex(match[1]),
        g: parseIntFromHex(match[2]),
        b: parseIntFromHex(match[3]),
        format: named ? 'name' : 'hex',
      };
    }
    match = matchers.hex4.exec(color);
    if (match) {
      return {
        r: parseIntFromHex(match[1] + match[1]),
        g: parseIntFromHex(match[2] + match[2]),
        b: parseIntFromHex(match[3] + match[3]),
        a: convertHexToDecimal(match[4] + match[4]),
        format: named ? 'name' : 'hex8',
      };
    }
    match = matchers.hex3.exec(color);
    if (match) {
      return {
        r: parseIntFromHex(match[1] + match[1]),
        g: parseIntFromHex(match[2] + match[2]),
        b: parseIntFromHex(match[3] + match[3]),
        format: named ? 'name' : 'hex',
      };
    }
    return false;
  }
  /**
   * Check to see if it looks like a CSS unit
   * (see `matchers` above for definition).
   */
  function isValidCSSUnit(color) {
    return Boolean(matchers.CSS_UNIT.exec(String(color)));
  }

  var hueStep = 2; // 色相阶梯

  var saturationStep = 0.16; // 饱和度阶梯，浅色部分

  var saturationStep2 = 0.05; // 饱和度阶梯，深色部分

  var brightnessStep1 = 0.05; // 亮度阶梯，浅色部分

  var brightnessStep2 = 0.15; // 亮度阶梯，深色部分

  var lightColorCount = 5; // 浅色数量，主色上

  var darkColorCount = 4; // 深色数量，主色下
  // 暗色主题颜色映射关系表

  var darkColorMap = [
    {
      index: 7,
      opacity: 0.15,
    },
    {
      index: 6,
      opacity: 0.25,
    },
    {
      index: 5,
      opacity: 0.3,
    },
    {
      index: 5,
      opacity: 0.45,
    },
    {
      index: 5,
      opacity: 0.65,
    },
    {
      index: 5,
      opacity: 0.85,
    },
    {
      index: 4,
      opacity: 0.9,
    },
    {
      index: 3,
      opacity: 0.95,
    },
    {
      index: 2,
      opacity: 0.97,
    },
    {
      index: 1,
      opacity: 0.98,
    },
  ]; // Wrapper function ported from TinyColor.prototype.toHsv
  // Keep it here because of `hsv.h * 360`

  function toHsv(_ref) {
    var r = _ref.r,
      g = _ref.g,
      b = _ref.b;
    var hsv = rgbToHsv(r, g, b);
    return {
      h: hsv.h * 360,
      s: hsv.s,
      v: hsv.v,
    };
  } // Wrapper function ported from TinyColor.prototype.toHexString
  // Keep it here because of the prefix `#`

  function toHex(_ref2) {
    var r = _ref2.r,
      g = _ref2.g,
      b = _ref2.b;
    return '#'.concat(rgbToHex(r, g, b, false));
  } // Wrapper function ported from TinyColor.prototype.mix, not treeshakable.
  // Amount in range [0, 1]
  // Assume color1 & color2 has no alpha, since the following src code did so.

  function mix(rgb1, rgb2, amount) {
    var p = amount / 100;
    var rgb = {
      r: (rgb2.r - rgb1.r) * p + rgb1.r,
      g: (rgb2.g - rgb1.g) * p + rgb1.g,
      b: (rgb2.b - rgb1.b) * p + rgb1.b,
    };
    return rgb;
  }

  function getHue(hsv, i, light) {
    var hue; // 根据色相不同，色相转向不同

    if (Math.round(hsv.h) >= 60 && Math.round(hsv.h) <= 240) {
      hue = light ? Math.round(hsv.h) - hueStep * i : Math.round(hsv.h) + hueStep * i;
    } else {
      hue = light ? Math.round(hsv.h) + hueStep * i : Math.round(hsv.h) - hueStep * i;
    }

    if (hue < 0) {
      hue += 360;
    } else if (hue >= 360) {
      hue -= 360;
    }

    return hue;
  }

  function getSaturation(hsv, i, light) {
    // grey color don't change saturation
    if (hsv.h === 0 && hsv.s === 0) {
      return hsv.s;
    }

    var saturation;

    if (light) {
      saturation = hsv.s - saturationStep * i;
    } else if (i === darkColorCount) {
      saturation = hsv.s + saturationStep;
    } else {
      saturation = hsv.s + saturationStep2 * i;
    } // 边界值修正

    if (saturation > 1) {
      saturation = 1;
    } // 第一格的 s 限制在 0.06-0.1 之间

    if (light && i === lightColorCount && saturation > 0.1) {
      saturation = 0.1;
    }

    if (saturation < 0.06) {
      saturation = 0.06;
    }

    return Number(saturation.toFixed(2));
  }

  function getValue(hsv, i, light) {
    var value;

    if (light) {
      value = hsv.v + brightnessStep1 * i;
    } else {
      value = hsv.v - brightnessStep2 * i;
    }

    if (value > 1) {
      value = 1;
    }

    return Number(value.toFixed(2));
  }

  function generate$1(color) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var patterns = [];
    var pColor = inputToRGB(color);

    for (var i = lightColorCount; i > 0; i -= 1) {
      var hsv = toHsv(pColor);
      var colorString = toHex(
        inputToRGB({
          h: getHue(hsv, i, true),
          s: getSaturation(hsv, i, true),
          v: getValue(hsv, i, true),
        }),
      );
      patterns.push(colorString);
    }

    patterns.push(toHex(pColor));

    for (var _i = 1; _i <= darkColorCount; _i += 1) {
      var _hsv = toHsv(pColor);

      var _colorString = toHex(
        inputToRGB({
          h: getHue(_hsv, _i),
          s: getSaturation(_hsv, _i),
          v: getValue(_hsv, _i),
        }),
      );

      patterns.push(_colorString);
    } // dark theme patterns

    if (opts.theme === 'dark') {
      return darkColorMap.map(function (_ref3) {
        var index = _ref3.index,
          opacity = _ref3.opacity;
        var darkColorString = toHex(
          mix(inputToRGB(opts.backgroundColor || '#141414'), inputToRGB(patterns[index]), opacity * 100),
        );
        return darkColorString;
      });
    }

    return patterns;
  }

  var presetPrimaryColors = {
    red: '#F5222D',
    volcano: '#FA541C',
    orange: '#FA8C16',
    gold: '#FAAD14',
    yellow: '#FADB14',
    lime: '#A0D911',
    green: '#52C41A',
    cyan: '#13C2C2',
    blue: '#1890FF',
    geekblue: '#2F54EB',
    purple: '#722ED1',
    magenta: '#EB2F96',
    grey: '#666666',
  };
  var presetPalettes = {};
  var presetDarkPalettes = {};
  Object.keys(presetPrimaryColors).forEach(function (key) {
    presetPalettes[key] = generate$1(presetPrimaryColors[key]);
    presetPalettes[key].primary = presetPalettes[key][5]; // dark presetPalettes

    presetDarkPalettes[key] = generate$1(presetPrimaryColors[key], {
      theme: 'dark',
      backgroundColor: '#141414',
    });
    presetDarkPalettes[key].primary = presetDarkPalettes[key][5];
  });
  presetPalettes.red;
  presetPalettes.volcano;
  presetPalettes.gold;
  presetPalettes.orange;
  presetPalettes.yellow;
  presetPalettes.lime;
  presetPalettes.green;
  presetPalettes.cyan;
  presetPalettes.blue;
  presetPalettes.geekblue;
  presetPalettes.purple;
  presetPalettes.magenta;
  presetPalettes.grey;

  /* eslint-disable no-console */
  var warned = {};
  function warning$1(valid, message) {
    // Support uglify
    if (!valid && console !== undefined) {
      console.error('Warning: '.concat(message));
    }
  }
  function call(method, valid, message) {
    if (!valid && !warned[message]) {
      method(false, message);
      warned[message] = true;
    }
  }
  function warningOnce(valid, message) {
    call(warning$1, valid, message);
  }
  /* eslint-enable */

  function canUseDom() {
    return !!(typeof window !== 'undefined' && window.document && window.document.createElement);
  }

  var MARK_KEY = 'rc-util-key';

  function getContainer(option) {
    if (option.attachTo) {
      return option.attachTo;
    }

    var head = document.querySelector('head');
    return head || document.body;
  }

  function injectCSS(css) {
    var _option$csp;

    var option = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (!canUseDom()) {
      return null;
    }

    var styleNode = document.createElement('style');

    if ((_option$csp = option.csp) === null || _option$csp === void 0 ? void 0 : _option$csp.nonce) {
      var _option$csp2;

      styleNode.nonce = (_option$csp2 = option.csp) === null || _option$csp2 === void 0 ? void 0 : _option$csp2.nonce;
    }

    styleNode.innerHTML = css;
    var container = getContainer(option);
    var firstChild = container.firstChild;

    if (option.prepend && container.prepend) {
      // Use `prepend` first
      container.prepend(styleNode);
    } else if (option.prepend && firstChild) {
      // Fallback to `insertBefore` like IE not support `prepend`
      container.insertBefore(styleNode, firstChild);
    } else {
      container.appendChild(styleNode);
    }

    return styleNode;
  }
  var containerCache = new Map();
  function updateCSS(css, key) {
    var option = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var container = getContainer(option); // Get real parent

    if (!containerCache.has(container)) {
      var placeholderStyle = injectCSS('', option);
      var parentNode = placeholderStyle.parentNode;
      containerCache.set(container, parentNode);
      parentNode.removeChild(placeholderStyle);
    }

    var existNode = Array.from(containerCache.get(container).children).find(function (node) {
      return node.tagName === 'STYLE' && node[MARK_KEY] === key;
    });

    if (existNode) {
      var _option$csp3, _option$csp4;

      if (
        ((_option$csp3 = option.csp) === null || _option$csp3 === void 0 ? void 0 : _option$csp3.nonce) &&
        existNode.nonce !==
          ((_option$csp4 = option.csp) === null || _option$csp4 === void 0 ? void 0 : _option$csp4.nonce)
      ) {
        var _option$csp5;

        existNode.nonce = (_option$csp5 = option.csp) === null || _option$csp5 === void 0 ? void 0 : _option$csp5.nonce;
      }

      if (existNode.innerHTML !== css) {
        existNode.innerHTML = css;
      }

      return existNode;
    }

    var newNode = injectCSS(css, option);
    newNode[MARK_KEY] = key;
    return newNode;
  }

  function warning(valid, message) {
    warningOnce(valid, '[@ant-design/icons] '.concat(message));
  }
  function isIconDefinition(target) {
    return (
      _typeof(target) === 'object' &&
      typeof target.name === 'string' &&
      typeof target.theme === 'string' &&
      (_typeof(target.icon) === 'object' || typeof target.icon === 'function')
    );
  }
  function normalizeAttrs() {
    var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return Object.keys(attrs).reduce(function (acc, key) {
      var val = attrs[key];

      switch (key) {
        case 'class':
          acc.className = val;
          delete acc.class;
          break;

        default:
          acc[key] = val;
      }

      return acc;
    }, {});
  }
  function generate(node, key, rootProps) {
    if (!rootProps) {
      return /*#__PURE__*/ React__default['default'].createElement(
        node.tag,
        _objectSpread2(
          {
            key: key,
          },
          normalizeAttrs(node.attrs),
        ),
        (node.children || []).map(function (child, index) {
          return generate(child, ''.concat(key, '-').concat(node.tag, '-').concat(index));
        }),
      );
    }

    return /*#__PURE__*/ React__default['default'].createElement(
      node.tag,
      _objectSpread2(
        _objectSpread2(
          {
            key: key,
          },
          normalizeAttrs(node.attrs),
        ),
        rootProps,
      ),
      (node.children || []).map(function (child, index) {
        return generate(child, ''.concat(key, '-').concat(node.tag, '-').concat(index));
      }),
    );
  }
  function getSecondaryColor(primaryColor) {
    // choose the second color
    return generate$1(primaryColor)[0];
  }
  function normalizeTwoToneColors(twoToneColor) {
    if (!twoToneColor) {
      return [];
    }

    return Array.isArray(twoToneColor) ? twoToneColor : [twoToneColor];
  } // These props make sure that the SVG behaviours like general text.
  var iconStyles =
    '\n.anticon {\n  display: inline-block;\n  color: inherit;\n  font-style: normal;\n  line-height: 0;\n  text-align: center;\n  text-transform: none;\n  vertical-align: -0.125em;\n  text-rendering: optimizeLegibility;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n.anticon > * {\n  line-height: 1;\n}\n\n.anticon svg {\n  display: inline-block;\n}\n\n.anticon::before {\n  display: none;\n}\n\n.anticon .anticon-icon {\n  display: block;\n}\n\n.anticon[tabindex] {\n  cursor: pointer;\n}\n\n.anticon-spin::before,\n.anticon-spin {\n  display: inline-block;\n  -webkit-animation: loadingCircle 1s infinite linear;\n  animation: loadingCircle 1s infinite linear;\n}\n\n@-webkit-keyframes loadingCircle {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n\n@keyframes loadingCircle {\n  100% {\n    -webkit-transform: rotate(360deg);\n    transform: rotate(360deg);\n  }\n}\n';
  var useInsertStyles = function useInsertStyles() {
    var styleStr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : iconStyles;

    var _useContext = React.useContext(Context),
      csp = _useContext.csp;

    React.useEffect(function () {
      updateCSS(styleStr, '@ant-design-icons', {
        prepend: true,
        csp: csp,
      });
    }, []);
  };

  var _excluded$1 = ['icon', 'className', 'onClick', 'style', 'primaryColor', 'secondaryColor'];
  var twoToneColorPalette = {
    primaryColor: '#333',
    secondaryColor: '#E6E6E6',
    calculated: false,
  };

  function setTwoToneColors(_ref) {
    var primaryColor = _ref.primaryColor,
      secondaryColor = _ref.secondaryColor;
    twoToneColorPalette.primaryColor = primaryColor;
    twoToneColorPalette.secondaryColor = secondaryColor || getSecondaryColor(primaryColor);
    twoToneColorPalette.calculated = !!secondaryColor;
  }

  function getTwoToneColors() {
    return _objectSpread2({}, twoToneColorPalette);
  }

  var IconBase = function IconBase(props) {
    var icon = props.icon,
      className = props.className,
      onClick = props.onClick,
      style = props.style,
      primaryColor = props.primaryColor,
      secondaryColor = props.secondaryColor,
      restProps = _objectWithoutProperties(props, _excluded$1);

    var colors = twoToneColorPalette;

    if (primaryColor) {
      colors = {
        primaryColor: primaryColor,
        secondaryColor: secondaryColor || getSecondaryColor(primaryColor),
      };
    }

    useInsertStyles();
    warning(isIconDefinition(icon), 'icon should be icon definiton, but got '.concat(icon));

    if (!isIconDefinition(icon)) {
      return null;
    }

    var target = icon;

    if (target && typeof target.icon === 'function') {
      target = _objectSpread2(
        _objectSpread2({}, target),
        {},
        {
          icon: target.icon(colors.primaryColor, colors.secondaryColor),
        },
      );
    }

    return generate(
      target.icon,
      'svg-'.concat(target.name),
      _objectSpread2(
        {
          className: className,
          onClick: onClick,
          style: style,
          'data-icon': target.name,
          width: '1em',
          height: '1em',
          fill: 'currentColor',
          'aria-hidden': 'true',
        },
        restProps,
      ),
    );
  };

  IconBase.displayName = 'IconReact';
  IconBase.getTwoToneColors = getTwoToneColors;
  IconBase.setTwoToneColors = setTwoToneColors;
  var ReactIcon = IconBase;

  function setTwoToneColor(twoToneColor) {
    var _normalizeTwoToneColo = normalizeTwoToneColors(twoToneColor),
      _normalizeTwoToneColo2 = _slicedToArray(_normalizeTwoToneColo, 2),
      primaryColor = _normalizeTwoToneColo2[0],
      secondaryColor = _normalizeTwoToneColo2[1];

    return ReactIcon.setTwoToneColors({
      primaryColor: primaryColor,
      secondaryColor: secondaryColor,
    });
  }
  function getTwoToneColor() {
    var colors = ReactIcon.getTwoToneColors();

    if (!colors.calculated) {
      return colors.primaryColor;
    }

    return [colors.primaryColor, colors.secondaryColor];
  }

  var _excluded = ['className', 'icon', 'spin', 'rotate', 'tabIndex', 'onClick', 'twoToneColor'];
  // should move it to antd main repo?

  setTwoToneColor('#1890ff');
  var Icon = /*#__PURE__*/ React__namespace.forwardRef(function (props, ref) {
    var _classNames;

    var className = props.className,
      icon = props.icon,
      spin = props.spin,
      rotate = props.rotate,
      tabIndex = props.tabIndex,
      onClick = props.onClick,
      twoToneColor = props.twoToneColor,
      restProps = _objectWithoutProperties(props, _excluded);

    var _React$useContext = React__namespace.useContext(Context),
      _React$useContext$pre = _React$useContext.prefixCls,
      prefixCls = _React$useContext$pre === void 0 ? 'anticon' : _React$useContext$pre;

    var classString = cls(
      prefixCls,
      ((_classNames = {}),
      _defineProperty(_classNames, ''.concat(prefixCls, '-').concat(icon.name), !!icon.name),
      _defineProperty(_classNames, ''.concat(prefixCls, '-spin'), !!spin || icon.name === 'loading'),
      _classNames),
      className,
    );
    var iconTabIndex = tabIndex;

    if (iconTabIndex === undefined && onClick) {
      iconTabIndex = -1;
    }

    var svgStyle = rotate
      ? {
          msTransform: 'rotate('.concat(rotate, 'deg)'),
          transform: 'rotate('.concat(rotate, 'deg)'),
        }
      : undefined;

    var _normalizeTwoToneColo = normalizeTwoToneColors(twoToneColor),
      _normalizeTwoToneColo2 = _slicedToArray(_normalizeTwoToneColo, 2),
      primaryColor = _normalizeTwoToneColo2[0],
      secondaryColor = _normalizeTwoToneColo2[1];

    return /*#__PURE__*/ React__namespace.createElement(
      'span',
      _objectSpread2(
        _objectSpread2(
          {
            role: 'img',
            'aria-label': icon.name,
          },
          restProps,
        ),
        {},
        {
          ref: ref,
          tabIndex: iconTabIndex,
          onClick: onClick,
          className: classString,
        },
      ),
      /*#__PURE__*/ React__namespace.createElement(ReactIcon, {
        icon: icon,
        primaryColor: primaryColor,
        secondaryColor: secondaryColor,
        style: svgStyle,
      }),
    );
  });
  Icon.displayName = 'AntdIcon';
  Icon.getTwoToneColor = getTwoToneColor;
  Icon.setTwoToneColor = setTwoToneColor;
  var AntdIcon = Icon;

  // This icon file is generated automatically.
  var CheckCircleOutlined$2 = {
    icon: {
      tag: 'svg',
      attrs: { viewBox: '64 64 896 896', focusable: 'false' },
      children: [
        {
          tag: 'path',
          attrs: {
            d: 'M699 353h-46.9c-10.2 0-19.9 4.9-25.9 13.3L469 584.3l-71.2-98.8c-6-8.3-15.6-13.3-25.9-13.3H325c-6.5 0-10.3 7.4-6.5 12.7l124.6 172.8a31.8 31.8 0 0051.7 0l210.6-292c3.9-5.3.1-12.7-6.4-12.7z',
          },
        },
        {
          tag: 'path',
          attrs: {
            d: 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z',
          },
        },
      ],
    },
    name: 'check-circle',
    theme: 'outlined',
  };
  var CheckCircleOutlinedSvg = CheckCircleOutlined$2;

  var CheckCircleOutlined = function CheckCircleOutlined(props, ref) {
    return /*#__PURE__*/ React__namespace.createElement(
      AntdIcon,
      _objectSpread2(
        _objectSpread2({}, props),
        {},
        {
          ref: ref,
          icon: CheckCircleOutlinedSvg,
        },
      ),
    );
  };

  CheckCircleOutlined.displayName = 'CheckCircleOutlined';
  var CheckCircleOutlined$1 = /*#__PURE__*/ React__namespace.forwardRef(CheckCircleOutlined);

  // This icon file is generated automatically.
  var CloseCircleOutlined$2 = {
    icon: {
      tag: 'svg',
      attrs: { viewBox: '64 64 896 896', focusable: 'false' },
      children: [
        {
          tag: 'path',
          attrs: {
            d: 'M685.4 354.8c0-4.4-3.6-8-8-8l-66 .3L512 465.6l-99.3-118.4-66.1-.3c-4.4 0-8 3.5-8 8 0 1.9.7 3.7 1.9 5.2l130.1 155L340.5 670a8.32 8.32 0 00-1.9 5.2c0 4.4 3.6 8 8 8l66.1-.3L512 564.4l99.3 118.4 66 .3c4.4 0 8-3.5 8-8 0-1.9-.7-3.7-1.9-5.2L553.5 515l130.1-155c1.2-1.4 1.8-3.3 1.8-5.2z',
          },
        },
        {
          tag: 'path',
          attrs: {
            d: 'M512 65C264.6 65 64 265.6 64 513s200.6 448 448 448 448-200.6 448-448S759.4 65 512 65zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z',
          },
        },
      ],
    },
    name: 'close-circle',
    theme: 'outlined',
  };
  var CloseCircleOutlinedSvg = CloseCircleOutlined$2;

  var CloseCircleOutlined = function CloseCircleOutlined(props, ref) {
    return /*#__PURE__*/ React__namespace.createElement(
      AntdIcon,
      _objectSpread2(
        _objectSpread2({}, props),
        {},
        {
          ref: ref,
          icon: CloseCircleOutlinedSvg,
        },
      ),
    );
  };

  CloseCircleOutlined.displayName = 'CloseCircleOutlined';
  var CloseCircleOutlined$1 = /*#__PURE__*/ React__namespace.forwardRef(CloseCircleOutlined);

  // This icon file is generated automatically.
  var ExclamationCircleOutlined$2 = {
    icon: {
      tag: 'svg',
      attrs: { viewBox: '64 64 896 896', focusable: 'false' },
      children: [
        {
          tag: 'path',
          attrs: {
            d: 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z',
          },
        },
        {
          tag: 'path',
          attrs: {
            d: 'M464 688a48 48 0 1096 0 48 48 0 10-96 0zm24-112h48c4.4 0 8-3.6 8-8V296c0-4.4-3.6-8-8-8h-48c-4.4 0-8 3.6-8 8v272c0 4.4 3.6 8 8 8z',
          },
        },
      ],
    },
    name: 'exclamation-circle',
    theme: 'outlined',
  };
  var ExclamationCircleOutlinedSvg = ExclamationCircleOutlined$2;

  var ExclamationCircleOutlined = function ExclamationCircleOutlined(props, ref) {
    return /*#__PURE__*/ React__namespace.createElement(
      AntdIcon,
      _objectSpread2(
        _objectSpread2({}, props),
        {},
        {
          ref: ref,
          icon: ExclamationCircleOutlinedSvg,
        },
      ),
    );
  };

  ExclamationCircleOutlined.displayName = 'ExclamationCircleOutlined';
  var ExclamationCircleOutlined$1 = /*#__PURE__*/ React__namespace.forwardRef(ExclamationCircleOutlined);

  // This icon file is generated automatically.
  var QuestionCircleOutlined$2 = {
    icon: {
      tag: 'svg',
      attrs: { viewBox: '64 64 896 896', focusable: 'false' },
      children: [
        {
          tag: 'path',
          attrs: {
            d: 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z',
          },
        },
        {
          tag: 'path',
          attrs: {
            d: 'M623.6 316.7C593.6 290.4 554 276 512 276s-81.6 14.5-111.6 40.7C369.2 344 352 380.7 352 420v7.6c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8V420c0-44.1 43.1-80 96-80s96 35.9 96 80c0 31.1-22 59.6-56.1 72.7-21.2 8.1-39.2 22.3-52.1 40.9-13.1 19-19.9 41.8-19.9 64.9V620c0 4.4 3.6 8 8 8h48c4.4 0 8-3.6 8-8v-22.7a48.3 48.3 0 0130.9-44.8c59-22.7 97.1-74.7 97.1-132.5.1-39.3-17.1-76-48.3-103.3zM472 732a40 40 0 1080 0 40 40 0 10-80 0z',
          },
        },
      ],
    },
    name: 'question-circle',
    theme: 'outlined',
  };
  var QuestionCircleOutlinedSvg = QuestionCircleOutlined$2;

  var QuestionCircleOutlined = function QuestionCircleOutlined(props, ref) {
    return /*#__PURE__*/ React__namespace.createElement(
      AntdIcon,
      _objectSpread2(
        _objectSpread2({}, props),
        {},
        {
          ref: ref,
          icon: QuestionCircleOutlinedSvg,
        },
      ),
    );
  };

  QuestionCircleOutlined.displayName = 'QuestionCircleOutlined';
  var QuestionCircleOutlined$1 = /*#__PURE__*/ React__namespace.forwardRef(QuestionCircleOutlined);

  function _setPrototypeOf(o, p) {
    _setPrototypeOf =
      Object.setPrototypeOf ||
      function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
      };

    return _setPrototypeOf(o, p);
  }

  var formatMomentValue = function (value, format, placeholder) {
    var formatDate = function (date, format, i) {
      if (i === void 0) {
        i = 0;
      }
      if (!date) return placeholder;
      if (isArr$2(format)) {
        var _format = format[i];
        if (isFn$2(_format)) {
          return _format(date);
        }
        return (date === null || date === void 0 ? void 0 : date.format) ? date.format(_format) : date;
      } else {
        if (isFn$2(format)) {
          return format(date);
        }
        return (date === null || date === void 0 ? void 0 : date.format) ? date.format(format) : date;
      }
    };
    if (isArr$2(value)) {
      return value.map(function (val, index) {
        return formatDate(val, format, index);
      });
    } else {
      return value ? formatDate(value, format) : value || placeholder;
    }
  };

  var usePrefixCls = function (tag, props) {
    var _a, _b, _c;
    var getContext = ConfigProvider$1['getContext'];
    var prefix =
      (_c =
        (_a = props === null || props === void 0 ? void 0 : props.prefix) !== null && _a !== void 0
          ? _a
          : (_b = getContext()) === null || _b === void 0
          ? void 0
          : _b.prefix) !== null && _c !== void 0
        ? _c
        : 'next-';
    return '' + prefix + (tag !== null && tag !== void 0 ? tag : '');
  };

  function toArray(children, option) {
    if (option === void 0) {
      option = {};
    }
    var ret = [];
    React__default['default'].Children.forEach(children, function (child) {
      if ((child === undefined || child === null) && !option.keepEmpty) {
        return;
      }
      if (Array.isArray(child)) {
        ret = ret.concat(toArray(child));
      } else if (reactIs$1.exports.isFragment(child) && child.props) {
        ret = ret.concat(toArray(child.props.children, option));
      } else {
        ret.push(child);
      }
    });
    return ret;
  }

  var __assign$7 =
    (undefined && undefined.__assign) ||
    function () {
      __assign$7 =
        Object.assign ||
        function (t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
      return __assign$7.apply(this, arguments);
    };
  var mapStatus = function (props, field) {
    var takeStatus = function () {
      var _a, _b;
      if (!field) return;
      if (field['loading'] || field['validating']) return 'loading';
      if (field['invalid']) return 'error';
      if ((_a = field['warnings']) === null || _a === void 0 ? void 0 : _a.length) return 'warning';
      return (_b = field.decoratorProps) === null || _b === void 0 ? void 0 : _b.feedbackStatus;
    };
    var takeState = function (state) {
      if (state === 'validating' || state === 'pending') return 'loading';
      return state;
    };
    return __assign$7(__assign$7({}, props), { state: takeState(props.state) || takeStatus() });
  };

  var __assign$6 =
    (undefined && undefined.__assign) ||
    function () {
      __assign$6 =
        Object.assign ||
        function (t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
      return __assign$6.apply(this, arguments);
    };
  var __rest$5 =
    (undefined && undefined.__rest) ||
    function (s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === 'function')
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
        }
      return t;
    };
  var __read$2 =
    (undefined && undefined.__read) ||
    function (o, n) {
      var m = typeof Symbol === 'function' && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o),
        r,
        ar = [],
        e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error: error };
      } finally {
        try {
          if (r && !r.done && (m = i['return'])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
  var calcBreakpointIndex = function (breakpoints, width) {
    for (var i = 0; i < breakpoints.length; i++) {
      if (width <= breakpoints[i]) {
        return i;
      }
    }
  };
  var calcFactor = function (value, breakpointIndex) {
    var _a;
    if (Array.isArray(value)) {
      if (breakpointIndex === -1) return value[0];
      return (_a = value[breakpointIndex]) !== null && _a !== void 0 ? _a : value[value.length - 1];
    } else {
      return value;
    }
  };
  var factor = function (value, breakpointIndex) {
    return isValid$4(value) ? calcFactor(value, breakpointIndex) : value;
  };
  var calculateProps = function (target, props) {
    var clientWidth = target.clientWidth;
    var breakpoints = props.breakpoints,
      layout = props.layout,
      labelAlign = props.labelAlign,
      wrapperAlign = props.wrapperAlign,
      labelCol = props.labelCol,
      wrapperCol = props.wrapperCol,
      otherProps = __rest$5(props, ['breakpoints', 'layout', 'labelAlign', 'wrapperAlign', 'labelCol', 'wrapperCol']);
    var breakpointIndex = calcBreakpointIndex(breakpoints, clientWidth);
    return __assign$6(
      {
        layout: factor(layout, breakpointIndex),
        labelAlign: factor(labelAlign, breakpointIndex),
        wrapperAlign: factor(wrapperAlign, breakpointIndex),
        labelCol: factor(labelCol, breakpointIndex),
        wrapperCol: factor(wrapperCol, breakpointIndex),
      },
      otherProps,
    );
  };
  var useResponsiveFormLayout = function (props) {
    var ref = React.useRef(null);
    var breakpoints = props.breakpoints;
    if (!isArr$2(breakpoints)) {
      return { ref: ref, props: props };
    }
    var _a = __read$2(React.useState({}), 2),
      layoutProps = _a[0],
      setLayout = _a[1];
    var updateUI = function () {
      setLayout(calculateProps(ref.current, props));
    };
    React.useEffect(function () {
      var observer = function () {
        updateUI();
      };
      var resizeObserver = new ResizeObserver(observer);
      if (ref.current) {
        resizeObserver.observe(ref.current);
      }
      updateUI();
      return function () {
        resizeObserver.disconnect();
      };
    }, []);
    return {
      ref: ref,
      props: layoutProps,
    };
  };

  var __assign$5 =
    (undefined && undefined.__assign) ||
    function () {
      __assign$5 =
        Object.assign ||
        function (t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
      return __assign$5.apply(this, arguments);
    };
  var __rest$4 =
    (undefined && undefined.__rest) ||
    function (s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === 'function')
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
        }
      return t;
    };
  var FormLayoutDeepContext = React.createContext(null);
  var FormLayoutShallowContext = React.createContext(null);
  var useFormDeepLayout = function () {
    return React.useContext(FormLayoutDeepContext);
  };
  var useFormShallowLayout = function () {
    return React.useContext(FormLayoutShallowContext);
  };
  var useFormLayout = function () {
    return __assign$5(__assign$5({}, useFormDeepLayout()), useFormShallowLayout());
  };
  var FormLayout = function (_a) {
    var _b;
    var shallow = _a.shallow,
      children = _a.children,
      prefix = _a.prefix,
      className = _a.className,
      style = _a.style,
      otherProps = __rest$4(_a, ['shallow', 'children', 'prefix', 'className', 'style']);
    var _c = useResponsiveFormLayout(otherProps),
      ref = _c.ref,
      props = _c.props;
    var deepLayout = useFormDeepLayout();
    var formPrefixCls = usePrefixCls('form', { prefix: prefix });
    var layoutPrefixCls = usePrefixCls('formily-layout', { prefix: prefix });
    var layoutClassName = cls(
      layoutPrefixCls,
      ((_b = {}),
      (_b[formPrefixCls + '-' + props.layout] = true),
      (_b[formPrefixCls + '-rtl'] = props.direction === 'rtl'),
      (_b[formPrefixCls + '-' + props.size] = props.size),
      _b),
      className,
    );
    var renderChildren = function () {
      var newDeepLayout = __assign$5({}, deepLayout);
      if (!shallow) {
        Object.assign(newDeepLayout, props);
      } else {
        if (props.size) {
          newDeepLayout.size = props.size;
        }
        if (props.colon) {
          newDeepLayout.colon = props.colon;
        }
      }
      return React__default['default'].createElement(
        FormLayoutDeepContext.Provider,
        { value: newDeepLayout },
        React__default['default'].createElement(
          FormLayoutShallowContext.Provider,
          { value: shallow ? props : undefined },
          children,
        ),
      );
    };
    return React__default['default'].createElement(
      'div',
      { ref: ref, className: layoutClassName, style: style },
      renderChildren(),
    );
  };
  FormLayout.defaultProps = {
    shallow: true,
  };
  FormLayout.useFormDeepLayout = useFormDeepLayout;
  FormLayout.useFormShallowLayout = useFormShallowLayout;
  FormLayout.useFormLayout = useFormLayout;

  var __assign$4 =
    (undefined && undefined.__assign) ||
    function () {
      __assign$4 =
        Object.assign ||
        function (t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
      return __assign$4.apply(this, arguments);
    };
  var mapSize = function (props) {
    var layout = __assign$4(__assign$4({}, useFormShallowLayout()), useFormLayout());
    var takeSize = function () {
      return layout.size === 'default' ? 'medium' : layout.size;
    };
    return __assign$4(__assign$4({}, props), { size: props.size || takeSize() });
  };

  var pickDataProps = function (props) {
    if (props === void 0) {
      props = {};
    }
    return Object.keys(props).reduce(function (buf, key) {
      if (key.includes('data-')) {
        buf[key] = props[key];
      }
      return buf;
    }, {});
  };

  var __assign$3 =
    (undefined && undefined.__assign) ||
    function () {
      __assign$3 =
        Object.assign ||
        function (t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
      return __assign$3.apply(this, arguments);
    };
  var __rest$3 =
    (undefined && undefined.__rest) ||
    function (s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === 'function')
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
        }
      return t;
    };
  var __read$1 =
    (undefined && undefined.__read) ||
    function (o, n) {
      var m = typeof Symbol === 'function' && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o),
        r,
        ar = [],
        e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error: error };
      } finally {
        try {
          if (r && !r.done && (m = i['return'])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
  var useFormItemLayout = function (props) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z;
    var layout = useFormLayout();
    return __assign$3(__assign$3({}, props), {
      layout:
        (_b = (_a = props.layout) !== null && _a !== void 0 ? _a : layout.layout) !== null && _b !== void 0
          ? _b
          : 'horizontal',
      colon: (_c = props.colon) !== null && _c !== void 0 ? _c : layout.colon,
      labelAlign:
        layout.layout === 'vertical'
          ? (_e = (_d = props.labelAlign) !== null && _d !== void 0 ? _d : layout.labelAlign) !== null && _e !== void 0
            ? _e
            : 'left'
          : (_g = (_f = props.labelAlign) !== null && _f !== void 0 ? _f : layout.labelAlign) !== null && _g !== void 0
          ? _g
          : 'right',
      labelWrap: (_h = props.labelWrap) !== null && _h !== void 0 ? _h : layout.labelWrap,
      labelWidth: (_j = props.labelWidth) !== null && _j !== void 0 ? _j : layout.labelWidth,
      wrapperWidth: (_k = props.wrapperWidth) !== null && _k !== void 0 ? _k : layout.wrapperWidth,
      labelCol: (_l = props.labelCol) !== null && _l !== void 0 ? _l : layout.labelCol,
      wrapperCol: (_m = props.wrapperCol) !== null && _m !== void 0 ? _m : layout.wrapperCol,
      wrapperAlign: (_o = props.wrapperAlign) !== null && _o !== void 0 ? _o : layout.wrapperAlign,
      wrapperWrap: (_p = props.wrapperWrap) !== null && _p !== void 0 ? _p : layout.wrapperWrap,
      fullness: (_q = props.fullness) !== null && _q !== void 0 ? _q : layout.fullness,
      size: (_r = props.size) !== null && _r !== void 0 ? _r : layout.size,
      inset: (_s = props.inset) !== null && _s !== void 0 ? _s : layout.inset,
      asterisk: props.asterisk,
      bordered: (_t = props.bordered) !== null && _t !== void 0 ? _t : layout.bordered,
      feedbackIcon: props.feedbackIcon,
      feedbackLayout:
        (_v = (_u = props.feedbackLayout) !== null && _u !== void 0 ? _u : layout.feedbackLayout) !== null &&
        _v !== void 0
          ? _v
          : 'loose',
      tooltipLayout:
        (_x = (_w = props.tooltipLayout) !== null && _w !== void 0 ? _w : layout.tooltipLayout) !== null &&
        _x !== void 0
          ? _x
          : 'icon',
      tooltipIcon:
        (_z = (_y = props.tooltipIcon) !== null && _y !== void 0 ? _y : layout.tooltipIcon) !== null && _z !== void 0
          ? _z
          : React__default['default'].createElement(QuestionCircleOutlined$1, null),
    });
  };
  function useOverflow() {
    var _a = __read$1(React.useState(false), 2),
      overflow = _a[0],
      setOverflow = _a[1];
    var containerRef = React.useRef();
    var contentRef = React.useRef();
    React.useEffect(function () {
      if (containerRef.current && contentRef.current) {
        var contentWidth = contentRef.current.getBoundingClientRect().width;
        var containerWidth = containerRef.current.getBoundingClientRect().width;
        if (contentWidth && containerWidth && containerWidth < contentWidth) {
          if (!overflow) setOverflow(true);
        } else {
          if (overflow) setOverflow(false);
        }
      }
    }, []);
    return {
      overflow: overflow,
      containerRef: containerRef,
      contentRef: contentRef,
    };
  }
  var ICON_MAP = {
    error: React__default['default'].createElement(CloseCircleOutlined$1, null),
    success: React__default['default'].createElement(CheckCircleOutlined$1, null),
    warning: React__default['default'].createElement(ExclamationCircleOutlined$1, null),
  };
  var BaseItem = function (props) {
    var _a, _b, _c, _d, _e;
    var children = props.children,
      others = __rest$3(props, ['children']);
    var _f = __read$1(React.useState(false), 2),
      active = _f[0],
      setActive = _f[1];
    var formLayout = useFormItemLayout(others);
    var _g = useOverflow(),
      containerRef = _g.containerRef,
      contentRef = _g.contentRef,
      overflow = _g.overflow;
    var label = formLayout.label,
      style = formLayout.style,
      layout = formLayout.layout,
      _h = formLayout.colon,
      colon = _h === void 0 ? true : _h,
      addonBefore = formLayout.addonBefore,
      addonAfter = formLayout.addonAfter,
      asterisk = formLayout.asterisk,
      feedbackStatus = formLayout.feedbackStatus,
      extra = formLayout.extra,
      feedbackText = formLayout.feedbackText,
      fullness = formLayout.fullness,
      feedbackLayout = formLayout.feedbackLayout,
      feedbackIcon = formLayout.feedbackIcon,
      inset = formLayout.inset,
      _j = formLayout.bordered,
      bordered = _j === void 0 ? true : _j,
      labelWidth = formLayout.labelWidth,
      wrapperWidth = formLayout.wrapperWidth,
      labelCol = formLayout.labelCol,
      wrapperCol = formLayout.wrapperCol,
      labelAlign = formLayout.labelAlign,
      _k = formLayout.wrapperAlign,
      wrapperAlign = _k === void 0 ? 'left' : _k,
      size = formLayout.size,
      labelWrap = formLayout.labelWrap,
      wrapperWrap = formLayout.wrapperWrap,
      tooltip = formLayout.tooltip,
      tooltipLayout = formLayout.tooltipLayout,
      tooltipIcon = formLayout.tooltipIcon;
    var labelStyle = __assign$3({}, formLayout.labelStyle);
    var wrapperStyle = __assign$3({}, formLayout.wrapperStyle);
    // 固定宽度
    var enableCol = false;
    if (labelWidth || wrapperWidth) {
      if (labelWidth) {
        labelStyle.width = labelWidth === 'auto' ? undefined : labelWidth;
        labelStyle.maxWidth = labelWidth === 'auto' ? undefined : labelWidth;
      }
      if (wrapperWidth) {
        wrapperStyle.width = wrapperWidth === 'auto' ? undefined : wrapperWidth;
        wrapperStyle.maxWidth = wrapperWidth === 'auto' ? undefined : wrapperWidth;
      }
      // 栅格模式
    }
    if (labelCol || wrapperCol) {
      if (!labelStyle.width && !wrapperStyle.width) {
        enableCol = true;
      }
    }
    var prefixCls = usePrefixCls('formily-item', props);
    var prefix = usePrefixCls();
    var formatChildren =
      feedbackLayout === 'popover'
        ? React__default['default'].createElement(
            Balloon,
            { needAdjust: true, align: 't', closable: false, trigger: children, visible: !!feedbackText },
            React__default['default'].createElement(
              'div',
              {
                className: cls(
                  ((_a = {}),
                  (_a[prefixCls + '-' + feedbackStatus + '-help'] = !!feedbackStatus),
                  (_a[prefixCls + '-help'] = true),
                  _a),
                ),
              },
              ICON_MAP[feedbackStatus],
              ' ',
              feedbackText,
            ),
          )
        : children;
    var gridStyles = {};
    var getOverflowTooltip = function () {
      if (overflow) {
        return React__default['default'].createElement(
          'div',
          null,
          React__default['default'].createElement('div', null, label),
          React__default['default'].createElement('div', null, tooltip),
        );
      }
      return tooltip;
    };
    var renderLabelText = function () {
      var labelChildren = React__default['default'].createElement(
        'div',
        { className: cls(prefixCls + '-label-content'), ref: containerRef },
        asterisk && React__default['default'].createElement('span', { className: cls(prefixCls + '-asterisk') }, '*'),
        React__default['default'].createElement('label', { ref: contentRef }, label),
      );
      if ((tooltipLayout === 'text' && tooltip) || overflow) {
        return React__default['default'].createElement(
          Balloon.Tooltip,
          { align: 't', trigger: labelChildren },
          getOverflowTooltip(),
        );
      }
      return labelChildren;
    };
    var renderTooltipIcon = function () {
      if (tooltip && tooltipLayout === 'icon' && !overflow) {
        return React__default['default'].createElement(
          'span',
          { className: cls(prefixCls + '-label-tooltip-icon') },
          React__default['default'].createElement(Balloon.Tooltip, { align: 't', trigger: tooltipIcon }, tooltip),
        );
      }
    };
    var renderLabel = function () {
      var _a;
      if (!label) return null;
      return React__default['default'].createElement(
        'div',
        {
          className: cls(
            ((_a = {}),
            (_a[prefixCls + '-label'] = true),
            (_a[prefixCls + '-label-tooltip'] = (tooltip && tooltipLayout === 'text') || overflow),
            (_a[prefixCls + '-item-col-' + labelCol] = enableCol && !!labelCol),
            _a),
          ),
          style: labelStyle,
        },
        renderLabelText(),
        renderTooltipIcon(),
        label !== ' ' &&
          React__default['default'].createElement('span', { className: cls(prefixCls + '-colon') }, colon ? ':' : ''),
      );
    };
    return React__default['default'].createElement(
      'div',
      __assign$3({}, pickDataProps(props), {
        style: __assign$3(__assign$3({}, style), gridStyles),
        'data-grid-span': props.gridSpan,
        className: cls(
          ((_b = {}),
          (_b['' + prefixCls] = true),
          (_b[prefixCls + '-layout-' + layout] = true),
          (_b[prefixCls + '-' + feedbackStatus] = !!feedbackStatus),
          (_b[prefixCls + '-feedback-has-text'] = !!feedbackText),
          (_b[prefixCls + '-size-' + size] = !!size),
          (_b[prefixCls + '-feedback-layout-' + feedbackLayout] = !!feedbackLayout),
          (_b[prefixCls + '-fullness'] = !!fullness || !!inset || !!feedbackIcon),
          (_b[prefixCls + '-inset'] = !!inset),
          (_b[prefix + '-input'] = !!inset),
          (_b[prefixCls + '-active'] = active),
          (_b[prefix + '-focus'] = active),
          (_b[prefixCls + '-inset-active'] = !!inset && active),
          (_b[prefixCls + '-label-align-' + labelAlign] = true),
          (_b[prefixCls + '-control-align-' + wrapperAlign] = true),
          (_b[prefixCls + '-label-wrap'] = !!labelWrap),
          (_b[prefixCls + '-control-wrap'] = !!wrapperWrap),
          (_b[prefixCls + '-bordered-none'] = bordered === false),
          (_b[props.className] = !!props.className),
          _b),
        ),
        onFocus: function () {
          if (feedbackIcon || inset) {
            setActive(true);
          }
        },
        onBlur: function () {
          if (feedbackIcon || inset) {
            setActive(false);
          }
        },
      }),
      renderLabel(),
      React__default['default'].createElement(
        'div',
        {
          className: cls(
            ((_c = {}),
            (_c[prefixCls + '-control'] = true),
            (_c[prefixCls + '-item-col-' + wrapperCol] = enableCol && !!wrapperCol && label),
            _c),
          ),
        },
        React__default['default'].createElement(
          'div',
          { className: cls(prefixCls + '-control-content') },
          addonBefore &&
            React__default['default'].createElement(
              'div',
              { className: cls(prefixCls + '-addon-before') },
              addonBefore,
            ),
          React__default['default'].createElement(
            'div',
            {
              style: wrapperStyle,
              className: cls(
                ((_d = {}),
                (_d[prefixCls + '-control-content-component'] = true),
                (_d[prefixCls + '-control-content-component-has-feedback-icon'] = !!feedbackIcon),
                (_d[prefix + '-input'] = !!feedbackIcon),
                (_d[prefixCls + '-active'] = active),
                (_d[prefix + '-focus'] = active),
                _d),
              ),
            },
            React__default['default'].createElement(
              FormLayoutShallowContext.Provider,
              { value: { size: size } },
              formatChildren,
            ),
            feedbackIcon &&
              React__default['default'].createElement(
                'div',
                { className: cls(prefixCls + '-feedback-icon') },
                feedbackIcon,
              ),
          ),
          addonAfter &&
            React__default['default'].createElement('div', { className: cls(prefixCls + '-addon-after') }, addonAfter),
        ),
        !!feedbackText &&
          feedbackLayout !== 'popover' &&
          feedbackLayout !== 'none' &&
          React__default['default'].createElement(
            'div',
            {
              className: cls(
                ((_e = {}),
                (_e[prefixCls + '-' + feedbackStatus + '-help'] = !!feedbackStatus),
                (_e[prefixCls + '-help'] = true),
                (_e[prefixCls + '-help-enter'] = true),
                (_e[prefixCls + '-help-enter-active'] = true),
                _e),
              ),
            },
            feedbackText,
          ),
        extra && React__default['default'].createElement('div', { className: cls(prefixCls + '-extra') }, extra),
      ),
    );
  };
  // 适配
  var FormItem = connect(
    BaseItem,
    mapProps(
      { validateStatus: true, title: 'label', required: true },
      function (props, field) {
        if (isVoidField(field))
          return {
            extra: props.extra || field.description,
          };
        if (!field) return props;
        var takeMessage = function () {
          var split = function (messages) {
            return messages.reduce(function (buf, text, index) {
              if (!text) return buf;
              return index < messages.length - 1 ? buf.concat([text, ', ']) : buf.concat([text]);
            }, []);
          };
          if (field.validating) return;
          if (props.feedbackText) return props.feedbackText;
          if (field.selfErrors.length) return split(field.selfErrors);
          if (field.selfWarnings.length) return split(field.selfWarnings);
          if (field.selfSuccesses.length) return split(field.selfSuccesses);
        };
        return {
          feedbackText: takeMessage(),
          extra: props.extra || field.description,
        };
      },
      function (props, field) {
        var _a;
        if (isVoidField(field)) return props;
        if (!field) return props;
        return {
          feedbackStatus:
            field.validateStatus === 'validating'
              ? 'pending'
              : ((_a = field.decorator[1]) === null || _a === void 0 ? void 0 : _a.feedbackStatus) ||
                field.validateStatus,
        };
      },
      function (props, field) {
        if (isVoidField(field)) return props;
        if (!field) return props;
        var asterisk = false;
        if (field.required && field.pattern !== 'readPretty') {
          asterisk = true;
        }
        if ('asterisk' in props) {
          asterisk = props.asterisk;
        }
        return {
          asterisk: asterisk,
        };
      },
    ),
  );
  FormItem.defaultProps = {
    fullness: true,
  };
  FormItem.BaseItem = BaseItem;

  var PlaceholderContext = React.createContext('N/A');
  var Placeholder = PlaceholderContext.Provider;
  var usePlaceholder = function (value) {
    var placeholder = React.useContext(PlaceholderContext) || 'N/A';
    return !isEmpty(value) ? value : placeholder;
  };
  var Input$1 = function (props) {
    var prefixCls = usePrefixCls('form-text', props);
    return React__default['default'].createElement(
      'div',
      { className: cls(prefixCls, props.className) },
      props.addonBefore,
      props.innerBefore,
      usePlaceholder(props.value),
      props.innerAfter,
      props.addonAfter,
    );
  };
  var Select = observer(function (props) {
    var _a, _b;
    var field = useField();
    var prefixCls = usePrefixCls('form-text', props);
    var dataSource = (
      (_a = field === null || field === void 0 ? void 0 : field.dataSource) === null || _a === void 0
        ? void 0
        : _a.length
    )
      ? field.dataSource
      : (
          (_b = props === null || props === void 0 ? void 0 : props.dataSource) === null || _b === void 0
            ? void 0
            : _b.length
        )
      ? props.dataSource
      : [];
    var placeholder = usePlaceholder();
    var getSelected = function () {
      var value = props.value;
      if (props.mode === 'multiple' || props.mode === 'tag') {
        if (props.useDetailValue) {
          return isArr$2(value) ? value : [];
        } else {
          return isArr$2(value)
            ? value.map(function (val) {
                return { label: val, value: val };
              })
            : [];
        }
      } else {
        if (props.useDetailValue) {
          return isValid$4(value) ? [value] : [];
        } else {
          return isValid$4(value) ? [{ label: value, value: value }] : [];
        }
      }
    };
    var getLabel = function (target) {
      var _a;
      return (
        ((_a =
          dataSource === null || dataSource === void 0
            ? void 0
            : dataSource.find(function (item) {
                return item.value == (target === null || target === void 0 ? void 0 : target.value);
              })) === null || _a === void 0
          ? void 0
          : _a.label) ||
        target.label ||
        placeholder
      );
    };
    var getLabels = function () {
      var selected = getSelected();
      if (!selected.length) return placeholder;
      if (selected.length === 1) return getLabel(selected[0]);
      return selected.map(function (item, key) {
        return React__default['default'].createElement(
          Tag,
          { type: 'primary', size: 'small', key: key },
          getLabel(item),
        );
      });
    };
    return React__default['default'].createElement('div', { className: cls(prefixCls, props.className) }, getLabels());
  });
  var TreeSelect = observer(function (props) {
    var _a, _b;
    var field = useField();
    var placeholder = usePlaceholder();
    var prefixCls = usePrefixCls('form-text', props);
    var dataSource = (
      (_a = field === null || field === void 0 ? void 0 : field.dataSource) === null || _a === void 0
        ? void 0
        : _a.length
    )
      ? field.dataSource
      : (
          (_b = props === null || props === void 0 ? void 0 : props.dataSource) === null || _b === void 0
            ? void 0
            : _b.length
        )
      ? props.dataSource
      : [];
    var getSelected = function () {
      var value = props.value;
      if (props.multiple) {
        if (props['useDetailValue']) {
          return isArr$2(value) ? value : [];
        } else {
          return isArr$2(value)
            ? value.map(function (val) {
                return { label: val, value: val };
              })
            : [];
        }
      } else {
        if (props['useDetailValue']) {
          return value ? [value] : [];
        } else {
          return value ? [{ label: value, value: value }] : [];
        }
      }
    };
    var findLabel = function (value, dataSource) {
      for (var i = 0; i < (dataSource === null || dataSource === void 0 ? void 0 : dataSource.length); i++) {
        var item = dataSource[i];
        if ((item === null || item === void 0 ? void 0 : item.value) === value) {
          return item === null || item === void 0 ? void 0 : item.label;
        } else {
          var childLabel = findLabel(value, item === null || item === void 0 ? void 0 : item.children);
          if (childLabel) return childLabel;
        }
      }
    };
    var getLabels = function () {
      var selected = getSelected();
      if (!(selected === null || selected === void 0 ? void 0 : selected.length))
        return React__default['default'].createElement(Tag, { type: 'primary', size: 'small' }, placeholder);
      return selected.map(function (_a, key) {
        var value = _a.value,
          label = _a.label;
        return React__default['default'].createElement(
          Tag,
          { type: 'primary', size: 'small', key: key },
          findLabel(value, dataSource) || label || placeholder,
        );
      });
    };
    return React__default['default'].createElement('div', { className: cls(prefixCls, props.className) }, getLabels());
  });
  var Cascader = observer(function (props) {
    var _a, _b;
    var field = useField();
    var placeholder = usePlaceholder();
    var prefixCls = usePrefixCls('form-text', props);
    var dataSource = (
      (_a = field === null || field === void 0 ? void 0 : field.dataSource) === null || _a === void 0
        ? void 0
        : _a.length
    )
      ? field.dataSource
      : (
          (_b = props === null || props === void 0 ? void 0 : props.dataSource) === null || _b === void 0
            ? void 0
            : _b.length
        )
      ? props.dataSource
      : [];
    var getSelected = function () {
      return isArr$2(props.value) ? props.value : [];
    };
    var getLabels = function () {
      var selected = getSelected();
      return selected
        .map(function (value) {
          var _a;
          return (
            ((_a =
              dataSource === null || dataSource === void 0
                ? void 0
                : dataSource.find(function (item) {
                    return item.value == value;
                  })) === null || _a === void 0
              ? void 0
              : _a.label) || placeholder
          );
        })
        .join('/');
    };
    return React__default['default'].createElement('div', { className: cls(prefixCls, props.className) }, getLabels());
  });
  var DatePicker = function (props) {
    var placeholder = usePlaceholder();
    var prefixCls = usePrefixCls('form-text', props);
    var getLabels = function () {
      var labels = formatMomentValue(props.value, props.format, placeholder);
      return isArr$2(labels) ? labels.join('~') : labels;
    };
    return React__default['default'].createElement('div', { className: cls(prefixCls, props.className) }, getLabels());
  };
  var DateRangePicker = function (props) {
    var placeholder = usePlaceholder();
    var prefixCls = usePrefixCls('form-text', props);
    var getLabels = function () {
      var labels = formatMomentValue(props.value, props.format, placeholder);
      return isArr$2(labels) ? labels.join('~') : labels;
    };
    return React__default['default'].createElement('div', { className: cls(prefixCls, props.className) }, getLabels());
  };
  var TimePicker = function (props) {
    var placeholder = usePlaceholder();
    var prefixCls = usePrefixCls('form-text', props);
    var getLabels = function () {
      var labels = formatMomentValue(props.value, props.format, placeholder);
      return isArr$2(labels) ? labels.join('~') : labels;
    };
    return React__default['default'].createElement('div', { className: cls(prefixCls, props.className) }, getLabels());
  };
  var Text = function (props) {
    var prefixCls = usePrefixCls('form-text', props);
    return React__default['default'].createElement(
      'div',
      { className: cls(prefixCls, props.className), style: props.style },
      usePlaceholder(props.value),
    );
  };
  Text.Input = Input$1;
  Text.Select = Select;
  Text.TreeSelect = TreeSelect;
  Text.Cascader = Cascader;
  Text.DatePicker = DatePicker;
  Text.DateRangePicker = DateRangePicker;
  Text.TimePicker = TimePicker;
  Text.Placeholder = Placeholder;
  Text.usePlaceholder = usePlaceholder;
  var PreviewText = Text;

  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    _setPrototypeOf(subClass, superClass);
  }

  var getScrollParent = function (node) {
    var parent = node;

    while ((parent = parent.parentElement)) {
      var overflowYVal = getComputedStyle(parent, null).getPropertyValue('overflow-y');
      if (parent === document.body) return window;
      if (overflowYVal === 'auto' || overflowYVal === 'scroll') return parent;
    }

    return window;
  };

  var offsetTill = function (node, target) {
    var current = node;
    var offset = 0; // If target is not an offsetParent itself, subtract its offsetTop and set correct target

    if (target.firstChild && target.firstChild.offsetParent !== target) {
      offset += node.offsetTop - target.offsetTop;
      target = node.offsetParent;
      offset += -node.offsetTop;
    }

    do {
      offset += current.offsetTop;
      current = current.offsetParent;
    } while (current && current !== target);

    return offset;
  };

  var stickyProp = null;

  if (typeof CSS !== 'undefined' && CSS.supports) {
    if (CSS.supports('position', 'sticky')) stickyProp = 'sticky';
    else if (CSS.supports('position', '-webkit-sticky')) stickyProp = '-webkit-sticky';
  } // Inspired by https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md#feature-detection

  var passiveArg = false;

  try {
    var opts = Object.defineProperty({}, 'passive', {
      // eslint-disable-next-line getter-return
      get: function get() {
        passiveArg = {
          passive: true,
        };
      },
    });
    window.addEventListener('testPassive', null, opts);
    window.removeEventListener('testPassive', null, opts);
  } catch (e) {}

  var StickyBox =
    /*#__PURE__*/
    (function (_React$Component) {
      _inheritsLoose(StickyBox, _React$Component);

      function StickyBox(props) {
        var _this = _React$Component.call(this, props) || this;

        _this.addListener = function (element, event, handler, passive) {
          element.addEventListener(event, handler, passive);

          _this.unsubscribes.push(function () {
            return element.removeEventListener(event, handler);
          });
        };

        _this.addResizeObserver = function (node, handler) {
          var ro = new index(handler);
          ro.observe(node);

          _this.unsubscribes.push(function () {
            return ro.disconnect();
          });
        };

        _this.registerContainerRef = function (n) {
          if (!stickyProp) return;
          _this.node = n;

          if (n) {
            _this.scrollPane = getScrollParent(_this.node);
            _this.latestScrollY = _this.scrollPane === window ? window.scrollY : _this.scrollPane.scrollTop;

            _this.addListener(_this.scrollPane, 'scroll', _this.handleScroll, passiveArg);

            _this.addListener(_this.scrollPane, 'mousewheel', _this.handleScroll, passiveArg);

            if (_this.scrollPane === window) {
              _this.addListener(window, 'resize', _this.handleWindowResize);

              _this.handleWindowResize();
            } else {
              _this.addResizeObserver(_this.scrollPane, _this.handleScrollPaneResize);

              _this.handleScrollPaneResize();
            }

            _this.addResizeObserver(_this.node.parentNode, _this.handleParentNodeResize);

            _this.handleParentNodeResize();

            _this.addResizeObserver(_this.node, _this.handleNodeResize);

            _this.handleNodeResize({
              initial: true,
            });

            _this.initial();
          } else {
            _this.unsubscribes.forEach(function (fn) {
              return fn();
            });

            _this.unsubscribes = [];
            _this.scrollPane = null;
          }
        };

        _this.getCurrentOffset = function () {
          if (_this.mode === 'relative') return _this.offset;
          var _this$props = _this.props,
            offsetTop = _this$props.offsetTop,
            offsetBottom = _this$props.offsetBottom;

          if (_this.mode === 'stickyTop') {
            return Math.max(0, _this.scrollPaneOffset + _this.latestScrollY - _this.naturalTop + offsetTop);
          }

          if (_this.mode === 'stickyBottom') {
            return Math.max(
              0,
              _this.scrollPaneOffset +
                _this.latestScrollY +
                _this.viewPortHeight -
                (_this.naturalTop + _this.nodeHeight + offsetBottom),
            );
          }
        };

        _this.handleWindowResize = function () {
          _this.viewPortHeight = window.innerHeight;
          _this.scrollPaneOffset = 0;

          _this.handleScroll();
        };

        _this.handleScrollPaneResize = function () {
          _this.viewPortHeight = _this.scrollPane.offsetHeight;

          if (_this.viewPortHeight === 0) {
            console.warn(
              "react-sticky-box's scroll pane has a height of 0. This seems odd. Please check this node:",
              _this.scrollPane,
            );
          } // Only applicable if scrollPane is an offsetParent

          if (_this.scrollPane.firstChild.offsetParent === _this.scrollPane) {
            _this.scrollPaneOffset = _this.scrollPane.getBoundingClientRect().top;
          } else {
            _this.scrollPaneOffset = 0;
          }

          _this.handleScroll();
        };

        _this.handleParentNodeResize = function () {
          var parentNode = _this.node.parentNode;
          var computedParentStyle = getComputedStyle(parentNode, null);
          var parentPaddingTop = parseInt(computedParentStyle.getPropertyValue('padding-top'), 10);
          var parentPaddingBottom = parseInt(computedParentStyle.getPropertyValue('padding-bottom'), 10);
          _this.naturalTop = offsetTill(parentNode, _this.scrollPane) + parentPaddingTop + _this.scrollPaneOffset;
          var oldParentHeight = _this.parentHeight;
          _this.parentHeight = parentNode.getBoundingClientRect().height - (parentPaddingTop + parentPaddingBottom);

          if (_this.mode === 'relative') {
            if (_this.props.bottom) {
              _this.changeMode('relative');
            } else {
              // If parent height decreased...
              if (oldParentHeight > _this.parentHeight) {
                _this.changeToStickyBottomIfBoxTooLow(_this.latestScrollY);
              }
            }
          }

          if (oldParentHeight !== _this.parentHeight && _this.mode === 'relative') {
            _this.latestScrollY = Number.POSITIVE_INFINITY;

            _this.handleScroll();
          }
        };

        _this.handleNodeResize = function (_temp) {
          var _ref = _temp === void 0 ? {} : _temp,
            initial = _ref.initial;

          var prevHeight = _this.nodeHeight;
          _this.nodeHeight = _this.node.getBoundingClientRect().height;

          if (!initial && prevHeight !== _this.nodeHeight) {
            var _this$props2 = _this.props,
              offsetTop = _this$props2.offsetTop,
              offsetBottom = _this$props2.offsetBottom,
              bottom = _this$props2.bottom;

            if (_this.nodeHeight + offsetTop + offsetBottom <= _this.viewPortHeight) {
              // Just make it sticky if node smaller than viewport
              _this.mode = undefined;

              _this.initial();
            } else {
              var diff = prevHeight - _this.nodeHeight;
              var lowestPossible = _this.parentHeight - _this.nodeHeight;
              var nextOffset = Math.min(lowestPossible, _this.getCurrentOffset() + (bottom ? diff : 0));
              _this.offset = Math.max(0, nextOffset);
              if (!bottom || _this.mode !== 'stickyBottom') _this.changeMode('relative');
            }
          }
        };

        _this.handleScroll = function () {
          var _this$props3 = _this.props,
            offsetTop = _this$props3.offsetTop,
            offsetBottom = _this$props3.offsetBottom;
          var scrollY = _this.scrollPane === window ? window.scrollY : _this.scrollPane.scrollTop;
          if (scrollY === _this.latestScrollY) return;

          if (_this.nodeHeight + offsetTop + offsetBottom <= _this.viewPortHeight) {
            // Just make it sticky if node smaller than viewport
            _this.initial();

            _this.latestScrollY = scrollY;
            return;
          }

          var scrollDelta = scrollY - _this.latestScrollY;
          _this.offset = _this.getCurrentOffset();

          if (scrollDelta > 0) {
            // scroll down
            if (_this.mode === 'stickyTop') {
              if (scrollY + _this.scrollPaneOffset + offsetTop > _this.naturalTop) {
                if (
                  scrollY + _this.scrollPaneOffset + _this.viewPortHeight <=
                  _this.naturalTop + _this.nodeHeight + _this.offset + offsetBottom
                ) {
                  _this.changeMode('relative');
                } else {
                  _this.changeMode('stickyBottom');
                }
              }
            } else if (_this.mode === 'relative') {
              _this.changeToStickyBottomIfBoxTooLow(scrollY);
            }
          } else {
            // scroll up
            if (_this.mode === 'stickyBottom') {
              if (
                _this.scrollPaneOffset + scrollY + _this.viewPortHeight <
                _this.naturalTop + _this.parentHeight + offsetBottom
              ) {
                if (_this.scrollPaneOffset + scrollY + offsetTop >= _this.naturalTop + _this.offset) {
                  _this.changeMode('relative');
                } else {
                  _this.changeMode('stickyTop');
                }
              }
            } else if (_this.mode === 'relative') {
              if (_this.scrollPaneOffset + scrollY + offsetTop < _this.naturalTop + _this.offset) {
                _this.changeMode('stickyTop');
              }
            }
          }

          _this.latestScrollY = scrollY;
        };

        if (props.offset && 'development' !== 'production') {
          console.warn(
            'react-sticky-box\'s "offset" prop is deprecated. Please use "offsetTop" instead. It\'ll be removed in v0.8.',
          );
        }

        _this.unsubscribes = [];
        return _this;
      }

      var _proto = StickyBox.prototype;

      _proto.changeMode = function changeMode(newMode) {
        var _this$props4 = this.props,
          onChangeMode = _this$props4.onChangeMode,
          offsetTop = _this$props4.offsetTop,
          offsetBottom = _this$props4.offsetBottom,
          bottom = _this$props4.bottom;
        if (this.mode !== newMode) onChangeMode(this.mode, newMode);
        this.mode = newMode;

        if (newMode === 'relative') {
          this.node.style.position = 'relative';

          if (bottom) {
            var nextBottom = Math.max(0, this.parentHeight - this.nodeHeight - this.offset);
            this.node.style.bottom = nextBottom + 'px';
          } else {
            this.node.style.top = this.offset + 'px';
          }
        } else {
          this.node.style.position = stickyProp;

          if (newMode === 'stickyBottom') {
            if (bottom) {
              this.node.style.bottom = offsetBottom + 'px';
            } else {
              this.node.style.top = this.viewPortHeight - this.nodeHeight - offsetBottom + 'px';
            }
          } else {
            // stickyTop
            if (bottom) {
              this.node.style.bottom = this.viewPortHeight - this.nodeHeight - offsetBottom + 'px';
            } else {
              this.node.style.top = offsetTop + 'px';
            }
          }
        }

        this.offset = this.getCurrentOffset();
      };

      _proto.initial = function initial() {
        var bottom = this.props.bottom;

        if (bottom) {
          if (this.mode !== 'stickyBottom') this.changeMode('stickyBottom');
        } else {
          if (this.mode !== 'stickyTop') this.changeMode('stickyTop');
        }
      };

      _proto.changeToStickyBottomIfBoxTooLow = function changeToStickyBottomIfBoxTooLow(scrollY) {
        var offsetBottom = this.props.offsetBottom;

        if (
          scrollY + this.scrollPaneOffset + this.viewPortHeight >=
          this.naturalTop + this.nodeHeight + this.offset + offsetBottom
        ) {
          this.changeMode('stickyBottom');
        }
      };

      _proto.render = function render() {
        var _this$props5 = this.props,
          children = _this$props5.children,
          className = _this$props5.className,
          style = _this$props5.style;
        return React__default['default'].createElement(
          'div',
          {
            className: className,
            style: style,
            ref: this.registerContainerRef,
          },
          children,
        );
      };

      return StickyBox;
    })(React__default['default'].Component);
  StickyBox.defaultProps = {
    onChangeMode: function onChangeMode() {},
    offsetTop: 0,
    offsetBottom: 0,
  };
  StickyBox.propTypes = {
    onChangeMode: PropTypes$2.func,
    offsetTop: PropTypes$2.number,
    offsetBottom: PropTypes$2.number,
    bottom: PropTypes$2.bool,
  };

  var __assign$2 =
    (undefined && undefined.__assign) ||
    function () {
      __assign$2 =
        Object.assign ||
        function (t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
      return __assign$2.apply(this, arguments);
    };
  var __rest$2 =
    (undefined && undefined.__rest) ||
    function (s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === 'function')
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
        }
      return t;
    };
  var spaceSize = {
    small: 8,
    middle: 16,
    large: 24,
  };
  var Space = function (_a) {
    var _b;
    var direction = _a.direction,
      size = _a.size,
      align = _a.align,
      props = __rest$2(_a, ['direction', 'size', 'align']);
    var layout = useFormLayout();
    var prefix = usePrefixCls('space', props);
    var getDirection = function () {
      if (direction === 'horizontal') {
        return 'row';
      } else {
        return 'column';
      }
    };
    var getAlign = function () {
      if (align === 'start') {
        return 'flex-start';
      } else if (align === 'end') {
        return 'flex-end';
      } else {
        return 'center';
      }
    };
    var _size =
      (_b =
        size !== null && size !== void 0 ? size : layout === null || layout === void 0 ? void 0 : layout.spaceGap) !==
        null && _b !== void 0
        ? _b
        : 8;
    return React__default['default'].createElement(
      Box$1,
      __assign$2({}, props, {
        spacing: isNumberLike$1(_size) ? _size : spaceSize[_size] || 8,
        style: __assign$2({ alignItems: 'center', display: 'inline-flex' }, props.style),
        align: getAlign(),
        direction: getDirection(),
      }),
      toArray(props.children, { keepEmpty: true }).map(function (child, index) {
        return React__default['default'].createElement('div', { className: prefix + '-item', key: index }, child);
      }),
    );
  };
  Space.defaultProps = {
    direction: 'horizontal',
    align: 'start',
  };

  var __assign$1 =
    (undefined && undefined.__assign) ||
    function () {
      __assign$1 =
        Object.assign ||
        function (t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
      return __assign$1.apply(this, arguments);
    };
  var __rest$1 =
    (undefined && undefined.__rest) ||
    function (s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === 'function')
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
        }
      return t;
    };
  var __read =
    (undefined && undefined.__read) ||
    function (o, n) {
      var m = typeof Symbol === 'function' && o[Symbol.iterator];
      if (!m) return o;
      var i = m.call(o),
        r,
        ar = [],
        e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
      } catch (error) {
        e = { error: error };
      } finally {
        try {
          if (r && !r.done && (m = i['return'])) m.call(i);
        } finally {
          if (e) throw e.error;
        }
      }
      return ar;
    };
  function getInheritedBackgroundColor(el) {
    // get default style for current browser
    var defaultStyle = getDefaultBackground(); // typically "rgba(0, 0, 0, 0)"
    // get computed color for el
    var backgroundColor = window.getComputedStyle(el).backgroundColor;
    // if we got a real value, return it
    if (backgroundColor != defaultStyle) return backgroundColor;
    // if we've reached the top parent el without getting an explicit color, return default
    if (!el.parentElement) return defaultStyle;
    // otherwise, recurse and try again on parent element
    return getInheritedBackgroundColor(el.parentElement);
  }
  function getDefaultBackground() {
    // have to add to the document in order to use getComputedStyle
    var div = document.createElement('div');
    document.head.appendChild(div);
    var bg = window.getComputedStyle(div).backgroundColor;
    document.head.removeChild(div);
    return bg;
  }
  var FormButtonGroup = function (_a) {
    var align = _a.align,
      gutter = _a.gutter,
      props = __rest$1(_a, ['align', 'gutter']);
    var prefixCls = usePrefixCls('formily-button-group');
    return React__default['default'].createElement(
      Space,
      __assign$1({}, props, {
        size: gutter,
        className: cls(prefixCls, props.className),
        style: __assign$1(__assign$1({}, props.style), {
          justifyContent: align === 'left' ? 'flex-start' : align === 'right' ? 'flex-end' : 'center',
          display: 'flex',
        }),
      }),
      props.children,
    );
  };
  FormButtonGroup.defaultProps = {
    align: 'left',
  };
  FormButtonGroup.FormItem = function (_a) {
    var _b;
    var gutter = _a.gutter,
      props = __rest$1(_a, ['gutter']);
    return React__default['default'].createElement(
      BaseItem,
      __assign$1({}, props, {
        label: ' ',
        style: __assign$1(__assign$1({ margin: 0, padding: 0 }, props.style), { width: '100%' }),
        colon: false,
      }),
      ((_b = props.children) === null || _b === void 0 ? void 0 : _b['length'])
        ? React__default['default'].createElement(Space, { size: gutter }, props.children)
        : props.children,
    );
  };
  FormButtonGroup.Sticky = function (_a) {
    var align = _a.align,
      props = __rest$1(_a, ['align']);
    var ref = React.useRef();
    var _b = __read(React.useState('transparent'), 2),
      color = _b[0],
      setColor = _b[1];
    var prefixCls = usePrefixCls('formily-button-group');
    React.useLayoutEffect(function () {
      if (ref.current) {
        var computed = getInheritedBackgroundColor(ref.current);
        if (computed !== color) {
          setColor(computed);
        }
      }
    });
    return React__default['default'].createElement(
      StickyBox,
      __assign$1({}, props, {
        className: cls(prefixCls + '-sticky', props.className),
        style: __assign$1({ backgroundColor: color }, props.style),
        bottom: true,
      }),
      React__default['default'].createElement(
        'div',
        {
          ref: ref,
          className: prefixCls + '-sticky-inner',
          style: __assign$1(__assign$1({}, props.style), {
            justifyContent: align === 'left' ? 'flex-start' : align === 'right' ? 'flex-end' : 'center',
          }),
        },
        props.children,
      ),
    );
  };
  FormButtonGroup.Sticky.defaultProps = {
    align: 'left',
  };

  var Input = connect(Input$2, mapProps(mapSize, mapStatus), mapReadPretty(PreviewText.Input));
  Input.TextArea = connect(Input$2.TextArea, mapProps(mapSize, mapStatus), mapReadPretty(PreviewText.Input));

  var __assign =
    (undefined && undefined.__assign) ||
    function () {
      __assign =
        Object.assign ||
        function (t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
        };
      return __assign.apply(this, arguments);
    };
  var __rest =
    (undefined && undefined.__rest) ||
    function (s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === 'function')
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
        }
      return t;
    };
  var Submit = observer(
    function (_a) {
      var onSubmit = _a.onSubmit,
        onSubmitFailed = _a.onSubmitFailed,
        onSubmitSuccess = _a.onSubmitSuccess,
        props = __rest(_a, ['onSubmit', 'onSubmitFailed', 'onSubmitSuccess']);
      var form = useParentForm();
      return React__default['default'].createElement(
        Button,
        __assign({ htmlType: onSubmit ? 'button' : 'submit', type: 'primary' }, props, {
          loading: props.loading !== undefined ? props.loading : form.submitting,
          onClick: function (e) {
            if (props.onClick) {
              if (props.onClick(e) === false) return;
            }
            if (onSubmit) {
              form.submit(onSubmit).then(onSubmitSuccess).catch(onSubmitFailed);
            }
          },
        }),
        props.children,
      );
    },
    {
      forwardRef: true,
    },
  );

  var form = createForm();

  var FormComponent = function FormComponent() {
    return /*#__PURE__*/ React__default['default'].createElement(
      FormProvider,
      {
        form: form,
      },
      /*#__PURE__*/ React__default['default'].createElement(
        FormLayout,
        {
          layout: 'vertical',
        },
        /*#__PURE__*/ React__default['default'].createElement(Field, {
          name: 'input',
          title: '\u8F93\u5165\u6846',
          required: true,
          initialValue: 'Hello world',
          decorator: [FormItem],
          component: [Input],
        }),
      ),
      /*#__PURE__*/ React__default['default'].createElement(FormConsumer, null, function () {
        return /*#__PURE__*/ React__default['default'].createElement(
          'div',
          {
            style: {
              marginBottom: 20,
              padding: 5,
              border: '1px dashed #666',
            },
          },
          '\u5B9E\u65F6\u54CD\u5E94\uFF1A',
          form.values.input,
        );
      }),
      /*#__PURE__*/ React__default['default'].createElement(
        FormButtonGroup,
        null,
        /*#__PURE__*/ React__default['default'].createElement(
          Submit,
          {
            onSubmit: console.log,
          },
          '\u63D0\u4EA4',
        ),
      ),
    );
  };

  exports.Component = Component;
  exports.FormComponent = FormComponent;

  Object.defineProperty(exports, '__esModule', { value: true });
});
